
EthernetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b93c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd9c  0800bd9c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda4  0800bda4  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda8  0800bda8  0001bda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800bdac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          0000102c  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001104  20001104  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018164  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004167  00000000  00000000  0003826c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002590a  00000000  00000000  0003ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4a5  00000000  00000000  0006437a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d033b  00000000  00000000  0007e81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eb5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b2c  00000000  00000000  0014ebac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bab4 	.word	0x0800bab4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800bab4 	.word	0x0800bab4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <WIZCHIP_READ+0x94>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <WIZCHIP_READ+0x94>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <WIZCHIP_READ+0x94>)
 800058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <WIZCHIP_READ+0x24>
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <WIZCHIP_READ+0x94>)
 8000592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000594:	2b00      	cmp	r3, #0
 8000596:	d114      	bne.n	80005c2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <WIZCHIP_READ+0x94>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	0c12      	lsrs	r2, r2, #16
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	4610      	mov	r0, r2
 80005a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <WIZCHIP_READ+0x94>)
 80005a8:	6a1b      	ldr	r3, [r3, #32]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	0a12      	lsrs	r2, r2, #8
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	4610      	mov	r0, r2
 80005b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <WIZCHIP_READ+0x94>)
 80005b6:	6a1b      	ldr	r3, [r3, #32]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	b2d2      	uxtb	r2, r2
 80005bc:	4610      	mov	r0, r2
 80005be:	4798      	blx	r3
 80005c0:	e011      	b.n	80005e6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	0c1b      	lsrs	r3, r3, #16
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <WIZCHIP_READ+0x94>)
 80005da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005dc:	f107 020c 	add.w	r2, r7, #12
 80005e0:	2103      	movs	r1, #3
 80005e2:	4610      	mov	r0, r2
 80005e4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <WIZCHIP_READ+0x94>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4798      	blx	r3
 80005ec:	4603      	mov	r3, r0
 80005ee:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <WIZCHIP_READ+0x94>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <WIZCHIP_READ+0x94>)
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	4798      	blx	r3
   return ret;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000020 	.word	0x20000020

0800060c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 800062e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000630:	2b00      	cmp	r3, #0
 8000632:	d119      	bne.n	8000668 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	0c12      	lsrs	r2, r2, #16
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	4610      	mov	r0, r2
 8000640:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	0a12      	lsrs	r2, r2, #8
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	4610      	mov	r0, r2
 800064e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4610      	mov	r0, r2
 800065a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	78fa      	ldrb	r2, [r7, #3]
 8000662:	4610      	mov	r0, r2
 8000664:	4798      	blx	r3
 8000666:	e013      	b.n	8000690 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	b2db      	uxtb	r3, r3
 800066e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b2db      	uxtb	r3, r3
 8000676:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000686:	f107 020c 	add.w	r2, r7, #12
 800068a:	2104      	movs	r1, #4
 800068c:	4610      	mov	r0, r2
 800068e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <WIZCHIP_WRITE+0x98>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	4798      	blx	r3
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000020 	.word	0x20000020

080006a8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	4798      	blx	r3
   WIZCHIP.CS._select();
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <WIZCHIP_READ_BUF+0x2a>
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d126      	bne.n	8000720 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	0c12      	lsrs	r2, r2, #16
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	4610      	mov	r0, r2
 80006de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	0a12      	lsrs	r2, r2, #8
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	4610      	mov	r0, r2
 80006ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 80006f0:	6a1b      	ldr	r3, [r3, #32]
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	4610      	mov	r0, r2
 80006f8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	82fb      	strh	r3, [r7, #22]
 80006fe:	e00a      	b.n	8000716 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	8afa      	ldrh	r2, [r7, #22]
 8000706:	68b9      	ldr	r1, [r7, #8]
 8000708:	188c      	adds	r4, r1, r2
 800070a:	4798      	blx	r3
 800070c:	4603      	mov	r3, r0
 800070e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000710:	8afb      	ldrh	r3, [r7, #22]
 8000712:	3301      	adds	r3, #1
 8000714:	82fb      	strh	r3, [r7, #22]
 8000716:	8afa      	ldrh	r2, [r7, #22]
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3f0      	bcc.n	8000700 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800071e:	e017      	b.n	8000750 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	b2db      	uxtb	r3, r3
 8000726:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b2db      	uxtb	r3, r3
 800072e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 8000738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800073a:	f107 0210 	add.w	r2, r7, #16
 800073e:	2103      	movs	r1, #3
 8000740:	4610      	mov	r0, r2
 8000742:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	88fa      	ldrh	r2, [r7, #6]
 800074a:	4611      	mov	r1, r2
 800074c:	68b8      	ldr	r0, [r7, #8]
 800074e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000756:	4b03      	ldr	r3, [pc, #12]	; (8000764 <WIZCHIP_READ_BUF+0xbc>)
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	4798      	blx	r3
}
 800075c:	bf00      	nop
 800075e:	371c      	adds	r7, #28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	20000020 	.word	0x20000020

08000768 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 800078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078e:	2b00      	cmp	r3, #0
 8000790:	d126      	bne.n	80007e0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	0c12      	lsrs	r2, r2, #16
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	4610      	mov	r0, r2
 800079e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	0a12      	lsrs	r2, r2, #8
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	4610      	mov	r0, r2
 80007ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 80007b0:	6a1b      	ldr	r3, [r3, #32]
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	4610      	mov	r0, r2
 80007b8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	82fb      	strh	r3, [r7, #22]
 80007be:	e00a      	b.n	80007d6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 80007c2:	6a1b      	ldr	r3, [r3, #32]
 80007c4:	8afa      	ldrh	r2, [r7, #22]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	440a      	add	r2, r1
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	4610      	mov	r0, r2
 80007ce:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80007d0:	8afb      	ldrh	r3, [r7, #22]
 80007d2:	3301      	adds	r3, #1
 80007d4:	82fb      	strh	r3, [r7, #22]
 80007d6:	8afa      	ldrh	r2, [r7, #22]
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d3f0      	bcc.n	80007c0 <WIZCHIP_WRITE_BUF+0x58>
 80007de:	e017      	b.n	8000810 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	0c1b      	lsrs	r3, r3, #16
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 80007f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fa:	f107 0210 	add.w	r2, r7, #16
 80007fe:	2103      	movs	r1, #3
 8000800:	4610      	mov	r0, r2
 8000802:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 8000806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	4611      	mov	r1, r2
 800080c:	68b8      	ldr	r0, [r7, #8]
 800080e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000816:	4b03      	ldr	r3, [pc, #12]	; (8000824 <WIZCHIP_WRITE_BUF+0xbc>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	4798      	blx	r3
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000020 	.word	0x20000020

08000828 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000832:	2300      	movs	r3, #0
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	2300      	movs	r3, #0
 8000838:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	3301      	adds	r3, #1
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe94 	bl	8000574 <WIZCHIP_READ>
 800084c:	4603      	mov	r3, r0
 800084e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b29c      	uxth	r4, r3
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	3301      	adds	r3, #1
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe86 	bl	8000574 <WIZCHIP_READ>
 8000868:	4603      	mov	r3, r0
 800086a:	b29b      	uxth	r3, r3
 800086c:	4423      	add	r3, r4
 800086e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000870:	89bb      	ldrh	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d01a      	beq.n	80008ac <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	3301      	adds	r3, #1
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe76 	bl	8000574 <WIZCHIP_READ>
 8000888:	4603      	mov	r3, r0
 800088a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b29c      	uxth	r4, r3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	3301      	adds	r3, #1
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe68 	bl	8000574 <WIZCHIP_READ>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4423      	add	r3, r4
 80008aa:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80008ac:	89fa      	ldrh	r2, [r7, #14]
 80008ae:	89bb      	ldrh	r3, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d1c2      	bne.n	800083a <getSn_TX_FSR+0x12>
   return val;
 80008b4:	89fb      	ldrh	r3, [r7, #14]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd90      	pop	{r4, r7, pc}

080008be <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80008be:	b590      	push	{r4, r7, lr}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	81fb      	strh	r3, [r7, #14]
 80008cc:	2300      	movs	r3, #0
 80008ce:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	3301      	adds	r3, #1
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe49 	bl	8000574 <WIZCHIP_READ>
 80008e2:	4603      	mov	r3, r0
 80008e4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80008e6:	89bb      	ldrh	r3, [r7, #12]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	b29c      	uxth	r4, r3
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	3301      	adds	r3, #1
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe3b 	bl	8000574 <WIZCHIP_READ>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29b      	uxth	r3, r3
 8000902:	4423      	add	r3, r4
 8000904:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d01a      	beq.n	8000942 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	3301      	adds	r3, #1
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe2b 	bl	8000574 <WIZCHIP_READ>
 800091e:	4603      	mov	r3, r0
 8000920:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000922:	89fb      	ldrh	r3, [r7, #14]
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b29c      	uxth	r4, r3
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	3301      	adds	r3, #1
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fe1d 	bl	8000574 <WIZCHIP_READ>
 800093a:	4603      	mov	r3, r0
 800093c:	b29b      	uxth	r3, r3
 800093e:	4423      	add	r3, r4
 8000940:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000942:	89fa      	ldrh	r2, [r7, #14]
 8000944:	89bb      	ldrh	r3, [r7, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	d1c2      	bne.n	80008d0 <getSn_RX_RSR+0x12>
   return val;
 800094a:	89fb      	ldrh	r3, [r7, #14]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}

08000954 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d048      	beq.n	8000a04 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	3301      	adds	r3, #1
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fdf8 	bl	8000574 <WIZCHIP_READ>
 8000984:	4603      	mov	r3, r0
 8000986:	b29b      	uxth	r3, r3
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	b29c      	uxth	r4, r3
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	3301      	adds	r3, #1
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fdeb 	bl	8000574 <WIZCHIP_READ>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4423      	add	r3, r4
 80009a4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80009a6:	89fb      	ldrh	r3, [r7, #14]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	3202      	adds	r2, #2
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	4413      	add	r3, r2
 80009b4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	461a      	mov	r2, r3
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	68b8      	ldr	r0, [r7, #8]
 80009be:	f7ff fed3 	bl	8000768 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80009c2:	89fa      	ldrh	r2, [r7, #14]
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	3301      	adds	r3, #1
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80009d6:	461a      	mov	r2, r3
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	4610      	mov	r0, r2
 80009e4:	f7ff fe12 	bl	800060c <WIZCHIP_WRITE>
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	3301      	adds	r3, #1
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80009f4:	461a      	mov	r2, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	4610      	mov	r0, r2
 80009fe:	f7ff fe05 	bl	800060c <WIZCHIP_WRITE>
 8000a02:	e000      	b.n	8000a06 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8000a04:	bf00      	nop
}
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}

08000a0c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d048      	beq.n	8000abc <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	3301      	adds	r3, #1
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fd9c 	bl	8000574 <WIZCHIP_READ>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	b29c      	uxth	r4, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	3301      	adds	r3, #1
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fd8f 	bl	8000574 <WIZCHIP_READ>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	4423      	add	r3, r4
 8000a5c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	79fa      	ldrb	r2, [r7, #7]
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	3203      	adds	r2, #3
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	461a      	mov	r2, r3
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	68b8      	ldr	r0, [r7, #8]
 8000a76:	f7ff fe17 	bl	80006a8 <WIZCHIP_READ_BUF>
   ptr += len;
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	88bb      	ldrh	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	3301      	adds	r3, #1
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000a8e:	461a      	mov	r2, r3
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	f7ff fdb6 	bl	800060c <WIZCHIP_WRITE>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000aac:	461a      	mov	r2, r3
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	f7ff fda9 	bl	800060c <WIZCHIP_WRITE>
 8000aba:	e000      	b.n	8000abe <wiz_recv_data+0xb2>
   if(len == 0) return;
 8000abc:	bf00      	nop
}
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}

08000ac4 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	3301      	adds	r3, #1
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd45 	bl	8000574 <WIZCHIP_READ>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b29c      	uxth	r4, r3
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	3301      	adds	r3, #1
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fd38 	bl	8000574 <WIZCHIP_READ>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4423      	add	r3, r4
 8000b0a:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8000b0c:	89fa      	ldrh	r2, [r7, #14]
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	3301      	adds	r3, #1
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000b20:	461a      	mov	r2, r3
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	f7ff fd6d 	bl	800060c <WIZCHIP_WRITE>
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	3301      	adds	r3, #1
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000b3e:	461a      	mov	r2, r3
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	4610      	mov	r0, r2
 8000b48:	f7ff fd60 	bl	800060c <WIZCHIP_WRITE>
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af04      	add	r7, sp, #16
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	82fb      	strh	r3, [r7, #22]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	3301      	adds	r3, #1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fcfb 	bl	8000574 <WIZCHIP_READ>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b1c      	cmp	r3, #28
 8000b82:	f200 80fe 	bhi.w	8000d82 <loopback_tcps+0x22e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <loopback_tcps+0x38>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000d67 	.word	0x08000d67
 8000b90:	08000d83 	.word	0x08000d83
 8000b94:	08000d83 	.word	0x08000d83
 8000b98:	08000d83 	.word	0x08000d83
 8000b9c:	08000d83 	.word	0x08000d83
 8000ba0:	08000d83 	.word	0x08000d83
 8000ba4:	08000d83 	.word	0x08000d83
 8000ba8:	08000d83 	.word	0x08000d83
 8000bac:	08000d83 	.word	0x08000d83
 8000bb0:	08000d83 	.word	0x08000d83
 8000bb4:	08000d83 	.word	0x08000d83
 8000bb8:	08000d83 	.word	0x08000d83
 8000bbc:	08000d83 	.word	0x08000d83
 8000bc0:	08000d83 	.word	0x08000d83
 8000bc4:	08000d83 	.word	0x08000d83
 8000bc8:	08000d83 	.word	0x08000d83
 8000bcc:	08000d83 	.word	0x08000d83
 8000bd0:	08000d83 	.word	0x08000d83
 8000bd4:	08000d83 	.word	0x08000d83
 8000bd8:	08000d45 	.word	0x08000d45
 8000bdc:	08000d83 	.word	0x08000d83
 8000be0:	08000d83 	.word	0x08000d83
 8000be4:	08000d83 	.word	0x08000d83
 8000be8:	08000c01 	.word	0x08000c01
 8000bec:	08000d83 	.word	0x08000d83
 8000bf0:	08000d83 	.word	0x08000d83
 8000bf4:	08000d83 	.word	0x08000d83
 8000bf8:	08000d83 	.word	0x08000d83
 8000bfc:	08000d23 	.word	0x08000d23
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	3301      	adds	r3, #1
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fcb1 	bl	8000574 <WIZCHIP_READ>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d042      	beq.n	8000ca2 <loopback_tcps+0x14e>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	3301      	adds	r3, #1
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2204      	movs	r2, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff fd39 	bl	80006a8 <WIZCHIP_READ_BUF>
			destport = getSn_DPORT(sn);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc96 	bl	8000574 <WIZCHIP_READ>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b29c      	uxth	r4, r3
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	3301      	adds	r3, #1
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fc89 	bl	8000574 <WIZCHIP_READ>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4423      	add	r3, r4
 8000c68:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8000c6a:	79f9      	ldrb	r1, [r7, #7]
 8000c6c:	7a3b      	ldrb	r3, [r7, #8]
 8000c6e:	461c      	mov	r4, r3
 8000c70:	7a7b      	ldrb	r3, [r7, #9]
 8000c72:	461d      	mov	r5, r3
 8000c74:	7abb      	ldrb	r3, [r7, #10]
 8000c76:	461a      	mov	r2, r3
 8000c78:	7afb      	ldrb	r3, [r7, #11]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	9001      	str	r0, [sp, #4]
 8000c82:	9200      	str	r2, [sp, #0]
 8000c84:	462b      	mov	r3, r5
 8000c86:	4622      	mov	r2, r4
 8000c88:	4844      	ldr	r0, [pc, #272]	; (8000d9c <loopback_tcps+0x248>)
 8000c8a:	f009 ffef 	bl	800ac6c <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	3301      	adds	r3, #1
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fcb5 	bl	800060c <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fe0a 	bl	80008be <getSn_RX_RSR>
 8000caa:	4603      	mov	r3, r0
 8000cac:	82fb      	strh	r3, [r7, #22]
 8000cae:	8afb      	ldrh	r3, [r7, #22]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d068      	beq.n	8000d86 <loopback_tcps+0x232>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8000cb4:	8afb      	ldrh	r3, [r7, #22]
 8000cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cba:	d902      	bls.n	8000cc2 <loopback_tcps+0x16e>
 8000cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc0:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 8000cc2:	8afa      	ldrh	r2, [r7, #22]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	6839      	ldr	r1, [r7, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 ff8d 	bl	8001be8 <recv>
 8000cce:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	dc01      	bgt.n	8000cda <loopback_tcps+0x186>
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	e05b      	b.n	8000d92 <loopback_tcps+0x23e>
			size = (uint16_t) ret;
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 8000ce2:	e019      	b.n	8000d18 <loopback_tcps+0x1c4>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 8000ce4:	8abb      	ldrh	r3, [r7, #20]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	18d1      	adds	r1, r2, r3
 8000cea:	8afa      	ldrh	r2, [r7, #22]
 8000cec:	8abb      	ldrh	r3, [r7, #20]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fe7d 	bl	80019f4 <send>
 8000cfa:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da05      	bge.n	8000d0e <loopback_tcps+0x1ba>
				{
					close(sn);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fd37 	bl	8001778 <close>
					return ret;
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	e041      	b.n	8000d92 <loopback_tcps+0x23e>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	8abb      	ldrh	r3, [r7, #20]
 8000d14:	4413      	add	r3, r2
 8000d16:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 8000d18:	8afa      	ldrh	r2, [r7, #22]
 8000d1a:	8abb      	ldrh	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d1e1      	bne.n	8000ce4 <loopback_tcps+0x190>
			}
         }
         break;
 8000d20:	e031      	b.n	8000d86 <loopback_tcps+0x232>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fdef 	bl	8001908 <disconnect>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d001      	beq.n	8000d38 <loopback_tcps+0x1e4>
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	e02c      	b.n	8000d92 <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <loopback_tcps+0x24c>)
 8000d3e:	f009 ff95 	bl	800ac6c <iprintf>
#endif
         break;
 8000d42:	e025      	b.n	8000d90 <loopback_tcps+0x23c>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	88ba      	ldrh	r2, [r7, #4]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <loopback_tcps+0x250>)
 8000d4c:	f009 ff8e 	bl	800ac6c <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fd7e 	bl	8001854 <listen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d013      	beq.n	8000d8a <loopback_tcps+0x236>
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	e015      	b.n	8000d92 <loopback_tcps+0x23e>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8000d66:	88ba      	ldrh	r2, [r7, #4]
 8000d68:	79f8      	ldrb	r0, [r7, #7]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	f000 fbed 	bl	800154c <socket>
 8000d72:	4603      	mov	r3, r0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d007      	beq.n	8000d8e <loopback_tcps+0x23a>
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	e007      	b.n	8000d92 <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8000d82:	bf00      	nop
 8000d84:	e004      	b.n	8000d90 <loopback_tcps+0x23c>
         break;
 8000d86:	bf00      	nop
 8000d88:	e002      	b.n	8000d90 <loopback_tcps+0x23c>
         break;
 8000d8a:	bf00      	nop
 8000d8c:	e000      	b.n	8000d90 <loopback_tcps+0x23c>
         break;
 8000d8e:	bf00      	nop
   }
   return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bdb0      	pop	{r4, r5, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	0800bacc 	.word	0x0800bacc
 8000da0:	0800baf0 	.word	0x0800baf0
 8000da4:	0800bb04 	.word	0x0800bb04

08000da8 <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80bb      	strh	r3, [r7, #4]
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbd5 	bl	8000574 <WIZCHIP_READ>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d052      	beq.n	8000e76 <loopback_udps+0xce>
 8000dd0:	2b22      	cmp	r3, #34	; 0x22
 8000dd2:	d165      	bne.n	8000ea0 <loopback_udps+0xf8>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd71 	bl	80008be <getSn_RX_RSR>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	82fb      	strh	r3, [r7, #22]
 8000de0:	8afb      	ldrh	r3, [r7, #22]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d05e      	beq.n	8000ea4 <loopback_udps+0xfc>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8000de6:	8afb      	ldrh	r3, [r7, #22]
 8000de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dec:	d902      	bls.n	8000df4 <loopback_udps+0x4c>
 8000dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df2:	82fb      	strh	r3, [r7, #22]
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 8000df4:	f107 010c 	add.w	r1, r7, #12
 8000df8:	8afa      	ldrh	r2, [r7, #22]
 8000dfa:	79f8      	ldrb	r0, [r7, #7]
 8000dfc:	f107 030a 	add.w	r3, r7, #10
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	460b      	mov	r3, r1
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	f001 f8db 	bl	8001fc0 <recvfrom>
 8000e0a:	6138      	str	r0, [r7, #16]
            if(ret <= 0)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	dc07      	bgt.n	8000e22 <loopback_udps+0x7a>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <loopback_udps+0x108>)
 8000e1a:	f009 ff27 	bl	800ac6c <iprintf>
#endif
               return ret;
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	e042      	b.n	8000ea8 <loopback_udps+0x100>
            }
            size = (uint16_t) ret;
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	82fb      	strh	r3, [r7, #22]
            sentsize = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8000e2a:	e01f      	b.n	8000e6c <loopback_udps+0xc4>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 8000e2c:	8abb      	ldrh	r3, [r7, #20]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	18d1      	adds	r1, r2, r3
 8000e32:	8afa      	ldrh	r2, [r7, #22]
 8000e34:	8abb      	ldrh	r3, [r7, #20]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	897b      	ldrh	r3, [r7, #10]
 8000e3c:	f107 040c 	add.w	r4, r7, #12
 8000e40:	79f8      	ldrb	r0, [r7, #7]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4623      	mov	r3, r4
 8000e46:	f000 ff85 	bl	8001d54 <sendto>
 8000e4a:	6138      	str	r0, [r7, #16]
               if(ret < 0)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da07      	bge.n	8000e62 <loopback_udps+0xba>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <loopback_udps+0x10c>)
 8000e5a:	f009 ff07 	bl	800ac6c <iprintf>
#endif
                  return ret;
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	e022      	b.n	8000ea8 <loopback_udps+0x100>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	8abb      	ldrh	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8000e6c:	8aba      	ldrh	r2, [r7, #20]
 8000e6e:	8afb      	ldrh	r3, [r7, #22]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d1db      	bne.n	8000e2c <loopback_udps+0x84>
            }
         }
         break;
 8000e74:	e016      	b.n	8000ea4 <loopback_udps+0xfc>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 8000e76:	88ba      	ldrh	r2, [r7, #4]
 8000e78:	79f8      	ldrb	r0, [r7, #7]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	f000 fb65 	bl	800154c <socket>
 8000e82:	4603      	mov	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d001      	beq.n	8000e92 <loopback_udps+0xea>
            return ret;
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	e00a      	b.n	8000ea8 <loopback_udps+0x100>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	88ba      	ldrh	r2, [r7, #4]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <loopback_udps+0x110>)
 8000e9a:	f009 fee7 	bl	800ac6c <iprintf>
#endif
         break;
 8000e9e:	e002      	b.n	8000ea6 <loopback_udps+0xfe>
      default :
         break;
 8000ea0:	bf00      	nop
 8000ea2:	e000      	b.n	8000ea6 <loopback_udps+0xfe>
         break;
 8000ea4:	bf00      	nop
   }
   return 1;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	0800bb84 	.word	0x0800bb84
 8000eb4:	0800bba0 	.word	0x0800bba0
 8000eb8:	0800bbb8 	.word	0x0800bbb8

08000ebc <network_init>:
uint8_t wizchip_read();

void network_init(void);

void network_init(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af04      	add	r7, sp, #16
   uint8_t tmpstr[6];
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000ec2:	4939      	ldr	r1, [pc, #228]	; (8000fa8 <network_init+0xec>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f001 fe0b 	bl	8002ae0 <ctlnetwork>
	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8000eca:	4937      	ldr	r1, [pc, #220]	; (8000fa8 <network_init+0xec>)
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f001 fe07 	bl	8002ae0 <ctlnetwork>

	// Display Network Information
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2008      	movs	r0, #8
 8000ed8:	f001 fd20 	bl	800291c <ctlwizchip>
	printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4832      	ldr	r0, [pc, #200]	; (8000fac <network_init+0xf0>)
 8000ee2:	f009 fec3 	bl	800ac6c <iprintf>
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <network_init+0xec>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <network_init+0xec>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	461c      	mov	r4, r3
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <network_init+0xec>)
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	461d      	mov	r5, r3
		  gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <network_init+0xec>)
 8000efa:	78db      	ldrb	r3, [r3, #3]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],
 8000efc:	461a      	mov	r2, r3
		  gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <network_init+0xec>)
 8000f00:	791b      	ldrb	r3, [r3, #4]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],
 8000f02:	4619      	mov	r1, r3
		  gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <network_init+0xec>)
 8000f06:	795b      	ldrb	r3, [r3, #5]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	9101      	str	r1, [sp, #4]
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	462b      	mov	r3, r5
 8000f10:	4622      	mov	r2, r4
 8000f12:	4601      	mov	r1, r0
 8000f14:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <network_init+0xf4>)
 8000f16:	f009 fea9 	bl	800ac6c <iprintf>
	printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <network_init+0xec>)
 8000f1c:	799b      	ldrb	r3, [r3, #6]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <network_init+0xec>)
 8000f22:	79db      	ldrb	r3, [r3, #7]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <network_init+0xec>)
 8000f28:	7a1b      	ldrb	r3, [r3, #8]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <network_init+0xec>)
 8000f2e:	7a5b      	ldrb	r3, [r3, #9]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	4603      	mov	r3, r0
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <network_init+0xf8>)
 8000f36:	f009 fe99 	bl	800ac6c <iprintf>
	printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <network_init+0xec>)
 8000f3c:	7b9b      	ldrb	r3, [r3, #14]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <network_init+0xec>)
 8000f42:	7bdb      	ldrb	r3, [r3, #15]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <network_init+0xec>)
 8000f48:	7c1b      	ldrb	r3, [r3, #16]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <network_init+0xec>)
 8000f4e:	7c5b      	ldrb	r3, [r3, #17]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <network_init+0xfc>)
 8000f56:	f009 fe89 	bl	800ac6c <iprintf>
	printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <network_init+0xec>)
 8000f5c:	7a9b      	ldrb	r3, [r3, #10]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <network_init+0xec>)
 8000f62:	7adb      	ldrb	r3, [r3, #11]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <network_init+0xec>)
 8000f68:	7b1b      	ldrb	r3, [r3, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <network_init+0xec>)
 8000f6e:	7b5b      	ldrb	r3, [r3, #13]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4603      	mov	r3, r0
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <network_init+0x100>)
 8000f76:	f009 fe79 	bl	800ac6c <iprintf>
	printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <network_init+0xec>)
 8000f7c:	7c9b      	ldrb	r3, [r3, #18]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <network_init+0xec>)
 8000f82:	7cdb      	ldrb	r3, [r3, #19]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <network_init+0xec>)
 8000f88:	7d1b      	ldrb	r3, [r3, #20]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <network_init+0xec>)
 8000f8e:	7d5b      	ldrb	r3, [r3, #21]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4603      	mov	r3, r0
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <network_init+0x104>)
 8000f96:	f009 fe69 	bl	800ac6c <iprintf>
	printf("======================\r\n");
 8000f9a:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <network_init+0x108>)
 8000f9c:	f009 feec 	bl	800ad78 <puts>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	0800bbe0 	.word	0x0800bbe0
 8000fb0:	0800bbf8 	.word	0x0800bbf8
 8000fb4:	0800bc20 	.word	0x0800bc20
 8000fb8:	0800bc34 	.word	0x0800bc34
 8000fbc:	0800bc48 	.word	0x0800bc48
 8000fc0:	0800bc5c 	.word	0x0800bc5c
 8000fc4:	0800bc70 	.word	0x0800bc70

08000fc8 <wizchip_select>:

void  wizchip_select(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	//USING PIN PC5 for select!
	HAL_GPIO_WritePin(EthSpiSelect_GPIO_Port, EthSpiSelect_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2120      	movs	r1, #32
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <wizchip_select+0x14>)
 8000fd2:	f002 fcd9 	bl	8003988 <HAL_GPIO_WritePin>
   //xGPIOPinWrite( xGPIO_PORTA_BASE, xGPIO_PIN_4, 0);
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EthSpiSelect_GPIO_Port, EthSpiSelect_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <wizchip_deselect+0x14>)
 8000fea:	f002 fccd 	bl	8003988 <HAL_GPIO_WritePin>
   //xGPIOPinWrite( xGPIO_PORTA_BASE, xGPIO_PIN_4, 1);
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &wb, 1, 100); //100 = timeout
 8001002:	1df9      	adds	r1, r7, #7
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	2201      	movs	r2, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <wizchip_write+0x20>)
 800100a:	f005 fd12 	bl	8006a32 <HAL_SPI_Transmit>
   //TODO xSPISingleDataReadWrite(WIZCHIP_SPI_BASE,wb);
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000190 	.word	0x20000190

0800101c <wizchip_read>:

uint8_t wizchip_read()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8001026:	1df9      	adds	r1, r7, #7
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <wizchip_read+0x20>)
 800102e:	f005 fe3c 	bl	8006caa <HAL_SPI_Receive>
	return data;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000190 	.word	0x20000190

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f002 f95b 	bl	8003300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f86b 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f967 	bl	8001320 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001052:	f000 f8d1 	bl	80011f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001056:	f000 f8fd 	bl	8001254 <MX_I2S3_Init>
  MX_SPI1_Init();
 800105a:	f000 f92b 	bl	80012b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800105e:	f009 f9db 	bl	800a418 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <main+0xc0>)
 8001064:	1d3c      	adds	r4, r7, #4
 8001066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t tmp;
  int32_t ret = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  // CS pin should default high
  wizchip_deselect();
 8001070:	f7ff ffb6 	bl	8000fe0 <wizchip_deselect>
	 /* Critical section callback - No use in this example */
	 //reg_wizchip_cris_cbfunc(0, 0);

	 /* Chip selection call back */
	#if   _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_
	  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001074:	4923      	ldr	r1, [pc, #140]	; (8001104 <main+0xc4>)
 8001076:	4824      	ldr	r0, [pc, #144]	; (8001108 <main+0xc8>)
 8001078:	f001 fbfe 	bl	8002878 <reg_wizchip_cs_cbfunc>
	 #else
		reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
	 #endif
	#endif
	  /* SPI Read & Write callback function */
	  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800107c:	4923      	ldr	r1, [pc, #140]	; (800110c <main+0xcc>)
 800107e:	4824      	ldr	r0, [pc, #144]	; (8001110 <main+0xd0>)
 8001080:	f001 fc20 	bl	80028c4 <reg_wizchip_spi_cbfunc>
	  /////////////////////////////////////////////


	  /* wizchip initialize*/
	  if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	2001      	movs	r0, #1
 800108a:	f001 fc47 	bl	800291c <ctlwizchip>
 800108e:	4603      	mov	r3, r0
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d103      	bne.n	800109e <main+0x5e>
	  {
		 printf("WIZCHIP Initialized fail.\r\n");
 8001096:	481f      	ldr	r0, [pc, #124]	; (8001114 <main+0xd4>)
 8001098:	f009 fe6e 	bl	800ad78 <puts>
		 while(1);
 800109c:	e7fe      	b.n	800109c <main+0x5c>
	  }

	  /* PHY link status check */
	  do
	  {
		 if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 800109e:	1cfb      	adds	r3, r7, #3
 80010a0:	4619      	mov	r1, r3
 80010a2:	200f      	movs	r0, #15
 80010a4:	f001 fc3a 	bl	800291c <ctlwizchip>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ae:	d102      	bne.n	80010b6 <main+0x76>
			printf("Unknown PHY Link stauts.\r\n");
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <main+0xd8>)
 80010b2:	f009 fe61 	bl	800ad78 <puts>
	  }while(tmp == PHY_LINK_OFF);
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <main+0x5e>

	  /* Network initialization */
	  network_init();
 80010bc:	f7ff fefe 	bl	8000ebc <network_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010c0:	f009 f9d0 	bl	800a464 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    /* Loopback Test */
	// TCP server loopback test
	if( (ret = loopback_tcps(SOCK_TCPS, gDATABUF, 5000)) < 0) {
 80010c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c8:	4914      	ldr	r1, [pc, #80]	; (800111c <main+0xdc>)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fd42 	bl	8000b54 <loopback_tcps>
 80010d0:	6178      	str	r0, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	da03      	bge.n	80010e0 <main+0xa0>
		printf("SOCKET ERROR : %ld\r\n", ret);
 80010d8:	6979      	ldr	r1, [r7, #20]
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <main+0xe0>)
 80010dc:	f009 fdc6 	bl	800ac6c <iprintf>
	}

	// UDP server loopback test
	if( (ret = loopback_udps(SOCK_UDPS, gDATABUF, 3000)) < 0) {
 80010e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <main+0xdc>)
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fe5e 	bl	8000da8 <loopback_udps>
 80010ec:	6178      	str	r0, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	dae5      	bge.n	80010c0 <main+0x80>
		printf("SOCKET ERROR : %ld\r\n", ret);
 80010f4:	6979      	ldr	r1, [r7, #20]
 80010f6:	480a      	ldr	r0, [pc, #40]	; (8001120 <main+0xe0>)
 80010f8:	f009 fdb8 	bl	800ac6c <iprintf>
    MX_USB_HOST_Process();
 80010fc:	e7e0      	b.n	80010c0 <main+0x80>
 80010fe:	bf00      	nop
 8001100:	0800bcd8 	.word	0x0800bcd8
 8001104:	08000fe1 	.word	0x08000fe1
 8001108:	08000fc9 	.word	0x08000fc9
 800110c:	08000ff9 	.word	0x08000ff9
 8001110:	0800101d 	.word	0x0800101d
 8001114:	0800bc88 	.word	0x0800bc88
 8001118:	0800bca4 	.word	0x0800bca4
 800111c:	200001e8 	.word	0x200001e8
 8001120:	0800bcc0 	.word	0x0800bcc0

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f009 fcb2 	bl	800aa9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <SystemClock_Config+0xcc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <SystemClock_Config+0xcc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <SystemClock_Config+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <SystemClock_Config+0xd0>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001194:	2308      	movs	r3, #8
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001198:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800119c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a2:	2307      	movs	r3, #7
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fdf4 	bl	8005d98 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011b6:	f000 f9c3 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2105      	movs	r1, #5
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 f855 	bl	8006288 <HAL_RCC_ClockConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011e4:	f000 f9ac 	bl	8001540 <Error_Handler>
  }
}
 80011e8:	bf00      	nop
 80011ea:	3750      	adds	r7, #80	; 0x50
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f003 ffcb 	bl	80051d0 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 f97e 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000f4 	.word	0x200000f4
 800124c:	40005400 	.word	0x40005400
 8001250:	000186a0 	.word	0x000186a0

08001254 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_I2S3_Init+0x54>)
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <MX_I2S3_Init+0x58>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2S3_Init+0x54>)
 8001260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001264:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_I2S3_Init+0x54>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2S3_Init+0x54>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_I2S3_Init+0x54>)
 8001274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001278:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MX_I2S3_Init+0x54>)
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <MX_I2S3_Init+0x5c>)
 800127e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2S3_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MX_I2S3_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2S3_Init+0x54>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_I2S3_Init+0x54>)
 8001294:	f004 f8e0 	bl	8005458 <HAL_I2S_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800129e:	f000 f94f 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000148 	.word	0x20000148
 80012ac:	40003c00 	.word	0x40003c00
 80012b0:	00017700 	.word	0x00017700

080012b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_SPI1_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI1_Init+0x64>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI1_Init+0x64>)
 80012e8:	2228      	movs	r2, #40	; 0x28
 80012ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI1_Init+0x64>)
 8001300:	220a      	movs	r2, #10
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_SPI1_Init+0x64>)
 8001306:	f005 fb0b 	bl	8006920 <HAL_SPI_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 f916 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000190 	.word	0x20000190
 800131c:	40013000 	.word	0x40013000

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	4b7b      	ldr	r3, [pc, #492]	; (8001528 <MX_GPIO_Init+0x208>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a7a      	ldr	r2, [pc, #488]	; (8001528 <MX_GPIO_Init+0x208>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b78      	ldr	r3, [pc, #480]	; (8001528 <MX_GPIO_Init+0x208>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	4b74      	ldr	r3, [pc, #464]	; (8001528 <MX_GPIO_Init+0x208>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a73      	ldr	r2, [pc, #460]	; (8001528 <MX_GPIO_Init+0x208>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b71      	ldr	r3, [pc, #452]	; (8001528 <MX_GPIO_Init+0x208>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <MX_GPIO_Init+0x208>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <MX_GPIO_Init+0x208>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b6a      	ldr	r3, [pc, #424]	; (8001528 <MX_GPIO_Init+0x208>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <MX_GPIO_Init+0x208>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a65      	ldr	r2, [pc, #404]	; (8001528 <MX_GPIO_Init+0x208>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <MX_GPIO_Init+0x208>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <MX_GPIO_Init+0x208>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <MX_GPIO_Init+0x208>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <MX_GPIO_Init+0x208>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b58      	ldr	r3, [pc, #352]	; (8001528 <MX_GPIO_Init+0x208>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a57      	ldr	r2, [pc, #348]	; (8001528 <MX_GPIO_Init+0x208>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b55      	ldr	r3, [pc, #340]	; (8001528 <MX_GPIO_Init+0x208>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2108      	movs	r1, #8
 80013e2:	4852      	ldr	r0, [pc, #328]	; (800152c <MX_GPIO_Init+0x20c>)
 80013e4:	f002 fad0 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2101      	movs	r1, #1
 80013ec:	4850      	ldr	r0, [pc, #320]	; (8001530 <MX_GPIO_Init+0x210>)
 80013ee:	f002 facb 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EthSpiSelect_GPIO_Port, EthSpiSelect_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	484e      	ldr	r0, [pc, #312]	; (8001530 <MX_GPIO_Init+0x210>)
 80013f8:	f002 fac6 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013fc:	2200      	movs	r2, #0
 80013fe:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001402:	484c      	ldr	r0, [pc, #304]	; (8001534 <MX_GPIO_Init+0x214>)
 8001404:	f002 fac0 	bl	8003988 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001408:	2308      	movs	r3, #8
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4843      	ldr	r0, [pc, #268]	; (800152c <MX_GPIO_Init+0x20c>)
 8001420:	f002 f916 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	483d      	ldr	r0, [pc, #244]	; (8001530 <MX_GPIO_Init+0x210>)
 800143c:	f002 f908 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001440:	2308      	movs	r3, #8
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001450:	2305      	movs	r3, #5
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4835      	ldr	r0, [pc, #212]	; (8001530 <MX_GPIO_Init+0x210>)
 800145c:	f002 f8f8 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001464:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4830      	ldr	r0, [pc, #192]	; (8001538 <MX_GPIO_Init+0x218>)
 8001476:	f002 f8eb 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : EthSpiSelect_Pin */
  GPIO_InitStruct.Pin = EthSpiSelect_Pin;
 800147a:	2320      	movs	r3, #32
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EthSpiSelect_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4827      	ldr	r0, [pc, #156]	; (8001530 <MX_GPIO_Init+0x210>)
 8001492:	f002 f8dd 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001496:	2304      	movs	r3, #4
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4824      	ldr	r0, [pc, #144]	; (800153c <MX_GPIO_Init+0x21c>)
 80014aa:	f002 f8d1 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c0:	2305      	movs	r3, #5
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <MX_GPIO_Init+0x21c>)
 80014cc:	f002 f8c0 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014d0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80014d4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4812      	ldr	r0, [pc, #72]	; (8001534 <MX_GPIO_Init+0x214>)
 80014ea:	f002 f8b1 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014ee:	2320      	movs	r3, #32
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0x214>)
 8001502:	f002 f8a5 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800150a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_GPIO_Init+0x20c>)
 800151c:	f002 f898 	bl	8003650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40021000 	.word	0x40021000
 8001530:	40020800 	.word	0x40020800
 8001534:	40020c00 	.word	0x40020c00
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4604      	mov	r4, r0
 8001554:	4608      	mov	r0, r1
 8001556:	4611      	mov	r1, r2
 8001558:	461a      	mov	r2, r3
 800155a:	4623      	mov	r3, r4
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	4603      	mov	r3, r0
 8001560:	71bb      	strb	r3, [r7, #6]
 8001562:	460b      	mov	r3, r1
 8001564:	80bb      	strh	r3, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b08      	cmp	r3, #8
 800156e:	d902      	bls.n	8001576 <socket+0x2a>
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e0f2      	b.n	800175c <socket+0x210>
	switch(protocol)
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <socket+0x3c>
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd11      	ble.n	80015a4 <socket+0x58>
 8001580:	3b02      	subs	r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d80e      	bhi.n	80015a4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001586:	e011      	b.n	80015ac <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2204      	movs	r2, #4
 800158e:	4619      	mov	r1, r3
 8001590:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001594:	f7ff f888 	bl	80006a8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <socket+0x5e>
 800159e:	f06f 0302 	mvn.w	r3, #2
 80015a2:	e0db      	b.n	800175c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80015a4:	f06f 0304 	mvn.w	r3, #4
 80015a8:	e0d8      	b.n	800175c <socket+0x210>
	    break;
 80015aa:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <socket+0x70>
 80015b6:	f06f 0305 	mvn.w	r3, #5
 80015ba:	e0cf      	b.n	800175c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d025      	beq.n	800160e <socket+0xc2>
	{
   	switch(protocol)
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d002      	beq.n	80015ce <socket+0x82>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d008      	beq.n	80015de <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80015cc:	e024      	b.n	8001618 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11c      	bne.n	8001612 <socket+0xc6>
 80015d8:	f06f 0305 	mvn.w	r3, #5
 80015dc:	e0be      	b.n	800175c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80015e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db02      	blt.n	80015f6 <socket+0xaa>
 80015f0:	f06f 0305 	mvn.w	r3, #5
 80015f4:	e0b2      	b.n	800175c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00a      	beq.n	8001616 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db06      	blt.n	8001616 <socket+0xca>
 8001608:	f06f 0305 	mvn.w	r3, #5
 800160c:	e0a6      	b.n	800175c <socket+0x210>
   	}
   }
 800160e:	bf00      	nop
 8001610:	e002      	b.n	8001618 <socket+0xcc>
   	      break;
 8001612:	bf00      	nop
 8001614:	e000      	b.n	8001618 <socket+0xcc>
   	      break;
 8001616:	bf00      	nop
	close(sn);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f8ac 	bl	8001778 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3301      	adds	r3, #1
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4618      	mov	r0, r3
 800162a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800162e:	f023 030f 	bic.w	r3, r3, #15
 8001632:	b25a      	sxtb	r2, r3
 8001634:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001638:	4313      	orrs	r3, r2
 800163a:	b25b      	sxtb	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	f7fe ffe4 	bl	800060c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d110      	bne.n	800166c <socket+0x120>
	{
	   port = sock_any_port++;
 800164a:	4b46      	ldr	r3, [pc, #280]	; (8001764 <socket+0x218>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	b291      	uxth	r1, r2
 8001652:	4a44      	ldr	r2, [pc, #272]	; (8001764 <socket+0x218>)
 8001654:	8011      	strh	r1, [r2, #0]
 8001656:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <socket+0x218>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001660:	4293      	cmp	r3, r2
 8001662:	d103      	bne.n	800166c <socket+0x120>
 8001664:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <socket+0x218>)
 8001666:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800166a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	3301      	adds	r3, #1
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001678:	461a      	mov	r2, r3
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f7fe ffc1 	bl	800060c <WIZCHIP_WRITE>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	3301      	adds	r3, #1
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001696:	461a      	mov	r2, r3
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f7fe ffb4 	bl	800060c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	3301      	adds	r3, #1
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ffaa 	bl	800060c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80016b8:	bf00      	nop
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3301      	adds	r3, #1
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff54 	bl	8000574 <WIZCHIP_READ>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f3      	bne.n	80016ba <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2201      	movs	r2, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	b21b      	sxth	r3, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <socket+0x21c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4013      	ands	r3, r2
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <socket+0x21c>)
 80016ee:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <socket+0x21c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <socket+0x21c>)
 800170c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2201      	movs	r2, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	b21b      	sxth	r3, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <socket+0x220>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4013      	ands	r3, r2
 8001724:	b21b      	sxth	r3, r3
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <socket+0x220>)
 800172a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <socket+0x224>)
 8001730:	2100      	movs	r1, #0
 8001732:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <socket+0x228>)
 800173a:	2100      	movs	r1, #0
 800173c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800173e:	bf00      	nop
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	3301      	adds	r3, #1
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff11 	bl	8000574 <WIZCHIP_READ>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f3      	beq.n	8001740 <socket+0x1f4>
   return (int8_t)sn;
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	20000018 	.word	0x20000018
 8001768:	200009e8 	.word	0x200009e8
 800176c:	200009ea 	.word	0x200009ea
 8001770:	200009ec 	.word	0x200009ec
 8001774:	200009fc 	.word	0x200009fc

08001778 <close>:

int8_t close(uint8_t sn)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d902      	bls.n	800178e <close+0x16>
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	e055      	b.n	800183a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	3301      	adds	r3, #1
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800179a:	2110      	movs	r1, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe ff35 	bl	800060c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80017a2:	bf00      	nop
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	3301      	adds	r3, #1
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fedf 	bl	8000574 <WIZCHIP_READ>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f3      	bne.n	80017a4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	3301      	adds	r3, #1
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017c8:	211f      	movs	r1, #31
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe ff1e 	bl	800060c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2201      	movs	r2, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	b21b      	sxth	r3, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <close+0xcc>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4013      	ands	r3, r2
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <close+0xcc>)
 80017ec:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2201      	movs	r2, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <close+0xd0>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b21b      	sxth	r3, r3
 8001802:	4013      	ands	r3, r2
 8001804:	b21b      	sxth	r3, r3
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <close+0xd0>)
 800180a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <close+0xd4>)
 8001810:	2100      	movs	r1, #0
 8001812:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <close+0xd8>)
 800181a:	2100      	movs	r1, #0
 800181c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800181e:	bf00      	nop
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	3301      	adds	r3, #1
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fea1 	bl	8000574 <WIZCHIP_READ>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f3      	bne.n	8001820 <close+0xa8>
	return SOCK_OK;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200009e8 	.word	0x200009e8
 8001848:	200009ea 	.word	0x200009ea
 800184c:	200009ec 	.word	0x200009ec
 8001850:	200009fc 	.word	0x200009fc

08001854 <listen>:

int8_t listen(uint8_t sn)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d902      	bls.n	800186a <listen+0x16>
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	e049      	b.n	80018fe <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	3301      	adds	r3, #1
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe7e 	bl	8000574 <WIZCHIP_READ>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <listen+0x34>
 8001882:	f06f 0304 	mvn.w	r3, #4
 8001886:	e03a      	b.n	80018fe <listen+0xaa>
	CHECK_SOCKINIT();
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3301      	adds	r3, #1
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe6d 	bl	8000574 <WIZCHIP_READ>
 800189a:	4603      	mov	r3, r0
 800189c:	2b13      	cmp	r3, #19
 800189e:	d002      	beq.n	80018a6 <listen+0x52>
 80018a0:	f06f 0302 	mvn.w	r3, #2
 80018a4:	e02b      	b.n	80018fe <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	3301      	adds	r3, #1
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018b2:	2102      	movs	r1, #2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fea9 	bl	800060c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80018ba:	bf00      	nop
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3301      	adds	r3, #1
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe53 	bl	8000574 <WIZCHIP_READ>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f3      	bne.n	80018bc <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80018d4:	e006      	b.n	80018e4 <listen+0x90>
   {
         close(sn);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff4d 	bl	8001778 <close>
         return SOCKERR_SOCKCLOSED;
 80018de:	f06f 0303 	mvn.w	r3, #3
 80018e2:	e00c      	b.n	80018fe <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	3301      	adds	r3, #1
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe3f 	bl	8000574 <WIZCHIP_READ>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b14      	cmp	r3, #20
 80018fa:	d1ec      	bne.n	80018d6 <listen+0x82>
   }
   return SOCK_OK;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d902      	bls.n	800191e <disconnect+0x16>
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	e062      	b.n	80019e4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3301      	adds	r3, #1
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe24 	bl	8000574 <WIZCHIP_READ>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	2b01      	cmp	r3, #1
 8001934:	d002      	beq.n	800193c <disconnect+0x34>
 8001936:	f06f 0304 	mvn.w	r3, #4
 800193a:	e053      	b.n	80019e4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	3301      	adds	r3, #1
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001948:	2108      	movs	r1, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe5e 	bl	800060c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001950:	bf00      	nop
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	3301      	adds	r3, #1
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe08 	bl	8000574 <WIZCHIP_READ>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f3      	bne.n	8001952 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2201      	movs	r2, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	b21a      	sxth	r2, r3
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <disconnect+0xe4>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b21b      	sxth	r3, r3
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <disconnect+0xe4>)
 8001986:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <disconnect+0xe8>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	fa42 f303 	asr.w	r3, r2, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d016      	beq.n	80019ca <disconnect+0xc2>
 800199c:	2300      	movs	r3, #0
 800199e:	e021      	b.n	80019e4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3301      	adds	r3, #1
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fde1 	bl	8000574 <WIZCHIP_READ>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <disconnect+0xc2>
	   {
	      close(sn);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff feda 	bl	8001778 <close>
	      return SOCKERR_TIMEOUT;
 80019c4:	f06f 030c 	mvn.w	r3, #12
 80019c8:	e00c      	b.n	80019e4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3301      	adds	r3, #1
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdcc 	bl	8000574 <WIZCHIP_READ>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1de      	bne.n	80019a0 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200009ea 	.word	0x200009ea
 80019f0:	200009e8 	.word	0x200009e8

080019f4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d902      	bls.n	8001a18 <send+0x24>
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e0de      	b.n	8001bd6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fda7 	bl	8000574 <WIZCHIP_READ>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d002      	beq.n	8001a36 <send+0x42>
 8001a30:	f06f 0304 	mvn.w	r3, #4
 8001a34:	e0cf      	b.n	8001bd6 <send+0x1e2>
   CHECK_SOCKDATA();
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <send+0x4e>
 8001a3c:	f06f 030d 	mvn.w	r3, #13
 8001a40:	e0c9      	b.n	8001bd6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	3301      	adds	r3, #1
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd90 	bl	8000574 <WIZCHIP_READ>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b17      	cmp	r3, #23
 8001a5c:	d005      	beq.n	8001a6a <send+0x76>
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b1c      	cmp	r3, #28
 8001a62:	d002      	beq.n	8001a6a <send+0x76>
 8001a64:	f06f 0306 	mvn.w	r3, #6
 8001a68:	e0b5      	b.n	8001bd6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001a6a:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <send+0x1ec>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	fa42 f303 	asr.w	r3, r2, r3
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d039      	beq.n	8001af2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3301      	adds	r3, #1
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd72 	bl	8000574 <WIZCHIP_READ>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fdab 	bl	800060c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <send+0x1ec>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4013      	ands	r3, r2
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <send+0x1ec>)
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	e00d      	b.n	8001af2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <send+0xfa>
      {
         close(sn);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fe48 	bl	8001778 <close>
         return SOCKERR_TIMEOUT;
 8001ae8:	f06f 030c 	mvn.w	r3, #12
 8001aec:	e073      	b.n	8001bd6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e071      	b.n	8001bd6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	3301      	adds	r3, #1
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd38 	bl	8000574 <WIZCHIP_READ>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001b0c:	88ba      	ldrh	r2, [r7, #4]
 8001b0e:	89bb      	ldrh	r3, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d901      	bls.n	8001b18 <send+0x124>
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fe84 	bl	8000828 <getSn_TX_FSR>
 8001b20:	4603      	mov	r3, r0
 8001b22:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	3301      	adds	r3, #1
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd1f 	bl	8000574 <WIZCHIP_READ>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b17      	cmp	r3, #23
 8001b3e:	d009      	beq.n	8001b54 <send+0x160>
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b1c      	cmp	r3, #28
 8001b44:	d006      	beq.n	8001b54 <send+0x160>
      {
         close(sn);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe15 	bl	8001778 <close>
         return SOCKERR_SOCKSTATUS;
 8001b4e:	f06f 0306 	mvn.w	r3, #6
 8001b52:	e040      	b.n	8001bd6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <send+0x1f0>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	fa42 f303 	asr.w	r3, r2, r3
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <send+0x180>
 8001b68:	88ba      	ldrh	r2, [r7, #4]
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d901      	bls.n	8001b74 <send+0x180>
 8001b70:	2300      	movs	r3, #0
 8001b72:	e030      	b.n	8001bd6 <send+0x1e2>
      if(len <= freesize) break;
 8001b74:	88ba      	ldrh	r2, [r7, #4]
 8001b76:	89bb      	ldrh	r3, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d900      	bls.n	8001b7e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001b7c:	e7cc      	b.n	8001b18 <send+0x124>
      if(len <= freesize) break;
 8001b7e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fee4 	bl	8000954 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	3301      	adds	r3, #1
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b98:	2120      	movs	r1, #32
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fd36 	bl	800060c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001ba0:	bf00      	nop
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fce0 	bl	8000574 <WIZCHIP_READ>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f3      	bne.n	8001ba2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <send+0x1ec>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <send+0x1ec>)
 8001bd2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200009ea 	.word	0x200009ea
 8001be4:	200009e8 	.word	0x200009e8

08001be8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d902      	bls.n	8001c0c <recv+0x24>
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e09c      	b.n	8001d46 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3301      	adds	r3, #1
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcad 	bl	8000574 <WIZCHIP_READ>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d002      	beq.n	8001c2a <recv+0x42>
 8001c24:	f06f 0304 	mvn.w	r3, #4
 8001c28:	e08d      	b.n	8001d46 <recv+0x15e>
   CHECK_SOCKDATA();
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <recv+0x4e>
 8001c30:	f06f 030d 	mvn.w	r3, #13
 8001c34:	e087      	b.n	8001d46 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc96 	bl	8000574 <WIZCHIP_READ>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001c50:	89ba      	ldrh	r2, [r7, #12]
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d201      	bcs.n	8001c5c <recv+0x74>
 8001c58:	89bb      	ldrh	r3, [r7, #12]
 8001c5a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fe2d 	bl	80008be <getSn_RX_RSR>
 8001c64:	4603      	mov	r3, r0
 8001c66:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc7d 	bl	8000574 <WIZCHIP_READ>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b17      	cmp	r3, #23
 8001c82:	d026      	beq.n	8001cd2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b1c      	cmp	r3, #28
 8001c88:	d11c      	bne.n	8001cc4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001c8a:	89bb      	ldrh	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d133      	bne.n	8001cf8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fdc8 	bl	8000828 <getSn_TX_FSR>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc63 	bl	8000574 <WIZCHIP_READ>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	429c      	cmp	r4, r3
 8001cb4:	d10d      	bne.n	8001cd2 <recv+0xea>
               {
                  close(sn);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fd5d 	bl	8001778 <close>
                  return SOCKERR_SOCKSTATUS;
 8001cbe:	f06f 0306 	mvn.w	r3, #6
 8001cc2:	e040      	b.n	8001d46 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fd56 	bl	8001778 <close>
               return SOCKERR_SOCKSTATUS;
 8001ccc:	f06f 0306 	mvn.w	r3, #6
 8001cd0:	e039      	b.n	8001d46 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <recv+0x168>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	fa42 f303 	asr.w	r3, r2, r3
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <recv+0x108>
 8001ce6:	89bb      	ldrh	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <recv+0x108>
 8001cec:	2300      	movs	r3, #0
 8001cee:	e02a      	b.n	8001d46 <recv+0x15e>
         if(recvsize != 0) break;
 8001cf0:	89bb      	ldrh	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8001cf6:	e7b1      	b.n	8001c5c <recv+0x74>
               if(recvsize != 0) break;
 8001cf8:	bf00      	nop
 8001cfa:	e000      	b.n	8001cfe <recv+0x116>
         if(recvsize != 0) break;
 8001cfc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001cfe:	89ba      	ldrh	r2, [r7, #12]
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d201      	bcs.n	8001d0a <recv+0x122>
 8001d06:	89bb      	ldrh	r3, [r7, #12]
 8001d08:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fe7b 	bl	8000a0c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fc71 	bl	800060c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d2a:	bf00      	nop
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	3301      	adds	r3, #1
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc1b 	bl	8000574 <WIZCHIP_READ>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f3      	bne.n	8001d2c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001d44:	88bb      	ldrh	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200009e8 	.word	0x200009e8

08001d54 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	4613      	mov	r3, r2
 8001d64:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d902      	bls.n	8001d7a <sendto+0x26>
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e11b      	b.n	8001fb2 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	3301      	adds	r3, #1
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbf6 	bl	8000574 <WIZCHIP_READ>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b02      	subs	r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d902      	bls.n	8001d9a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001d94:	f06f 0304 	mvn.w	r3, #4
 8001d98:	e10b      	b.n	8001fb2 <sendto+0x25e>
         break;
 8001d9a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001d9c:	89bb      	ldrh	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <sendto+0x54>
 8001da2:	f06f 030d 	mvn.w	r3, #13
 8001da6:	e104      	b.n	8001fb2 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	3201      	adds	r2, #1
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	3202      	adds	r2, #2
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	3203      	adds	r2, #3
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10e      	bne.n	8001dfc <sendto+0xa8>
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	3301      	adds	r3, #1
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbc4 	bl	8000574 <WIZCHIP_READ>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d002      	beq.n	8001dfc <sendto+0xa8>
 8001df6:	f06f 030b 	mvn.w	r3, #11
 8001dfa:	e0da      	b.n	8001fb2 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001dfc:	8c3b      	ldrh	r3, [r7, #32]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10e      	bne.n	8001e20 <sendto+0xcc>
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3301      	adds	r3, #1
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fbb2 	bl	8000574 <WIZCHIP_READ>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d002      	beq.n	8001e20 <sendto+0xcc>
 8001e1a:	f06f 030a 	mvn.w	r3, #10
 8001e1e:	e0c8      	b.n	8001fb2 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	3301      	adds	r3, #1
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fba1 	bl	8000574 <WIZCHIP_READ>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b42      	cmp	r3, #66	; 0x42
 8001e3a:	d008      	beq.n	8001e4e <sendto+0xfa>
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b22      	cmp	r3, #34	; 0x22
 8001e40:	d005      	beq.n	8001e4e <sendto+0xfa>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b32      	cmp	r3, #50	; 0x32
 8001e46:	d002      	beq.n	8001e4e <sendto+0xfa>
 8001e48:	f06f 0306 	mvn.w	r3, #6
 8001e4c:	e0b1      	b.n	8001fb2 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3301      	adds	r3, #1
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fc82 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3301      	adds	r3, #1
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	461a      	mov	r2, r3
 8001e72:	8c3b      	ldrh	r3, [r7, #32]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f7fe fbc5 	bl	800060c <WIZCHIP_WRITE>
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	3301      	adds	r3, #1
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e8e:	461a      	mov	r2, r3
 8001e90:	8c3b      	ldrh	r3, [r7, #32]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f7fe fbb8 	bl	800060c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb63 	bl	8000574 <WIZCHIP_READ>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001eb6:	89ba      	ldrh	r2, [r7, #12]
 8001eb8:	8abb      	ldrh	r3, [r7, #20]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d901      	bls.n	8001ec2 <sendto+0x16e>
 8001ebe:	8abb      	ldrh	r3, [r7, #20]
 8001ec0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fcaf 	bl	8000828 <getSn_TX_FSR>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb4a 	bl	8000574 <WIZCHIP_READ>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <sendto+0x198>
 8001ee6:	f06f 0303 	mvn.w	r3, #3
 8001eea:	e062      	b.n	8001fb2 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <sendto+0x268>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	fa42 f303 	asr.w	r3, r2, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <sendto+0x1b8>
 8001f00:	89ba      	ldrh	r2, [r7, #12]
 8001f02:	8abb      	ldrh	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d901      	bls.n	8001f0c <sendto+0x1b8>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e052      	b.n	8001fb2 <sendto+0x25e>
      if(len <= freesize) break;
 8001f0c:	89ba      	ldrh	r2, [r7, #12]
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d900      	bls.n	8001f16 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8001f14:	e7d5      	b.n	8001ec2 <sendto+0x16e>
      if(len <= freesize) break;
 8001f16:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001f18:	89ba      	ldrh	r2, [r7, #12]
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fd18 	bl	8000954 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	3301      	adds	r3, #1
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f30:	2120      	movs	r1, #32
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb6a 	bl	800060c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001f38:	bf00      	nop
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3301      	adds	r3, #1
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fb14 	bl	8000574 <WIZCHIP_READ>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f3      	bne.n	8001f3a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3301      	adds	r3, #1
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fb08 	bl	8000574 <WIZCHIP_READ>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f82:	2110      	movs	r1, #16
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fb41 	bl	800060c <WIZCHIP_WRITE>
         break;
 8001f8a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001f8c:	89bb      	ldrh	r3, [r7, #12]
 8001f8e:	e010      	b.n	8001fb2 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0db      	beq.n	8001f52 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fb2f 	bl	800060c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001fae:	f06f 030c 	mvn.w	r3, #12
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200009e8 	.word	0x200009e8

08001fc0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4603      	mov	r3, r0
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d902      	bls.n	8001fe2 <recvfrom+0x22>
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe0:	e1d4      	b.n	800238c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fac2 	bl	8000574 <WIZCHIP_READ>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	777b      	strb	r3, [r7, #29]
 8001ff4:	7f7b      	ldrb	r3, [r7, #29]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b02      	subs	r3, #2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d902      	bls.n	8002006 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002000:	f06f 0304 	mvn.w	r3, #4
 8002004:	e1c2      	b.n	800238c <recvfrom+0x3cc>
         break;
 8002006:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002008:	89bb      	ldrh	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <recvfrom+0x54>
 800200e:	f06f 030d 	mvn.w	r3, #13
 8002012:	e1bb      	b.n	800238c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	4a88      	ldr	r2, [pc, #544]	; (8002238 <recvfrom+0x278>)
 8002018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d128      	bne.n	8002072 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fc4b 	bl	80008be <getSn_RX_RSR>
 8002028:	4603      	mov	r3, r0
 800202a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	3301      	adds	r3, #1
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa9b 	bl	8000574 <WIZCHIP_READ>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <recvfrom+0x8a>
 8002044:	f06f 0303 	mvn.w	r3, #3
 8002048:	e1a0      	b.n	800238c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800204a:	4b7c      	ldr	r3, [pc, #496]	; (800223c <recvfrom+0x27c>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	fa42 f303 	asr.w	r3, r2, r3
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <recvfrom+0xa8>
 800205e:	8bfb      	ldrh	r3, [r7, #30]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <recvfrom+0xa8>
 8002064:	2300      	movs	r3, #0
 8002066:	e191      	b.n	800238c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8002068:	8bfb      	ldrh	r3, [r7, #30]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d100      	bne.n	8002070 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800206e:	e7d7      	b.n	8002020 <recvfrom+0x60>
         if(pack_len != 0) break;
 8002070:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002072:	7f7b      	ldrb	r3, [r7, #29]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	2b04      	cmp	r3, #4
 800207a:	d079      	beq.n	8002170 <recvfrom+0x1b0>
 800207c:	2b04      	cmp	r3, #4
 800207e:	f300 8142 	bgt.w	8002306 <recvfrom+0x346>
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <recvfrom+0xce>
 8002086:	2b03      	cmp	r3, #3
 8002088:	f000 80dc 	beq.w	8002244 <recvfrom+0x284>
 800208c:	e13b      	b.n	8002306 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	4a69      	ldr	r2, [pc, #420]	; (8002238 <recvfrom+0x278>)
 8002092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d152      	bne.n	8002140 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800209a:	f107 0114 	add.w	r1, r7, #20
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2208      	movs	r2, #8
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fcb2 	bl	8000a0c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3301      	adds	r3, #1
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020b4:	2140      	movs	r1, #64	; 0x40
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe faa8 	bl	800060c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80020bc:	bf00      	nop
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	3301      	adds	r3, #1
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa52 	bl	8000574 <WIZCHIP_READ>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f3      	bne.n	80020be <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80020d6:	7d3a      	ldrb	r2, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3301      	adds	r3, #1
 80020e0:	7d7a      	ldrb	r2, [r7, #21]
 80020e2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3302      	adds	r3, #2
 80020e8:	7dba      	ldrb	r2, [r7, #22]
 80020ea:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3303      	adds	r3, #3
 80020f0:	7dfa      	ldrb	r2, [r7, #23]
 80020f2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80020f4:	7e3b      	ldrb	r3, [r7, #24]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b29a      	uxth	r2, r3
 8002104:	7e7b      	ldrb	r3, [r7, #25]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b29a      	uxth	r2, r3
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002110:	7eba      	ldrb	r2, [r7, #26]
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	b291      	uxth	r1, r2
 8002116:	4a48      	ldr	r2, [pc, #288]	; (8002238 <recvfrom+0x278>)
 8002118:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	4a46      	ldr	r2, [pc, #280]	; (8002238 <recvfrom+0x278>)
 8002120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	b299      	uxth	r1, r3
 8002128:	7efb      	ldrb	r3, [r7, #27]
 800212a:	b29a      	uxth	r2, r3
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	440a      	add	r2, r1
 8002130:	b291      	uxth	r1, r2
 8002132:	4a41      	ldr	r2, [pc, #260]	; (8002238 <recvfrom+0x278>)
 8002134:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	4a41      	ldr	r2, [pc, #260]	; (8002240 <recvfrom+0x280>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	4a3d      	ldr	r2, [pc, #244]	; (8002238 <recvfrom+0x278>)
 8002144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002148:	89ba      	ldrh	r2, [r7, #12]
 800214a:	429a      	cmp	r2, r3
 800214c:	d202      	bcs.n	8002154 <recvfrom+0x194>
 800214e:	89bb      	ldrh	r3, [r7, #12]
 8002150:	83fb      	strh	r3, [r7, #30]
 8002152:	e004      	b.n	800215e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4a38      	ldr	r2, [pc, #224]	; (8002238 <recvfrom+0x278>)
 8002158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800215e:	8bfb      	ldrh	r3, [r7, #30]
 8002160:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002162:	8bfa      	ldrh	r2, [r7, #30]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fc4f 	bl	8000a0c <wiz_recv_data>
			break;
 800216e:	e0d6      	b.n	800231e <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	4a31      	ldr	r2, [pc, #196]	; (8002238 <recvfrom+0x278>)
 8002174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d146      	bne.n	800220a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800217c:	f107 0114 	add.w	r1, r7, #20
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2202      	movs	r2, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fc41 	bl	8000a0c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3301      	adds	r3, #1
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fa37 	bl	800060c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800219e:	bf00      	nop
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3301      	adds	r3, #1
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9e1 	bl	8000574 <WIZCHIP_READ>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f3      	bne.n	80021a0 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80021b8:	7d3a      	ldrb	r2, [r7, #20]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	b291      	uxth	r1, r2
 80021be:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <recvfrom+0x278>)
 80021c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <recvfrom+0x278>)
 80021c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	7d7b      	ldrb	r3, [r7, #21]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3a02      	subs	r2, #2
 80021dc:	b291      	uxth	r1, r2
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <recvfrom+0x278>)
 80021e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4a14      	ldr	r2, [pc, #80]	; (8002238 <recvfrom+0x278>)
 80021e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ec:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d906      	bls.n	8002202 <recvfrom+0x242>
   			{
   			   close(sn);
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fabe 	bl	8001778 <close>
   			   return SOCKFATAL_PACKLEN;
 80021fc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002200:	e0c4      	b.n	800238c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <recvfrom+0x280>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <recvfrom+0x278>)
 800220e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002212:	89ba      	ldrh	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d202      	bcs.n	800221e <recvfrom+0x25e>
 8002218:	89bb      	ldrh	r3, [r7, #12]
 800221a:	83fb      	strh	r3, [r7, #30]
 800221c:	e004      	b.n	8002228 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <recvfrom+0x278>)
 8002222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002226:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002228:	8bfa      	ldrh	r2, [r7, #30]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fbec 	bl	8000a0c <wiz_recv_data>
		   break;
 8002234:	e073      	b.n	800231e <recvfrom+0x35e>
 8002236:	bf00      	nop
 8002238:	200009ec 	.word	0x200009ec
 800223c:	200009e8 	.word	0x200009e8
 8002240:	200009fc 	.word	0x200009fc
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4a53      	ldr	r2, [pc, #332]	; (8002394 <recvfrom+0x3d4>)
 8002248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d144      	bne.n	80022da <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8002250:	f107 0114 	add.w	r1, r7, #20
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2206      	movs	r2, #6
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fbd7 	bl	8000a0c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3301      	adds	r3, #1
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f9cd 	bl	800060c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002272:	bf00      	nop
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3301      	adds	r3, #1
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f977 	bl	8000574 <WIZCHIP_READ>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f3      	bne.n	8002274 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800228c:	7d3a      	ldrb	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3301      	adds	r3, #1
 8002296:	7d7a      	ldrb	r2, [r7, #21]
 8002298:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3302      	adds	r3, #2
 800229e:	7dba      	ldrb	r2, [r7, #22]
 80022a0:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3303      	adds	r3, #3
 80022a6:	7dfa      	ldrb	r2, [r7, #23]
 80022a8:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80022aa:	7e3a      	ldrb	r2, [r7, #24]
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	b291      	uxth	r1, r2
 80022b0:	4a38      	ldr	r2, [pc, #224]	; (8002394 <recvfrom+0x3d4>)
 80022b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4a36      	ldr	r2, [pc, #216]	; (8002394 <recvfrom+0x3d4>)
 80022ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	b299      	uxth	r1, r3
 80022c2:	7e7b      	ldrb	r3, [r7, #25]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	440a      	add	r2, r1
 80022ca:	b291      	uxth	r1, r2
 80022cc:	4a31      	ldr	r2, [pc, #196]	; (8002394 <recvfrom+0x3d4>)
 80022ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <recvfrom+0x3d8>)
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <recvfrom+0x3d4>)
 80022de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e2:	89ba      	ldrh	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d202      	bcs.n	80022ee <recvfrom+0x32e>
 80022e8:	89bb      	ldrh	r3, [r7, #12]
 80022ea:	83fb      	strh	r3, [r7, #30]
 80022ec:	e004      	b.n	80022f8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <recvfrom+0x3d4>)
 80022f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80022f8:	8bfa      	ldrh	r2, [r7, #30]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fb84 	bl	8000a0c <wiz_recv_data>
			break;
 8002304:	e00b      	b.n	800231e <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8002306:	8bfa      	ldrh	r2, [r7, #30]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fbd9 	bl	8000ac4 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	491f      	ldr	r1, [pc, #124]	; (8002394 <recvfrom+0x3d4>)
 8002316:	8bfa      	ldrh	r2, [r7, #30]
 8002318:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 800231c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	3301      	adds	r3, #1
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f96d 	bl	800060c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002332:	bf00      	nop
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	3301      	adds	r3, #1
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f917 	bl	8000574 <WIZCHIP_READ>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f3      	bne.n	8002334 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <recvfrom+0x3d4>)
 8002350:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	8bfa      	ldrh	r2, [r7, #30]
 8002358:	1a8a      	subs	r2, r1, r2
 800235a:	b291      	uxth	r1, r2
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <recvfrom+0x3d4>)
 800235e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <recvfrom+0x3d4>)
 8002366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <recvfrom+0x3d8>)
 8002372:	5cd2      	ldrb	r2, [r2, r3]
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	b2d1      	uxtb	r1, r2
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <recvfrom+0x3d8>)
 800237e:	54d1      	strb	r1, [r2, r3]
 8002380:	e003      	b.n	800238a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <recvfrom+0x3d8>)
 8002386:	2100      	movs	r1, #0
 8002388:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800238a:	8bfb      	ldrh	r3, [r7, #30]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200009ec 	.word	0x200009ec
 8002398:	200009fc 	.word	0x200009fc

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_MspInit+0x4c>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <HAL_MspInit+0x4c>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023da:	2007      	movs	r0, #7
 80023dc:	f001 f8f6 	bl	80035cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_I2C_MspInit+0x84>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12c      	bne.n	8002468 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_I2C_MspInit+0x88>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_I2C_MspInit+0x88>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_I2C_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800242a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002430:	2312      	movs	r3, #18
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002434:	2301      	movs	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800243c:	2304      	movs	r3, #4
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	480c      	ldr	r0, [pc, #48]	; (8002478 <HAL_I2C_MspInit+0x8c>)
 8002448:	f001 f902 	bl	8003650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_I2C_MspInit+0x88>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_I2C_MspInit+0x88>)
 8002456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_I2C_MspInit+0x88>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40005400 	.word	0x40005400
 8002474:	40023800 	.word	0x40023800
 8002478:	40020400 	.word	0x40020400

0800247c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a31      	ldr	r2, [pc, #196]	; (800256c <HAL_I2S_MspInit+0xf0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d15a      	bne.n	8002562 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80024ac:	2301      	movs	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 f8ef 	bl	80066a0 <HAL_RCCEx_PeriphCLKConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80024c8:	f7ff f83a 	bl	8001540 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6313      	str	r3, [r2, #48]	; 0x30
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6313      	str	r3, [r2, #48]	; 0x30
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_I2S_MspInit+0xf4>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002520:	2310      	movs	r3, #16
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002530:	2306      	movs	r3, #6
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	4619      	mov	r1, r3
 800253a:	480e      	ldr	r0, [pc, #56]	; (8002574 <HAL_I2S_MspInit+0xf8>)
 800253c:	f001 f888 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002540:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002552:	2306      	movs	r3, #6
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255a:	4619      	mov	r1, r3
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <HAL_I2S_MspInit+0xfc>)
 800255e:	f001 f877 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3738      	adds	r7, #56	; 0x38
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40003c00 	.word	0x40003c00
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020800 	.word	0x40020800

0800257c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_SPI_MspInit+0x84>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12b      	bne.n	80025f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_SPI_MspInit+0x88>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_SPI_MspInit+0x88>)
 80025a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_SPI_MspInit+0x88>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_SPI_MspInit+0x88>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_SPI_MspInit+0x88>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_SPI_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80025d6:	23e0      	movs	r3, #224	; 0xe0
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025e6:	2305      	movs	r3, #5
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_SPI_MspInit+0x8c>)
 80025f2:	f001 f82d 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40013000 	.word	0x40013000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <NMI_Handler+0x4>

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <MemManage_Handler+0x4>

0800261e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler+0x4>

0800262a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002658:	f000 fea4 	bl	80033a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <OTG_FS_IRQHandler+0x10>)
 8002666:	f001 fc13 	bl	8003e90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000df0 	.word	0x20000df0

08002674 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	e00a      	b.n	800269c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002686:	f3af 8000 	nop.w
 800268a:	4601      	mov	r1, r0
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60ba      	str	r2, [r7, #8]
 8002692:	b2ca      	uxtb	r2, r1
 8002694:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbf0      	blt.n	8002686 <_read+0x12>
  }

  return len;
 80026a4:	687b      	ldr	r3, [r7, #4]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e009      	b.n	80026d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf1      	blt.n	80026c0 <_write+0x12>
  }
  return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_close>:

int _close(int file)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800270e:	605a      	str	r2, [r3, #4]
  return 0;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_isatty>:

int _isatty(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <_sbrk+0x5c>)
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <_sbrk+0x60>)
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <_sbrk+0x64>)
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <_sbrk+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	d207      	bcs.n	8002790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002780:	f008 f952 	bl	800aa28 <__errno>
 8002784:	4603      	mov	r3, r0
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e009      	b.n	80027a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <_sbrk+0x64>)
 80027a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20020000 	.word	0x20020000
 80027b0:	00000400 	.word	0x00000400
 80027b4:	20000a04 	.word	0x20000a04
 80027b8:	20001108 	.word	0x20001108

080027bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <SystemInit+0x20>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <SystemInit+0x20>)
 80027c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	70fb      	strb	r3, [r7, #3]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
 8002854:	2300      	movs	r3, #0
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <reg_wizchip_cs_cbfunc+0x16>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <reg_wizchip_cs_cbfunc+0x40>)
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <reg_wizchip_cs_cbfunc+0x44>)
 8002892:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <reg_wizchip_cs_cbfunc+0x40>)
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <reg_wizchip_cs_cbfunc+0x48>)
 8002898:	619a      	str	r2, [r3, #24]
 800289a:	e006      	b.n	80028aa <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800289c:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <reg_wizchip_cs_cbfunc+0x40>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <reg_wizchip_cs_cbfunc+0x40>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6193      	str	r3, [r2, #24]
   }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000020 	.word	0x20000020
 80028bc:	080027fd 	.word	0x080027fd
 80028c0:	0800280b 	.word	0x0800280b

080028c4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80028ce:	bf00      	nop
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <reg_wizchip_spi_cbfunc+0x4c>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f9      	beq.n	80028d0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <reg_wizchip_spi_cbfunc+0x24>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <reg_wizchip_spi_cbfunc+0x4c>)
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <reg_wizchip_spi_cbfunc+0x50>)
 80028ec:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <reg_wizchip_spi_cbfunc+0x4c>)
 80028f0:	4a09      	ldr	r2, [pc, #36]	; (8002918 <reg_wizchip_spi_cbfunc+0x54>)
 80028f2:	621a      	str	r2, [r3, #32]
 80028f4:	e006      	b.n	8002904 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80028f6:	4a06      	ldr	r2, [pc, #24]	; (8002910 <reg_wizchip_spi_cbfunc+0x4c>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <reg_wizchip_spi_cbfunc+0x4c>)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6213      	str	r3, [r2, #32]
   }
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	20000020 	.word	0x20000020
 8002914:	08002851 	.word	0x08002851
 8002918:	08002861 	.word	0x08002861

0800291c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f200 80c7 	bhi.w	8002aca <ctlwizchip+0x1ae>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <ctlwizchip+0x28>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002985 	.word	0x08002985
 8002948:	0800298b 	.word	0x0800298b
 800294c:	080029b7 	.word	0x080029b7
 8002950:	080029ab 	.word	0x080029ab
 8002954:	080029c5 	.word	0x080029c5
 8002958:	080029d1 	.word	0x080029d1
 800295c:	080029df 	.word	0x080029df
 8002960:	08002a05 	.word	0x08002a05
 8002964:	08002a2b 	.word	0x08002a2b
 8002968:	08002a6f 	.word	0x08002a6f
 800296c:	08002a75 	.word	0x08002a75
 8002970:	08002a7d 	.word	0x08002a7d
 8002974:	08002ad1 	.word	0x08002ad1
 8002978:	08002a85 	.word	0x08002a85
 800297c:	08002a93 	.word	0x08002a93
 8002980:	08002aaf 	.word	0x08002aaf
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002984:	f000 f8ea 	bl	8002b5c <wizchip_sw_reset>
         break;
 8002988:	e0a3      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3308      	adds	r3, #8
 8002998:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f927 	bl	8002bf4 <wizchip_init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	e094      	b.n	8002ad4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f9ac 	bl	8002d0c <wizchip_clrinterrupt>
         break;
 80029b4:	e08d      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80029b6:	f000 f9dd 	bl	8002d74 <wizchip_getinterrupt>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	801a      	strh	r2, [r3, #0]
         break;
 80029c2:	e086      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f9f8 	bl	8002dbe <wizchip_setinterruptmask>
         break;         
 80029ce:	e080      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80029d0:	f000 fa10 	bl	8002df4 <wizchip_getinterruptmask>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	801a      	strh	r2, [r3, #0]
         break;
 80029dc:	e079      	b.n	8002ad2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80029ee:	f7fd fe0d 	bl	800060c <WIZCHIP_WRITE>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80029fe:	f7fd fe05 	bl	800060c <WIZCHIP_WRITE>
         break;
 8002a02:	e066      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002a04:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002a08:	f7fd fdb4 	bl	8000574 <WIZCHIP_READ>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b29c      	uxth	r4, r3
 8002a14:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002a18:	f7fd fdac 	bl	8000574 <WIZCHIP_READ>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4423      	add	r3, r4
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	801a      	strh	r2, [r3, #0]
         break;
 8002a28:	e053      	b.n	8002ad2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <ctlwizchip+0x1c0>)
 8002a2c:	789a      	ldrb	r2, [r3, #2]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <ctlwizchip+0x1c0>)
 8002a38:	78d2      	ldrb	r2, [r2, #3]
 8002a3a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	4a26      	ldr	r2, [pc, #152]	; (8002adc <ctlwizchip+0x1c0>)
 8002a42:	7912      	ldrb	r2, [r2, #4]
 8002a44:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	3303      	adds	r3, #3
 8002a4a:	4a24      	ldr	r2, [pc, #144]	; (8002adc <ctlwizchip+0x1c0>)
 8002a4c:	7952      	ldrb	r2, [r2, #5]
 8002a4e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4a21      	ldr	r2, [pc, #132]	; (8002adc <ctlwizchip+0x1c0>)
 8002a56:	7992      	ldrb	r2, [r2, #6]
 8002a58:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	3305      	adds	r3, #5
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <ctlwizchip+0x1c0>)
 8002a60:	79d2      	ldrb	r2, [r2, #7]
 8002a62:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	3306      	adds	r3, #6
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
         break;
 8002a6c:	e031      	b.n	8002ad2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002a6e:	f000 fa13 	bl	8002e98 <wizphy_reset>
         break;
 8002a72:	e02e      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002a74:	6838      	ldr	r0, [r7, #0]
 8002a76:	f000 fa36 	bl	8002ee6 <wizphy_setphyconf>
         break;
 8002a7a:	e02a      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	f000 fa74 	bl	8002f6a <wizphy_getphyconf>
         break;
 8002a82:	e026      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fad7 	bl	800303c <wizphy_setphypmode>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	e020      	b.n	8002ad4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002a92:	f000 f9e8 	bl	8002e66 <wizphy_getphypmode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2bff      	cmp	r3, #255	; 0xff
 8002a9e:	d102      	bne.n	8002aa6 <ctlwizchip+0x18a>
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa4:	e016      	b.n	8002ad4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	7dfa      	ldrb	r2, [r7, #23]
 8002aaa:	701a      	strb	r2, [r3, #0]
         break;
 8002aac:	e011      	b.n	8002ad2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002aae:	f000 f9c4 	bl	8002e3a <wizphy_getphylink>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2bff      	cmp	r3, #255	; 0xff
 8002aba:	d102      	bne.n	8002ac2 <ctlwizchip+0x1a6>
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e008      	b.n	8002ad4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	7dfa      	ldrb	r2, [r7, #23]
 8002ac6:	701a      	strb	r2, [r3, #0]
         break;
 8002ac8:	e003      	b.n	8002ad2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	e001      	b.n	8002ad4 <ctlwizchip+0x1b8>
         break;
 8002ad0:	bf00      	nop
   }
   return 0;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	20000020 	.word	0x20000020

08002ae0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d82c      	bhi.n	8002b4c <ctlnetwork+0x6c>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <ctlnetwork+0x18>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b19 	.word	0x08002b19
 8002b00:	08002b21 	.word	0x08002b21
 8002b04:	08002b2f 	.word	0x08002b2f
 8002b08:	08002b3d 	.word	0x08002b3d
 8002b0c:	08002b45 	.word	0x08002b45
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002b10:	6838      	ldr	r0, [r7, #0]
 8002b12:	f000 fadd 	bl	80030d0 <wizchip_setnetinfo>
         break;
 8002b16:	e01c      	b.n	8002b52 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	f000 fb19 	bl	8003150 <wizchip_getnetinfo>
         break;
 8002b1e:	e018      	b.n	8002b52 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fb53 	bl	80031d0 <wizchip_setnetmode>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	e012      	b.n	8002b54 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002b2e:	f000 fb71 	bl	8003214 <wizchip_getnetmode>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	701a      	strb	r2, [r3, #0]
         break;
 8002b3a:	e00a      	b.n	8002b52 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002b3c:	6838      	ldr	r0, [r7, #0]
 8002b3e:	f000 fb71 	bl	8003224 <wizchip_settimeout>
         break;
 8002b42:	e006      	b.n	8002b52 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f000 fb8e 	bl	8003266 <wizchip_gettimeout>
         break;
 8002b4a:	e002      	b.n	8002b52 <ctlnetwork+0x72>
      default:
         return -1;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	e000      	b.n	8002b54 <ctlnetwork+0x74>
   }
   return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2206      	movs	r2, #6
 8002b66:	4619      	mov	r1, r3
 8002b68:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002b6c:	f7fd fd9c 	bl	80006a8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2204      	movs	r2, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b7c:	f7fd fd94 	bl	80006a8 <WIZCHIP_READ_BUF>
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	2204      	movs	r2, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b8c:	f7fd fd8c 	bl	80006a8 <WIZCHIP_READ_BUF>
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	2204      	movs	r2, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b9c:	f7fd fd84 	bl	80006a8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fd fd32 	bl	800060c <WIZCHIP_WRITE>
   getMR(); // for delay
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fd fce3 	bl	8000574 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002bb8:	f7fd fdd6 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bc8:	f7fd fdce 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002bd8:	f7fd fdc6 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	2204      	movs	r2, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002be8:	f7fd fdbe 	bl	8000768 <WIZCHIP_WRITE_BUF>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002c02:	f7ff ffab 	bl	8002b5c <wizchip_sw_reset>
   if(txsize)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d03b      	beq.n	8002c84 <wizchip_init+0x90>
   {
      tmp = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
 8002c14:	e015      	b.n	8002c42 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	dd02      	ble.n	8002c36 <wizchip_init+0x42>
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
 8002c34:	e066      	b.n	8002d04 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	dde5      	ble.n	8002c16 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e015      	b.n	8002c7c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3301      	adds	r3, #1
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd fcce 	bl	800060c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	dde5      	ble.n	8002c50 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03b      	beq.n	8002d02 <wizchip_init+0x10e>
   {
      tmp = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e015      	b.n	8002cc0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	dd02      	ble.n	8002cb4 <wizchip_init+0xc0>
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	e027      	b.n	8002d04 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	dde5      	ble.n	8002c94 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e015      	b.n	8002cfa <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd fc8f 	bl	800060c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	dde5      	ble.n	8002cce <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	f023 030f 	bic.w	r3, r3, #15
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002d30:	f7fd fc6c 	bl	800060c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	e014      	b.n	8002d64 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8002d3a:	7bba      	ldrb	r2, [r7, #14]
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	fa42 f303 	asr.w	r3, r2, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <wizchip_clrinterrupt+0x52>
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3301      	adds	r3, #1
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d56:	211f      	movs	r1, #31
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd fc57 	bl	800060c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3301      	adds	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b07      	cmp	r3, #7
 8002d68:	d9e7      	bls.n	8002d3a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002d86:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002d8a:	f7fd fbf3 	bl	8000574 <WIZCHIP_READ>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f023 030f 	bic.w	r3, r3, #15
 8002d94:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002d96:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002d9a:	f7fd fbeb 	bl	8000574 <WIZCHIP_READ>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002da2:	79bb      	ldrb	r3, [r7, #6]
 8002da4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002da6:	88bb      	ldrh	r3, [r7, #4]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002db4:	88bb      	ldrh	r3, [r7, #4]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002ddc:	f7fd fc16 	bl	800060c <WIZCHIP_WRITE>
   setSIMR(simr);
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	4619      	mov	r1, r3
 8002de4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002de8:	f7fd fc10 	bl	800060c <WIZCHIP_WRITE>
#endif   
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002e06:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002e0a:	f7fd fbb3 	bl	8000574 <WIZCHIP_READ>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002e12:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002e16:	f7fd fbad 	bl	8000574 <WIZCHIP_READ>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002e1e:	79bb      	ldrb	r3, [r7, #6]
 8002e20:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002e22:	88bb      	ldrh	r3, [r7, #4]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002e30:	88bb      	ldrh	r3, [r7, #4]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002e40:	2300      	movs	r3, #0
 8002e42:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002e44:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e48:	f7fd fb94 	bl	8000574 <WIZCHIP_READ>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002e56:	2301      	movs	r3, #1
 8002e58:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002e70:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e74:	f7fd fb7e 	bl	8000574 <WIZCHIP_READ>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7e:	2b30      	cmp	r3, #48	; 0x30
 8002e80:	d102      	bne.n	8002e88 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002e82:	2301      	movs	r3, #1
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	e001      	b.n	8002e8c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002e9e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ea2:	f7fd fb67 	bl	8000574 <WIZCHIP_READ>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002eba:	f7fd fba7 	bl	800060c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002ebe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ec2:	f7fd fb57 	bl	8000574 <WIZCHIP_READ>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ed0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002eda:	f7fd fb97 	bl	800060c <WIZCHIP_WRITE>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d104      	bne.n	8002f04 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e003      	b.n	8002f0c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d104      	bne.n	8002f1e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e019      	b.n	8002f52 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	78db      	ldrb	r3, [r3, #3]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d10d      	bne.n	8002f42 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	789b      	ldrb	r3, [r3, #2]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d104      	bne.n	8002f38 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	f043 0318 	orr.w	r3, r3, #24
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e00c      	b.n	8002f52 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	f043 0308 	orr.w	r3, r3, #8
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e007      	b.n	8002f52 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	789b      	ldrb	r3, [r3, #2]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d103      	bne.n	8002f52 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f5a:	f7fd fb57 	bl	800060c <WIZCHIP_WRITE>
   wizphy_reset();
 8002f5e:	f7ff ff9b 	bl	8002e98 <wizphy_reset>
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002f76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f7a:	f7fd fafb 	bl	8000574 <WIZCHIP_READ>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	119b      	asrs	r3, r3, #6
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d001      	beq.n	8002fa0 <wizphy_getphyconf+0x36>
 8002f9c:	2b38      	cmp	r3, #56	; 0x38
 8002f9e:	d103      	bne.n	8002fa8 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	705a      	strb	r2, [r3, #1]
         break;
 8002fa6:	e003      	b.n	8002fb0 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	705a      	strb	r2, [r3, #1]
         break;
 8002fae:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fb6:	3b10      	subs	r3, #16
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	bf8c      	ite	hi
 8002fbc:	2201      	movhi	r2, #1
 8002fbe:	2200      	movls	r2, #0
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	d111      	bne.n	8002fea <wizphy_getphyconf+0x80>
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	709a      	strb	r2, [r3, #2]
         break;
 8002fe8:	e003      	b.n	8002ff2 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	709a      	strb	r2, [r3, #2]
         break;
 8002ff0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff8:	3b08      	subs	r3, #8
 8002ffa:	2b18      	cmp	r3, #24
 8002ffc:	bf8c      	ite	hi
 8002ffe:	2201      	movhi	r2, #1
 8003000:	2200      	movls	r2, #0
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	2a00      	cmp	r2, #0
 8003006:	d111      	bne.n	800302c <wizphy_getphyconf+0xc2>
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	70da      	strb	r2, [r3, #3]
         break;
 800302a:	e003      	b.n	8003034 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	70da      	strb	r2, [r3, #3]
         break;
 8003032:	bf00      	nop
   }
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800304a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800304e:	f7fd fa91 	bl	8000574 <WIZCHIP_READ>
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <wizphy_setphypmode+0x2a>
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	e030      	b.n	80030c8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800306c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d104      	bne.n	800307e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e003      	b.n	8003086 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003084:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800308e:	f7fd fabd 	bl	800060c <WIZCHIP_WRITE>
   wizphy_reset();
 8003092:	f7ff ff01 	bl	8002e98 <wizphy_reset>
   tmp = getPHYCFGR();
 8003096:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800309a:	f7fd fa6b 	bl	8000574 <WIZCHIP_READ>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d106      	bne.n	80030b6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <wizphy_setphypmode+0x88>
 80030b2:	2300      	movs	r3, #0
 80030b4:	e008      	b.n	80030c8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <wizphy_setphypmode+0x88>
 80030c0:	2300      	movs	r3, #0
 80030c2:	e001      	b.n	80030c8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2206      	movs	r2, #6
 80030dc:	4619      	mov	r1, r3
 80030de:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80030e2:	f7fd fb41 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	330e      	adds	r3, #14
 80030ea:	2204      	movs	r2, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030f2:	f7fd fb39 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	330a      	adds	r3, #10
 80030fa:	2204      	movs	r2, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003102:	f7fd fb31 	bl	8000768 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3306      	adds	r3, #6
 800310a:	2204      	movs	r2, #4
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003112:	f7fd fb29 	bl	8000768 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7c9a      	ldrb	r2, [r3, #18]
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <wizchip_setnetinfo+0x78>)
 800311c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7cda      	ldrb	r2, [r3, #19]
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <wizchip_setnetinfo+0x78>)
 8003124:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7d1a      	ldrb	r2, [r3, #20]
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <wizchip_setnetinfo+0x78>)
 800312c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7d5a      	ldrb	r2, [r3, #21]
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <wizchip_setnetinfo+0x78>)
 8003134:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7d9a      	ldrb	r2, [r3, #22]
 800313a:	4b04      	ldr	r3, [pc, #16]	; (800314c <wizchip_setnetinfo+0x7c>)
 800313c:	701a      	strb	r2, [r3, #0]
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000a08 	.word	0x20000a08
 800314c:	20000a0c 	.word	0x20000a0c

08003150 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2206      	movs	r2, #6
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003162:	f7fd faa1 	bl	80006a8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	330e      	adds	r3, #14
 800316a:	2204      	movs	r2, #4
 800316c:	4619      	mov	r1, r3
 800316e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003172:	f7fd fa99 	bl	80006a8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	330a      	adds	r3, #10
 800317a:	2204      	movs	r2, #4
 800317c:	4619      	mov	r1, r3
 800317e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003182:	f7fd fa91 	bl	80006a8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3306      	adds	r3, #6
 800318a:	2204      	movs	r2, #4
 800318c:	4619      	mov	r1, r3
 800318e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003192:	f7fd fa89 	bl	80006a8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <wizchip_getnetinfo+0x78>)
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <wizchip_getnetinfo+0x78>)
 80031a0:	785a      	ldrb	r2, [r3, #1]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <wizchip_getnetinfo+0x78>)
 80031a8:	789a      	ldrb	r2, [r3, #2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <wizchip_getnetinfo+0x78>)
 80031b0:	78da      	ldrb	r2, [r3, #3]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <wizchip_getnetinfo+0x7c>)
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	759a      	strb	r2, [r3, #22]
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000a08 	.word	0x20000a08
 80031cc:	20000a0c 	.word	0x20000a0c

080031d0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <wizchip_setnetmode+0x1e>
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	e00e      	b.n	800320c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7fd f9c0 	bl	8000574 <WIZCHIP_READ>
 80031f4:	4603      	mov	r3, r0
 80031f6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	4619      	mov	r1, r3
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fa01 	bl	800060c <WIZCHIP_WRITE>
   return 0;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd f9ab 	bl	8000574 <WIZCHIP_READ>
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}

08003224 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003236:	f7fd f9e9 	bl	800060c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	885b      	ldrh	r3, [r3, #2]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b29b      	uxth	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800324a:	f7fd f9df 	bl	800060c <WIZCHIP_WRITE>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	885b      	ldrh	r3, [r3, #2]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800325a:	f7fd f9d7 	bl	800060c <WIZCHIP_WRITE>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800326e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003272:	f7fd f97f 	bl	8000574 <WIZCHIP_READ>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800327e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003282:	f7fd f977 	bl	8000574 <WIZCHIP_READ>
 8003286:	4603      	mov	r3, r0
 8003288:	b29b      	uxth	r3, r3
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	b29c      	uxth	r4, r3
 800328e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003292:	f7fd f96f 	bl	8000574 <WIZCHIP_READ>
 8003296:	4603      	mov	r3, r0
 8003298:	b29b      	uxth	r3, r3
 800329a:	4423      	add	r3, r4
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	805a      	strh	r2, [r3, #2]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}
	...

080032ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032b2:	490e      	ldr	r1, [pc, #56]	; (80032ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032b4:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b8:	e002      	b.n	80032c0 <LoopCopyDataInit>

080032ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032be:	3304      	adds	r3, #4

080032c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c4:	d3f9      	bcc.n	80032ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c6:	4a0b      	ldr	r2, [pc, #44]	; (80032f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032c8:	4c0b      	ldr	r4, [pc, #44]	; (80032f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032cc:	e001      	b.n	80032d2 <LoopFillZerobss>

080032ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d0:	3204      	adds	r2, #4

080032d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d4:	d3fb      	bcc.n	80032ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032d6:	f7ff fa71 	bl	80027bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032da:	f007 fbab 	bl	800aa34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032de:	f7fd feaf 	bl	8001040 <main>
  bx  lr    
 80032e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032ec:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80032f0:	0800bdac 	.word	0x0800bdac
  ldr r2, =_sbss
 80032f4:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80032f8:	20001104 	.word	0x20001104

080032fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032fc:	e7fe      	b.n	80032fc <ADC_IRQHandler>
	...

08003300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <HAL_Init+0x40>)
 800330a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_Init+0x40>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_Init+0x40>)
 8003316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_Init+0x40>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_Init+0x40>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003328:	2003      	movs	r0, #3
 800332a:	f000 f94f 	bl	80035cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800332e:	2000      	movs	r0, #0
 8003330:	f000 f808 	bl	8003344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003334:	f7ff f832 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00

08003344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_InitTick+0x54>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_InitTick+0x58>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800335a:	fbb3 f3f1 	udiv	r3, r3, r1
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f967 	bl	8003636 <HAL_SYSTICK_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e00e      	b.n	8003390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d80a      	bhi.n	800338e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003378:	2200      	movs	r2, #0
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f000 f92f 	bl	80035e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003384:	4a06      	ldr	r2, [pc, #24]	; (80033a0 <HAL_InitTick+0x5c>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	2000001c 	.word	0x2000001c
 800339c:	20000050 	.word	0x20000050
 80033a0:	2000004c 	.word	0x2000004c

080033a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_IncTick+0x20>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_IncTick+0x24>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <HAL_IncTick+0x24>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000050 	.word	0x20000050
 80033c8:	20000a10 	.word	0x20000a10

080033cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTick;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_GetTick+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000a10 	.word	0x20000a10

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff ffee 	bl	80033cc <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d005      	beq.n	800340a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_Delay+0x44>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800340a:	bf00      	nop
 800340c:	f7ff ffde 	bl	80033cc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f7      	bhi.n	800340c <HAL_Delay+0x28>
  {
  }
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000050 	.word	0x20000050

0800342c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db0b      	blt.n	80034ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4907      	ldr	r1, [pc, #28]	; (80034c8 <__NVIC_EnableIRQ+0x38>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2001      	movs	r0, #1
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100

080034cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db0a      	blt.n	80034f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	490c      	ldr	r1, [pc, #48]	; (8003518 <__NVIC_SetPriority+0x4c>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	440b      	add	r3, r1
 80034f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f4:	e00a      	b.n	800350c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4908      	ldr	r1, [pc, #32]	; (800351c <__NVIC_SetPriority+0x50>)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	3b04      	subs	r3, #4
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	440b      	add	r3, r1
 800350a:	761a      	strb	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000e100 	.word	0xe000e100
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f1c3 0307 	rsb	r3, r3, #7
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf28      	it	cs
 800353e:	2304      	movcs	r3, #4
 8003540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3304      	adds	r3, #4
 8003546:	2b06      	cmp	r3, #6
 8003548:	d902      	bls.n	8003550 <NVIC_EncodePriority+0x30>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3b03      	subs	r3, #3
 800354e:	e000      	b.n	8003552 <NVIC_EncodePriority+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	401a      	ands	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43d9      	mvns	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	4313      	orrs	r3, r2
         );
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	; 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003598:	d301      	bcc.n	800359e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800359a:	2301      	movs	r3, #1
 800359c:	e00f      	b.n	80035be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <SysTick_Config+0x40>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a6:	210f      	movs	r1, #15
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f7ff ff8e 	bl	80034cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <SysTick_Config+0x40>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <SysTick_Config+0x40>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	e000e010 	.word	0xe000e010

080035cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff29 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f4:	f7ff ff3e 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f7ff ff8e 	bl	8003520 <NVIC_EncodePriority>
 8003604:	4602      	mov	r2, r0
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff5d 	bl	80034cc <__NVIC_SetPriority>
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff31 	bl	8003490 <__NVIC_EnableIRQ>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ffa2 	bl	8003588 <SysTick_Config>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e16b      	b.n	8003944 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800366c:	2201      	movs	r2, #1
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	f040 815a 	bne.w	800393e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d005      	beq.n	80036a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d130      	bne.n	8003704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 0201 	and.w	r2, r3, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b03      	cmp	r3, #3
 800370e:	d017      	beq.n	8003740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	2203      	movs	r2, #3
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d123      	bne.n	8003794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	08da      	lsrs	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3208      	adds	r2, #8
 8003754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	220f      	movs	r2, #15
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80b4 	beq.w	800393e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b60      	ldr	r3, [pc, #384]	; (800395c <HAL_GPIO_Init+0x30c>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	4a5f      	ldr	r2, [pc, #380]	; (800395c <HAL_GPIO_Init+0x30c>)
 80037e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e4:	6453      	str	r3, [r2, #68]	; 0x44
 80037e6:	4b5d      	ldr	r3, [pc, #372]	; (800395c <HAL_GPIO_Init+0x30c>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f2:	4a5b      	ldr	r2, [pc, #364]	; (8003960 <HAL_GPIO_Init+0x310>)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3302      	adds	r3, #2
 80037fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	220f      	movs	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_GPIO_Init+0x314>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02b      	beq.n	8003876 <HAL_GPIO_Init+0x226>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a51      	ldr	r2, [pc, #324]	; (8003968 <HAL_GPIO_Init+0x318>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d025      	beq.n	8003872 <HAL_GPIO_Init+0x222>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a50      	ldr	r2, [pc, #320]	; (800396c <HAL_GPIO_Init+0x31c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01f      	beq.n	800386e <HAL_GPIO_Init+0x21e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a4f      	ldr	r2, [pc, #316]	; (8003970 <HAL_GPIO_Init+0x320>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d019      	beq.n	800386a <HAL_GPIO_Init+0x21a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4e      	ldr	r2, [pc, #312]	; (8003974 <HAL_GPIO_Init+0x324>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0x216>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <HAL_GPIO_Init+0x328>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00d      	beq.n	8003862 <HAL_GPIO_Init+0x212>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4c      	ldr	r2, [pc, #304]	; (800397c <HAL_GPIO_Init+0x32c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <HAL_GPIO_Init+0x20e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4b      	ldr	r2, [pc, #300]	; (8003980 <HAL_GPIO_Init+0x330>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_GPIO_Init+0x20a>
 8003856:	2307      	movs	r3, #7
 8003858:	e00e      	b.n	8003878 <HAL_GPIO_Init+0x228>
 800385a:	2308      	movs	r3, #8
 800385c:	e00c      	b.n	8003878 <HAL_GPIO_Init+0x228>
 800385e:	2306      	movs	r3, #6
 8003860:	e00a      	b.n	8003878 <HAL_GPIO_Init+0x228>
 8003862:	2305      	movs	r3, #5
 8003864:	e008      	b.n	8003878 <HAL_GPIO_Init+0x228>
 8003866:	2304      	movs	r3, #4
 8003868:	e006      	b.n	8003878 <HAL_GPIO_Init+0x228>
 800386a:	2303      	movs	r3, #3
 800386c:	e004      	b.n	8003878 <HAL_GPIO_Init+0x228>
 800386e:	2302      	movs	r3, #2
 8003870:	e002      	b.n	8003878 <HAL_GPIO_Init+0x228>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_GPIO_Init+0x228>
 8003876:	2300      	movs	r3, #0
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f002 0203 	and.w	r2, r2, #3
 800387e:	0092      	lsls	r2, r2, #2
 8003880:	4093      	lsls	r3, r2
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003888:	4935      	ldr	r1, [pc, #212]	; (8003960 <HAL_GPIO_Init+0x310>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_GPIO_Init+0x334>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ba:	4a32      	ldr	r2, [pc, #200]	; (8003984 <HAL_GPIO_Init+0x334>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <HAL_GPIO_Init+0x334>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <HAL_GPIO_Init+0x334>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ea:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_GPIO_Init+0x334>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_GPIO_Init+0x334>)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_GPIO_Init+0x334>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <HAL_GPIO_Init+0x334>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	f67f ae90 	bls.w	800366c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	40013800 	.word	0x40013800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400
 800396c:	40020800 	.word	0x40020800
 8003970:	40020c00 	.word	0x40020c00
 8003974:	40021000 	.word	0x40021000
 8003978:	40021400 	.word	0x40021400
 800397c:	40021800 	.word	0x40021800
 8003980:	40021c00 	.word	0x40021c00
 8003984:	40013c00 	.word	0x40013c00

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a4:	e003      	b.n	80039ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	041a      	lsls	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	619a      	str	r2, [r3, #24]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80039ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039bc:	b08f      	sub	sp, #60	; 0x3c
 80039be:	af0a      	add	r7, sp, #40	; 0x28
 80039c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e054      	b.n	8003a76 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f006 fd74 	bl	800a4d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2203      	movs	r2, #3
 80039f0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fda2 	bl	8007554 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	687e      	ldr	r6, [r7, #4]
 8003a18:	466d      	mov	r5, sp
 8003a1a:	f106 0410 	add.w	r4, r6, #16
 8003a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a2e:	1d33      	adds	r3, r6, #4
 8003a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f003 fd1c 	bl	8007470 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 fd99 	bl	8007576 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	687e      	ldr	r6, [r7, #4]
 8003a4c:	466d      	mov	r5, sp
 8003a4e:	f106 0410 	add.w	r4, r6, #16
 8003a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a62:	1d33      	adds	r3, r6, #4
 8003a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a66:	6838      	ldr	r0, [r7, #0]
 8003a68:	f003 ff22 	bl	80078b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a7e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003a7e:	b590      	push	{r4, r7, lr}
 8003a80:	b089      	sub	sp, #36	; 0x24
 8003a82:	af04      	add	r7, sp, #16
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	4608      	mov	r0, r1
 8003a88:	4611      	mov	r1, r2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	70fb      	strb	r3, [r7, #3]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70bb      	strb	r3, [r7, #2]
 8003a94:	4613      	mov	r3, r2
 8003a96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_HCD_HC_Init+0x28>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e076      	b.n	8003b94 <HAL_HCD_HC_Init+0x116>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	212c      	movs	r1, #44	; 0x2c
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	333d      	adds	r3, #61	; 0x3d
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3338      	adds	r3, #56	; 0x38
 8003ace:	787a      	ldrb	r2, [r7, #1]
 8003ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3340      	adds	r3, #64	; 0x40
 8003ae0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ae2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	3339      	adds	r3, #57	; 0x39
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	333f      	adds	r3, #63	; 0x3f
 8003b04:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003b08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	78ba      	ldrb	r2, [r7, #2]
 8003b0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b12:	b2d0      	uxtb	r0, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	212c      	movs	r1, #44	; 0x2c
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	333a      	adds	r3, #58	; 0x3a
 8003b20:	4602      	mov	r2, r0
 8003b22:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003b24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da09      	bge.n	8003b40 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	333b      	adds	r3, #59	; 0x3b
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e008      	b.n	8003b52 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	333b      	adds	r3, #59	; 0x3b
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	333c      	adds	r3, #60	; 0x3c
 8003b60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b64:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	787c      	ldrb	r4, [r7, #1]
 8003b6c:	78ba      	ldrb	r2, [r7, #2]
 8003b6e:	78f9      	ldrb	r1, [r7, #3]
 8003b70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4623      	mov	r3, r4
 8003b82:	f004 f81b 	bl	8007bbc <USB_HC_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}

08003b9c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_HCD_HC_Halt+0x1e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e00f      	b.n	8003bda <HAL_HCD_HC_Halt+0x3e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 fa6b 	bl	80080a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	70fb      	strb	r3, [r7, #3]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	70bb      	strb	r3, [r7, #2]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	333b      	adds	r3, #59	; 0x3b
 8003c0c:	78ba      	ldrb	r2, [r7, #2]
 8003c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	333f      	adds	r3, #63	; 0x3f
 8003c1e:	787a      	ldrb	r2, [r7, #1]
 8003c20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003c22:	7c3b      	ldrb	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d112      	bne.n	8003c4e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3342      	adds	r3, #66	; 0x42
 8003c36:	2203      	movs	r2, #3
 8003c38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	333d      	adds	r3, #61	; 0x3d
 8003c48:	7f3a      	ldrb	r2, [r7, #28]
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e008      	b.n	8003c60 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3342      	adds	r3, #66	; 0x42
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c60:	787b      	ldrb	r3, [r7, #1]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	f200 80c6 	bhi.w	8003df4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003de1 	.word	0x08003de1
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003d63 	.word	0x08003d63
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003c80:	7c3b      	ldrb	r3, [r7, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f040 80b8 	bne.w	8003df8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003c88:	78bb      	ldrb	r3, [r7, #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 80b4 	bne.w	8003df8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003c90:	8b3b      	ldrh	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3355      	adds	r3, #85	; 0x55
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3355      	adds	r3, #85	; 0x55
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3342      	adds	r3, #66	; 0x42
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003cce:	e093      	b.n	8003df8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	3342      	adds	r3, #66	; 0x42
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
      break;
 8003ce2:	e089      	b.n	8003df8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ce4:	78bb      	ldrb	r3, [r7, #2]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11d      	bne.n	8003d26 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3355      	adds	r3, #85	; 0x55
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3342      	adds	r3, #66	; 0x42
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003d10:	e073      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3342      	adds	r3, #66	; 0x42
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
      break;
 8003d24:	e069      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3354      	adds	r3, #84	; 0x54
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3342      	adds	r3, #66	; 0x42
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
      break;
 8003d4c:	e055      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3342      	adds	r3, #66	; 0x42
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
      break;
 8003d60:	e04b      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003d62:	78bb      	ldrb	r3, [r7, #2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11d      	bne.n	8003da4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3355      	adds	r3, #85	; 0x55
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3342      	adds	r3, #66	; 0x42
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d8e:	e034      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3342      	adds	r3, #66	; 0x42
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	e02a      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	3354      	adds	r3, #84	; 0x54
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3342      	adds	r3, #66	; 0x42
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
      break;
 8003dca:	e016      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	212c      	movs	r1, #44	; 0x2c
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3342      	adds	r3, #66	; 0x42
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3342      	adds	r3, #66	; 0x42
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003df8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	3344      	adds	r3, #68	; 0x44
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	8b3a      	ldrh	r2, [r7, #24]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	202c      	movs	r0, #44	; 0x2c
 8003e14:	fb00 f303 	mul.w	r3, r0, r3
 8003e18:	440b      	add	r3, r1
 8003e1a:	334c      	adds	r3, #76	; 0x4c
 8003e1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3360      	adds	r3, #96	; 0x60
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3350      	adds	r3, #80	; 0x50
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3339      	adds	r3, #57	; 0x39
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3361      	adds	r3, #97	; 0x61
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	222c      	movs	r2, #44	; 0x2c
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	3338      	adds	r3, #56	; 0x38
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	18d1      	adds	r1, r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f003 ffbe 	bl	8007e00 <USB_HC_StartXfer>
 8003e84:	4603      	mov	r3, r0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 fcbf 	bl	800782a <USB_GetMode>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 80f6 	bne.w	80040a0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 fca3 	bl	8007804 <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80ec 	beq.w	800409e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f003 fc9a 	bl	8007804 <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eda:	d104      	bne.n	8003ee6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ee4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 fc8a 	bl	8007804 <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efa:	d104      	bne.n	8003f06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 fc7a 	bl	8007804 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1a:	d104      	bne.n	8003f26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 fc6a 	bl	8007804 <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d103      	bne.n	8003f42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 fc5c 	bl	8007804 <USB_ReadInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f56:	d11c      	bne.n	8003f92 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f72:	2110      	movs	r1, #16
 8003f74:	6938      	ldr	r0, [r7, #16]
 8003f76:	f003 fb4b 	bl	8007610 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f003 fb7c 	bl	8007678 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 fd52 	bl	8007a30 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f006 fb1f 	bl	800a5d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f003 fc34 	bl	8007804 <USB_ReadInterrupts>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fa6:	d102      	bne.n	8003fae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 f89e 	bl	80050ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 fc26 	bl	8007804 <USB_ReadInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d106      	bne.n	8003fd0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f006 fae8 	bl	800a598 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 fc15 	bl	8007804 <USB_ReadInterrupts>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d101      	bne.n	8003fe8 <HAL_HCD_IRQHandler+0x158>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_HCD_IRQHandler+0x15a>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0210 	bic.w	r2, r2, #16
 8003ffc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 ffa1 	bl	8004f46 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0210 	orr.w	r2, r2, #16
 8004012:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 fbf3 	bl	8007804 <USB_ReadInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004028:	d13a      	bne.n	80040a0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f004 f828 	bl	8008084 <USB_HC_ReadInterrupt>
 8004034:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e025      	b.n	8004088 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d018      	beq.n	8004082 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d106      	bne.n	8004076 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8ab 	bl	80041ca <HCD_HC_IN_IRQHandler>
 8004074:	e005      	b.n	8004082 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fbf9 	bl	8004874 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3301      	adds	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3d4      	bcc.n	800403c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409a:	615a      	str	r2, [r3, #20]
 800409c:	e000      	b.n	80040a0 <HAL_HCD_IRQHandler+0x210>
      return;
 800409e:	bf00      	nop
    }
  }
}
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_HCD_Start+0x16>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e013      	b.n	80040e4 <HAL_HCD_Start+0x3e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fd14 	bl	8007af8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fa2c 	bl	8007532 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_HCD_Stop+0x16>
 80040fe:	2302      	movs	r3, #2
 8004100:	e00d      	b.n	800411e <HAL_HCD_Stop+0x32>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f004 f902 	bl	8008318 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f003 fcb6 	bl	8007aa4 <USB_ResetPort>
 8004138:	4603      	mov	r3, r0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3360      	adds	r3, #96	; 0x60
 800415c:	781b      	ldrb	r3, [r3, #0]
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3350      	adds	r3, #80	; 0x50
 8004184:	681b      	ldr	r3, [r3, #0]
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fcfa 	bl	8007b98 <USB_GetCurrentFrame>
 80041a4:	4603      	mov	r3, r0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 fcd5 	bl	8007b6a <USB_GetHostSpeed>
 80041c0:	4603      	mov	r3, r0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d11a      	bne.n	8004230 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	461a      	mov	r2, r3
 8004208:	2304      	movs	r3, #4
 800420a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3361      	adds	r3, #97	; 0x61
 800421a:	2206      	movs	r2, #6
 800421c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f003 ff3c 	bl	80080a6 <USB_HC_Halt>
 800422e:	e0af      	b.n	8004390 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d11b      	bne.n	8004280 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	461a      	mov	r2, r3
 8004256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3361      	adds	r3, #97	; 0x61
 800426a:	2207      	movs	r2, #7
 800426c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f003 ff14 	bl	80080a6 <USB_HC_Halt>
 800427e:	e087      	b.n	8004390 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d109      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2320      	movs	r3, #32
 80042a6:	6093      	str	r3, [r2, #8]
 80042a8:	e072      	b.n	8004390 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d11a      	bne.n	80042f6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	461a      	mov	r2, r3
 80042ce:	2308      	movs	r3, #8
 80042d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3361      	adds	r3, #97	; 0x61
 80042e0:	2205      	movs	r2, #5
 80042e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f003 fed9 	bl	80080a6 <USB_HC_Halt>
 80042f4:	e04c      	b.n	8004390 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430c:	d11b      	bne.n	8004346 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	461a      	mov	r2, r3
 800431c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004320:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3361      	adds	r3, #97	; 0x61
 8004330:	2208      	movs	r2, #8
 8004332:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f003 feb1 	bl	80080a6 <USB_HC_Halt>
 8004344:	e024      	b.n	8004390 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d119      	bne.n	8004390 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	461a      	mov	r2, r3
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	3361      	adds	r3, #97	; 0x61
 800437c:	2206      	movs	r2, #6
 800437e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f003 fe8b 	bl	80080a6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a6:	d112      	bne.n	80043ce <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f003 fe77 	bl	80080a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	461a      	mov	r2, r3
 80043c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80043cc:	e24e      	b.n	800486c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	f040 80df 	bne.w	80045a4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d019      	beq.n	8004422 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	212c      	movs	r1, #44	; 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	3348      	adds	r3, #72	; 0x48
 80043fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	0159      	lsls	r1, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	440b      	add	r3, r1
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	202c      	movs	r0, #44	; 0x2c
 8004418:	fb00 f303 	mul.w	r3, r0, r3
 800441c:	440b      	add	r3, r1
 800441e:	3350      	adds	r3, #80	; 0x50
 8004420:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	3361      	adds	r3, #97	; 0x61
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	335c      	adds	r3, #92	; 0x5c
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	461a      	mov	r2, r3
 8004454:	2301      	movs	r3, #1
 8004456:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	333f      	adds	r3, #63	; 0x3f
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	333f      	adds	r3, #63	; 0x3f
 800447a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800447c:	2b02      	cmp	r3, #2
 800447e:	d111      	bne.n	80044a4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f003 fe0b 	bl	80080a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449c:	461a      	mov	r2, r3
 800449e:	2310      	movs	r3, #16
 80044a0:	6093      	str	r3, [r2, #8]
 80044a2:	e03a      	b.n	800451a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	333f      	adds	r3, #63	; 0x3f
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d009      	beq.n	80044cc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	333f      	adds	r3, #63	; 0x3f
 80044c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d126      	bne.n	800451a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	212c      	movs	r1, #44	; 0x2c
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	3360      	adds	r3, #96	; 0x60
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	b2d9      	uxtb	r1, r3
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	202c      	movs	r0, #44	; 0x2c
 8004508:	fb00 f303 	mul.w	r3, r0, r3
 800450c:	4413      	add	r3, r2
 800450e:	3360      	adds	r3, #96	; 0x60
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f006 f869 	bl	800a5ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d12b      	bne.n	800457a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	212c      	movs	r1, #44	; 0x2c
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	4413      	add	r3, r2
 800452e:	3348      	adds	r3, #72	; 0x48
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	202c      	movs	r0, #44	; 0x2c
 8004538:	fb00 f202 	mul.w	r2, r0, r2
 800453c:	440a      	add	r2, r1
 800453e:	3240      	adds	r2, #64	; 0x40
 8004540:	8812      	ldrh	r2, [r2, #0]
 8004542:	fbb3 f3f2 	udiv	r3, r3, r2
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 818e 	beq.w	800486c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f083 0301 	eor.w	r3, r3, #1
 8004564:	b2d8      	uxtb	r0, r3
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	212c      	movs	r1, #44	; 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	3354      	adds	r3, #84	; 0x54
 8004574:	4602      	mov	r2, r0
 8004576:	701a      	strb	r2, [r3, #0]
}
 8004578:	e178      	b.n	800486c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	212c      	movs	r1, #44	; 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3354      	adds	r3, #84	; 0x54
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	f083 0301 	eor.w	r3, r3, #1
 800458e:	b2d8      	uxtb	r0, r3
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3354      	adds	r3, #84	; 0x54
 800459e:	4602      	mov	r2, r0
 80045a0:	701a      	strb	r2, [r3, #0]
}
 80045a2:	e163      	b.n	800486c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	f040 80f6 	bne.w	80047a8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3361      	adds	r3, #97	; 0x61
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d109      	bne.n	80045e4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	212c      	movs	r1, #44	; 0x2c
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	4413      	add	r3, r2
 80045dc:	3360      	adds	r3, #96	; 0x60
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e0c9      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	212c      	movs	r1, #44	; 0x2c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3361      	adds	r3, #97	; 0x61
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b05      	cmp	r3, #5
 80045f6:	d109      	bne.n	800460c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3360      	adds	r3, #96	; 0x60
 8004606:	2205      	movs	r2, #5
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	e0b5      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	212c      	movs	r1, #44	; 0x2c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4413      	add	r3, r2
 8004618:	3361      	adds	r3, #97	; 0x61
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b06      	cmp	r3, #6
 800461e:	d009      	beq.n	8004634 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	212c      	movs	r1, #44	; 0x2c
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	4413      	add	r3, r2
 800462c:	3361      	adds	r3, #97	; 0x61
 800462e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004630:	2b08      	cmp	r3, #8
 8004632:	d150      	bne.n	80046d6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	335c      	adds	r3, #92	; 0x5c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	202c      	movs	r0, #44	; 0x2c
 800464c:	fb00 f303 	mul.w	r3, r0, r3
 8004650:	440b      	add	r3, r1
 8004652:	335c      	adds	r3, #92	; 0x5c
 8004654:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	335c      	adds	r3, #92	; 0x5c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d912      	bls.n	8004690 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	335c      	adds	r3, #92	; 0x5c
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3360      	adds	r3, #96	; 0x60
 800468a:	2204      	movs	r2, #4
 800468c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800468e:	e073      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3360      	adds	r3, #96	; 0x60
 800469e:	2202      	movs	r2, #2
 80046a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046b8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046c0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046d4:	e050      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3361      	adds	r3, #97	; 0x61
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d122      	bne.n	8004730 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	212c      	movs	r1, #44	; 0x2c
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	3360      	adds	r3, #96	; 0x60
 80046f8:	2202      	movs	r2, #2
 80046fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004712:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800471a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	461a      	mov	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e023      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	212c      	movs	r1, #44	; 0x2c
 8004736:	fb01 f303 	mul.w	r3, r1, r3
 800473a:	4413      	add	r3, r2
 800473c:	3361      	adds	r3, #97	; 0x61
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b07      	cmp	r3, #7
 8004742:	d119      	bne.n	8004778 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	335c      	adds	r3, #92	; 0x5c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	202c      	movs	r0, #44	; 0x2c
 800475c:	fb00 f303 	mul.w	r3, r0, r3
 8004760:	440b      	add	r3, r1
 8004762:	335c      	adds	r3, #92	; 0x5c
 8004764:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	3360      	adds	r3, #96	; 0x60
 8004774:	2204      	movs	r2, #4
 8004776:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004784:	461a      	mov	r2, r3
 8004786:	2302      	movs	r3, #2
 8004788:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	b2d9      	uxtb	r1, r3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	202c      	movs	r0, #44	; 0x2c
 8004794:	fb00 f303 	mul.w	r3, r0, r3
 8004798:	4413      	add	r3, r2
 800479a:	3360      	adds	r3, #96	; 0x60
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f005 ff23 	bl	800a5ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047a6:	e061      	b.n	800486c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d156      	bne.n	800486c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	333f      	adds	r3, #63	; 0x3f
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d111      	bne.n	80047f6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	335c      	adds	r3, #92	; 0x5c
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	4611      	mov	r1, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f003 fc59 	bl	80080a6 <USB_HC_Halt>
 80047f4:	e031      	b.n	800485a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	333f      	adds	r3, #63	; 0x3f
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	212c      	movs	r1, #44	; 0x2c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	333f      	adds	r3, #63	; 0x3f
 8004818:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800481a:	2b02      	cmp	r3, #2
 800481c:	d11d      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	335c      	adds	r3, #92	; 0x5c
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d110      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3361      	adds	r3, #97	; 0x61
 8004846:	2203      	movs	r2, #3
 8004848:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f003 fc26 	bl	80080a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	461a      	mov	r2, r3
 8004868:	2310      	movs	r3, #16
 800486a:	6093      	str	r3, [r2, #8]
}
 800486c:	bf00      	nop
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	4413      	add	r3, r2
 8004896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d11a      	bne.n	80048da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b0:	461a      	mov	r2, r3
 80048b2:	2304      	movs	r3, #4
 80048b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	3361      	adds	r3, #97	; 0x61
 80048c4:	2206      	movs	r2, #6
 80048c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 fbe7 	bl	80080a6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80048d8:	e331      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d12e      	bne.n	800494e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fc:	461a      	mov	r2, r3
 80048fe:	2320      	movs	r3, #32
 8004900:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	333d      	adds	r3, #61	; 0x3d
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	f040 8313 	bne.w	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	333d      	adds	r3, #61	; 0x3d
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	3360      	adds	r3, #96	; 0x60
 8004938:	2202      	movs	r2, #2
 800493a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fbad 	bl	80080a6 <USB_HC_Halt>
}
 800494c:	e2f7      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d112      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004978:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f003 fb8e 	bl	80080a6 <USB_HC_Halt>
}
 800498a:	e2d8      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d140      	bne.n	8004a24 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	335c      	adds	r3, #92	; 0x5c
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b40      	cmp	r3, #64	; 0x40
 80049c8:	d111      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	333d      	adds	r3, #61	; 0x3d
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fa:	461a      	mov	r2, r3
 80049fc:	2301      	movs	r3, #1
 80049fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	212c      	movs	r1, #44	; 0x2c
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3361      	adds	r3, #97	; 0x61
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f003 fb42 	bl	80080a6 <USB_HC_Halt>
}
 8004a22:	e28c      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d12c      	bne.n	8004a94 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3361      	adds	r3, #97	; 0x61
 8004a48:	2204      	movs	r2, #4
 8004a4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	333d      	adds	r3, #61	; 0x3d
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	212c      	movs	r1, #44	; 0x2c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	335c      	adds	r3, #92	; 0x5c
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 fb13 	bl	80080a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	6093      	str	r3, [r2, #8]
}
 8004a92:	e254      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d11a      	bne.n	8004ae0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2308      	movs	r3, #8
 8004aba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3361      	adds	r3, #97	; 0x61
 8004aca:	2205      	movs	r2, #5
 8004acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 fae4 	bl	80080a6 <USB_HC_Halt>
}
 8004ade:	e22e      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d140      	bne.n	8004b78 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	335c      	adds	r3, #92	; 0x5c
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3361      	adds	r3, #97	; 0x61
 8004b16:	2203      	movs	r2, #3
 8004b18:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	333d      	adds	r3, #61	; 0x3d
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d112      	bne.n	8004b54 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	333c      	adds	r3, #60	; 0x3c
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	212c      	movs	r1, #44	; 0x2c
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	333d      	adds	r3, #61	; 0x3d
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f003 faa1 	bl	80080a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	461a      	mov	r2, r3
 8004b72:	2310      	movs	r3, #16
 8004b74:	6093      	str	r3, [r2, #8]
}
 8004b76:	e1e2      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d164      	bne.n	8004c58 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d111      	bne.n	8004bba <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3361      	adds	r3, #97	; 0x61
 8004ba4:	2206      	movs	r2, #6
 8004ba6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 fa77 	bl	80080a6 <USB_HC_Halt>
 8004bb8:	e044      	b.n	8004c44 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	335c      	adds	r3, #92	; 0x5c
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	202c      	movs	r0, #44	; 0x2c
 8004bd2:	fb00 f303 	mul.w	r3, r0, r3
 8004bd6:	440b      	add	r3, r1
 8004bd8:	335c      	adds	r3, #92	; 0x5c
 8004bda:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	335c      	adds	r3, #92	; 0x5c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d920      	bls.n	8004c32 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	335c      	adds	r3, #92	; 0x5c
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3360      	adds	r3, #96	; 0x60
 8004c10:	2204      	movs	r2, #4
 8004c12:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	b2d9      	uxtb	r1, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	202c      	movs	r0, #44	; 0x2c
 8004c1e:	fb00 f303 	mul.w	r3, r0, r3
 8004c22:	4413      	add	r3, r2
 8004c24:	3360      	adds	r3, #96	; 0x60
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f005 fcde 	bl	800a5ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c30:	e008      	b.n	8004c44 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3360      	adds	r3, #96	; 0x60
 8004c40:	2202      	movs	r2, #2
 8004c42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	461a      	mov	r2, r3
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	6093      	str	r3, [r2, #8]
}
 8004c56:	e172      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6e:	d11b      	bne.n	8004ca8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	212c      	movs	r1, #44	; 0x2c
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3361      	adds	r3, #97	; 0x61
 8004c7e:	2208      	movs	r2, #8
 8004c80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f003 fa0a 	bl	80080a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca4:	6093      	str	r3, [r2, #8]
}
 8004ca6:	e14a      	b.n	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	f040 813f 	bne.w	8004f3e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	212c      	movs	r1, #44	; 0x2c
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3361      	adds	r3, #97	; 0x61
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d17d      	bne.n	8004dd0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	212c      	movs	r1, #44	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	3360      	adds	r3, #96	; 0x60
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	333f      	adds	r3, #63	; 0x3f
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d00a      	beq.n	8004d10 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	333f      	adds	r3, #63	; 0x3f
 8004d08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	f040 8100 	bne.w	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	3355      	adds	r3, #85	; 0x55
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f083 0301 	eor.w	r3, r3, #1
 8004d2c:	b2d8      	uxtb	r0, r3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3355      	adds	r3, #85	; 0x55
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 80e3 	bne.w	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	334c      	adds	r3, #76	; 0x4c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80d8 	beq.w	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	334c      	adds	r3, #76	; 0x4c
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	202c      	movs	r0, #44	; 0x2c
 8004d76:	fb00 f202 	mul.w	r2, r0, r2
 8004d7a:	440a      	add	r2, r1
 8004d7c:	3240      	adds	r2, #64	; 0x40
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	4413      	add	r3, r2
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	202c      	movs	r0, #44	; 0x2c
 8004d8a:	fb00 f202 	mul.w	r2, r0, r2
 8004d8e:	440a      	add	r2, r1
 8004d90:	3240      	adds	r2, #64	; 0x40
 8004d92:	8812      	ldrh	r2, [r2, #0]
 8004d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80b5 	beq.w	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	3355      	adds	r3, #85	; 0x55
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	f083 0301 	eor.w	r3, r3, #1
 8004dba:	b2d8      	uxtb	r0, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	212c      	movs	r1, #44	; 0x2c
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3355      	adds	r3, #85	; 0x55
 8004dca:	4602      	mov	r2, r0
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e09f      	b.n	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	212c      	movs	r1, #44	; 0x2c
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3361      	adds	r3, #97	; 0x61
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d109      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	212c      	movs	r1, #44	; 0x2c
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	3360      	adds	r3, #96	; 0x60
 8004df2:	2202      	movs	r2, #2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e08b      	b.n	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	3361      	adds	r3, #97	; 0x61
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d109      	bne.n	8004e20 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	212c      	movs	r1, #44	; 0x2c
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3360      	adds	r3, #96	; 0x60
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e077      	b.n	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3361      	adds	r3, #97	; 0x61
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d109      	bne.n	8004e48 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	212c      	movs	r1, #44	; 0x2c
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3360      	adds	r3, #96	; 0x60
 8004e42:	2205      	movs	r2, #5
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e063      	b.n	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	212c      	movs	r1, #44	; 0x2c
 8004e4e:	fb01 f303 	mul.w	r3, r1, r3
 8004e52:	4413      	add	r3, r2
 8004e54:	3361      	adds	r3, #97	; 0x61
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b06      	cmp	r3, #6
 8004e5a:	d009      	beq.n	8004e70 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	212c      	movs	r1, #44	; 0x2c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3361      	adds	r3, #97	; 0x61
 8004e6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d14f      	bne.n	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	212c      	movs	r1, #44	; 0x2c
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	335c      	adds	r3, #92	; 0x5c
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	202c      	movs	r0, #44	; 0x2c
 8004e88:	fb00 f303 	mul.w	r3, r0, r3
 8004e8c:	440b      	add	r3, r1
 8004e8e:	335c      	adds	r3, #92	; 0x5c
 8004e90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	212c      	movs	r1, #44	; 0x2c
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	335c      	adds	r3, #92	; 0x5c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d912      	bls.n	8004ecc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	335c      	adds	r3, #92	; 0x5c
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	212c      	movs	r1, #44	; 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3360      	adds	r3, #96	; 0x60
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e021      	b.n	8004f10 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3360      	adds	r3, #96	; 0x60
 8004eda:	2202      	movs	r2, #2
 8004edc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ef4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004efc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2302      	movs	r3, #2
 8004f20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	b2d9      	uxtb	r1, r3
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	202c      	movs	r0, #44	; 0x2c
 8004f2c:	fb00 f303 	mul.w	r3, r0, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	3360      	adds	r3, #96	; 0x60
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f005 fb57 	bl	800a5ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f3e:	bf00      	nop
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b08a      	sub	sp, #40	; 0x28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	0c5b      	lsrs	r3, r3, #17
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f7a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d004      	beq.n	8004f8c <HCD_RXQLVL_IRQHandler+0x46>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	f000 80a9 	beq.w	80050dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f8a:	e0aa      	b.n	80050e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80a6 	beq.w	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	212c      	movs	r1, #44	; 0x2c
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3344      	adds	r3, #68	; 0x44
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 809b 	beq.w	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3350      	adds	r3, #80	; 0x50
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	441a      	add	r2, r3
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	202c      	movs	r0, #44	; 0x2c
 8004fc4:	fb00 f303 	mul.w	r3, r0, r3
 8004fc8:	440b      	add	r3, r1
 8004fca:	334c      	adds	r3, #76	; 0x4c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d87a      	bhi.n	80050c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3344      	adds	r3, #68	; 0x44
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	b292      	uxth	r2, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	f002 fbb2 	bl	8007754 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	212c      	movs	r1, #44	; 0x2c
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3344      	adds	r3, #68	; 0x44
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	441a      	add	r2, r3
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	202c      	movs	r0, #44	; 0x2c
 800500a:	fb00 f303 	mul.w	r3, r0, r3
 800500e:	440b      	add	r3, r1
 8005010:	3344      	adds	r3, #68	; 0x44
 8005012:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3350      	adds	r3, #80	; 0x50
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	441a      	add	r2, r3
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	202c      	movs	r0, #44	; 0x2c
 800502e:	fb00 f303 	mul.w	r3, r0, r3
 8005032:	440b      	add	r3, r1
 8005034:	3350      	adds	r3, #80	; 0x50
 8005036:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	4413      	add	r3, r2
 8005040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	0cdb      	lsrs	r3, r3, #19
 8005048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800504c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	212c      	movs	r1, #44	; 0x2c
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	4413      	add	r3, r2
 800505a:	3340      	adds	r3, #64	; 0x40
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4293      	cmp	r3, r2
 8005064:	d13c      	bne.n	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d039      	beq.n	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005082:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	4413      	add	r3, r2
 8005094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	212c      	movs	r1, #44	; 0x2c
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	4413      	add	r3, r2
 80050aa:	3354      	adds	r3, #84	; 0x54
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	f083 0301 	eor.w	r3, r3, #1
 80050b2:	b2d8      	uxtb	r0, r3
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3354      	adds	r3, #84	; 0x54
 80050c2:	4602      	mov	r2, r0
 80050c4:	701a      	strb	r2, [r3, #0]
      break;
 80050c6:	e00b      	b.n	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	3360      	adds	r3, #96	; 0x60
 80050d6:	2204      	movs	r2, #4
 80050d8:	701a      	strb	r2, [r3, #0]
      break;
 80050da:	e001      	b.n	80050e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80050dc:	bf00      	nop
 80050de:	e000      	b.n	80050e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80050e0:	bf00      	nop
  }
}
 80050e2:	bf00      	nop
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005116:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d10b      	bne.n	800513a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d102      	bne.n	8005132 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f005 fa41 	bl	800a5b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d132      	bne.n	80051aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f043 0308 	orr.w	r3, r3, #8
 800514a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d126      	bne.n	80051a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d113      	bne.n	8005186 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005164:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005168:	d106      	bne.n	8005178 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2102      	movs	r1, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f002 fc5d 	bl	8007a30 <USB_InitFSLSPClkSel>
 8005176:	e011      	b.n	800519c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2101      	movs	r1, #1
 800517e:	4618      	mov	r0, r3
 8005180:	f002 fc56 	bl	8007a30 <USB_InitFSLSPClkSel>
 8005184:	e00a      	b.n	800519c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d106      	bne.n	800519c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005194:	461a      	mov	r2, r3
 8005196:	f64e 2360 	movw	r3, #60000	; 0xea60
 800519a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f005 fa33 	bl	800a608 <HAL_HCD_PortEnabled_Callback>
 80051a2:	e002      	b.n	80051aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f005 fa3d 	bl	800a624 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d103      	bne.n	80051bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051c2:	461a      	mov	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e12b      	b.n	800543a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fd f8f8 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2224      	movs	r2, #36	; 0x24
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005234:	f001 fa20 	bl	8006678 <HAL_RCC_GetPCLK1Freq>
 8005238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4a81      	ldr	r2, [pc, #516]	; (8005444 <HAL_I2C_Init+0x274>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d807      	bhi.n	8005254 <HAL_I2C_Init+0x84>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a80      	ldr	r2, [pc, #512]	; (8005448 <HAL_I2C_Init+0x278>)
 8005248:	4293      	cmp	r3, r2
 800524a:	bf94      	ite	ls
 800524c:	2301      	movls	r3, #1
 800524e:	2300      	movhi	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e006      	b.n	8005262 <HAL_I2C_Init+0x92>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a7d      	ldr	r2, [pc, #500]	; (800544c <HAL_I2C_Init+0x27c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	bf94      	ite	ls
 800525c:	2301      	movls	r3, #1
 800525e:	2300      	movhi	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0e7      	b.n	800543a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a78      	ldr	r2, [pc, #480]	; (8005450 <HAL_I2C_Init+0x280>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	0c9b      	lsrs	r3, r3, #18
 8005274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a6a      	ldr	r2, [pc, #424]	; (8005444 <HAL_I2C_Init+0x274>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d802      	bhi.n	80052a4 <HAL_I2C_Init+0xd4>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3301      	adds	r3, #1
 80052a2:	e009      	b.n	80052b8 <HAL_I2C_Init+0xe8>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	4a69      	ldr	r2, [pc, #420]	; (8005454 <HAL_I2C_Init+0x284>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	3301      	adds	r3, #1
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	430b      	orrs	r3, r1
 80052be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	495c      	ldr	r1, [pc, #368]	; (8005444 <HAL_I2C_Init+0x274>)
 80052d4:	428b      	cmp	r3, r1
 80052d6:	d819      	bhi.n	800530c <HAL_I2C_Init+0x13c>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1e59      	subs	r1, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e6:	1c59      	adds	r1, r3, #1
 80052e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052ec:	400b      	ands	r3, r1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_I2C_Init+0x138>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1e59      	subs	r1, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005300:	3301      	adds	r3, #1
 8005302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005306:	e051      	b.n	80053ac <HAL_I2C_Init+0x1dc>
 8005308:	2304      	movs	r3, #4
 800530a:	e04f      	b.n	80053ac <HAL_I2C_Init+0x1dc>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d111      	bne.n	8005338 <HAL_I2C_Init+0x168>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1e58      	subs	r0, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	440b      	add	r3, r1
 8005322:	fbb0 f3f3 	udiv	r3, r0, r3
 8005326:	3301      	adds	r3, #1
 8005328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e012      	b.n	800535e <HAL_I2C_Init+0x18e>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	1e58      	subs	r0, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	0099      	lsls	r1, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	fbb0 f3f3 	udiv	r3, r0, r3
 800534e:	3301      	adds	r3, #1
 8005350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Init+0x196>
 8005362:	2301      	movs	r3, #1
 8005364:	e022      	b.n	80053ac <HAL_I2C_Init+0x1dc>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10e      	bne.n	800538c <HAL_I2C_Init+0x1bc>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1e58      	subs	r0, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	440b      	add	r3, r1
 800537c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005380:	3301      	adds	r3, #1
 8005382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	e00f      	b.n	80053ac <HAL_I2C_Init+0x1dc>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1e58      	subs	r0, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	0099      	lsls	r1, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	6809      	ldr	r1, [r1, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6911      	ldr	r1, [r2, #16]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68d2      	ldr	r2, [r2, #12]
 80053e6:	4311      	orrs	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	000186a0 	.word	0x000186a0
 8005448:	001e847f 	.word	0x001e847f
 800544c:	003d08ff 	.word	0x003d08ff
 8005450:	431bde83 	.word	0x431bde83
 8005454:	10624dd3 	.word	0x10624dd3

08005458 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e128      	b.n	80056bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a90      	ldr	r2, [pc, #576]	; (80056c4 <HAL_I2S_Init+0x26c>)
 8005482:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fc fff9 	bl	800247c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054a0:	f023 030f 	bic.w	r3, r3, #15
 80054a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2202      	movs	r2, #2
 80054ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d060      	beq.n	8005578 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80054be:	2310      	movs	r3, #16
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e001      	b.n	80054c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80054c4:	2320      	movs	r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d802      	bhi.n	80054d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f001 f9c4 	bl	8006864 <HAL_RCCEx_GetPeriphCLKFreq>
 80054dc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e6:	d125      	bne.n	8005534 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	3305      	adds	r3, #5
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e01f      	b.n	8005552 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	fbb2 f2f3 	udiv	r2, r2, r3
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	3305      	adds	r3, #5
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e00e      	b.n	8005552 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	fbb2 f2f3 	udiv	r2, r2, r3
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	3305      	adds	r3, #5
 8005550:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4a5c      	ldr	r2, [pc, #368]	; (80056c8 <HAL_I2S_Init+0x270>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	085b      	lsrs	r3, r3, #1
 800556e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e003      	b.n	8005580 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005578:	2302      	movs	r3, #2
 800557a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d902      	bls.n	800558c <HAL_I2S_Init+0x134>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2bff      	cmp	r3, #255	; 0xff
 800558a:	d907      	bls.n	800559c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005590:	f043 0210 	orr.w	r2, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e08f      	b.n	80056bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	ea42 0103 	orr.w	r1, r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055ba:	f023 030f 	bic.w	r3, r3, #15
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6851      	ldr	r1, [r2, #4]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6892      	ldr	r2, [r2, #8]
 80055c6:	4311      	orrs	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	68d2      	ldr	r2, [r2, #12]
 80055cc:	4311      	orrs	r1, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6992      	ldr	r2, [r2, #24]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d161      	bne.n	80056ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a38      	ldr	r2, [pc, #224]	; (80056cc <HAL_I2S_Init+0x274>)
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <HAL_I2S_Init+0x278>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_I2S_Init+0x1a4>
 80055f8:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <HAL_I2S_Init+0x27c>)
 80055fa:	e001      	b.n	8005600 <HAL_I2S_Init+0x1a8>
 80055fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	4932      	ldr	r1, [pc, #200]	; (80056d0 <HAL_I2S_Init+0x278>)
 8005608:	428a      	cmp	r2, r1
 800560a:	d101      	bne.n	8005610 <HAL_I2S_Init+0x1b8>
 800560c:	4a31      	ldr	r2, [pc, #196]	; (80056d4 <HAL_I2S_Init+0x27c>)
 800560e:	e001      	b.n	8005614 <HAL_I2S_Init+0x1bc>
 8005610:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005614:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005618:	f023 030f 	bic.w	r3, r3, #15
 800561c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2b      	ldr	r2, [pc, #172]	; (80056d0 <HAL_I2S_Init+0x278>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d101      	bne.n	800562c <HAL_I2S_Init+0x1d4>
 8005628:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <HAL_I2S_Init+0x27c>)
 800562a:	e001      	b.n	8005630 <HAL_I2S_Init+0x1d8>
 800562c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005630:	2202      	movs	r2, #2
 8005632:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <HAL_I2S_Init+0x278>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <HAL_I2S_Init+0x1ea>
 800563e:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <HAL_I2S_Init+0x27c>)
 8005640:	e001      	b.n	8005646 <HAL_I2S_Init+0x1ee>
 8005642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005652:	d003      	beq.n	800565c <HAL_I2S_Init+0x204>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800565c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e001      	b.n	8005668 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005672:	4313      	orrs	r3, r2
 8005674:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800567c:	4313      	orrs	r3, r2
 800567e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005686:	4313      	orrs	r3, r2
 8005688:	b29a      	uxth	r2, r3
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	4313      	orrs	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005694:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <HAL_I2S_Init+0x278>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d101      	bne.n	80056a4 <HAL_I2S_Init+0x24c>
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <HAL_I2S_Init+0x27c>)
 80056a2:	e001      	b.n	80056a8 <HAL_I2S_Init+0x250>
 80056a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056a8:	897a      	ldrh	r2, [r7, #10]
 80056aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	080057cf 	.word	0x080057cf
 80056c8:	cccccccd 	.word	0xcccccccd
 80056cc:	080058e5 	.word	0x080058e5
 80056d0:	40003800 	.word	0x40003800
 80056d4:	40003400 	.word	0x40003400

080056d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10e      	bne.n	8005768 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005758:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff ffb8 	bl	80056d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	b292      	uxth	r2, r2
 8005784:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	1c9a      	adds	r2, r3, #2
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10e      	bne.n	80057c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff93 	bl	80056ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d13a      	bne.n	8005860 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d109      	bne.n	8005808 <I2S_IRQHandler+0x3a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d102      	bne.n	8005808 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ffb4 	bl	8005770 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d126      	bne.n	8005860 <I2S_IRQHandler+0x92>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d11f      	bne.n	8005860 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800582e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f043 0202 	orr.w	r2, r3, #2
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff50 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b03      	cmp	r3, #3
 800586a:	d136      	bne.n	80058da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d109      	bne.n	800588a <I2S_IRQHandler+0xbc>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	d102      	bne.n	800588a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff45 	bl	8005714 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d122      	bne.n	80058da <I2S_IRQHandler+0x10c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d11b      	bne.n	80058da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	f043 0204 	orr.w	r2, r3, #4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ff13 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a92      	ldr	r2, [pc, #584]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80058fe:	4b92      	ldr	r3, [pc, #584]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005900:	e001      	b.n	8005906 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a8b      	ldr	r2, [pc, #556]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d101      	bne.n	8005920 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800591c:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800591e:	e001      	b.n	8005924 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005930:	d004      	beq.n	800593c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 8099 	bne.w	8005a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d107      	bne.n	8005956 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f925 	bl	8005ba0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9c8 	bl	8005d00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d13a      	bne.n	80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d035      	beq.n	80059f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6e      	ldr	r2, [pc, #440]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800598e:	4b6e      	ldr	r3, [pc, #440]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005990:	e001      	b.n	8005996 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4969      	ldr	r1, [pc, #420]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800599e:	428b      	cmp	r3, r1
 80059a0:	d101      	bne.n	80059a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80059a2:	4b69      	ldr	r3, [pc, #420]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059a4:	e001      	b.n	80059aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80059a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	f043 0202 	orr.w	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fe88 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	f040 80c3 	bne.w	8005b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80bd 	beq.w	8005b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a49      	ldr	r2, [pc, #292]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a22:	4b49      	ldr	r3, [pc, #292]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a24:	e001      	b.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4944      	ldr	r1, [pc, #272]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a32:	428b      	cmp	r3, r1
 8005a34:	d101      	bne.n	8005a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005a36:	4b44      	ldr	r3, [pc, #272]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a38:	e001      	b.n	8005a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a44:	2300      	movs	r3, #0
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fe4a 	bl	8005700 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a6c:	e089      	b.n	8005b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d107      	bne.n	8005a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8be 	bl	8005c04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f8fd 	bl	8005c9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d12f      	bne.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d02a      	beq.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ac4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1e      	ldr	r2, [pc, #120]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d101      	bne.n	8005ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ad2:	e001      	b.n	8005ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4919      	ldr	r1, [pc, #100]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ae0:	428b      	cmp	r3, r1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ae6:	e001      	b.n	8005aec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005af0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f043 0202 	orr.w	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fdfa 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d136      	bne.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d031      	beq.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a07      	ldr	r2, [pc, #28]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d101      	bne.n	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b2c:	e001      	b.n	8005b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4902      	ldr	r1, [pc, #8]	; (8005b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b3a:	428b      	cmp	r3, r1
 8005b3c:	d106      	bne.n	8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005b3e:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b40:	e006      	b.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005b42:	bf00      	nop
 8005b44:	40003800 	.word	0x40003800
 8005b48:	40003400 	.word	0x40003400
 8005b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f043 0204 	orr.w	r2, r3, #4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fdc0 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b80:	e000      	b.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b82:	bf00      	nop
}
 8005b84:	bf00      	nop
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	1c99      	adds	r1, r3, #2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6251      	str	r1, [r2, #36]	; 0x24
 8005bb2:	881a      	ldrh	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d113      	bne.n	8005bfa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005be0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff ffc9 	bl	8005b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	1c99      	adds	r1, r3, #2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6251      	str	r1, [r2, #36]	; 0x24
 8005c16:	8819      	ldrh	r1, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <I2SEx_TxISR_I2SExt+0x90>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <I2SEx_TxISR_I2SExt+0x22>
 8005c22:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <I2SEx_TxISR_I2SExt+0x94>)
 8005c24:	e001      	b.n	8005c2a <I2SEx_TxISR_I2SExt+0x26>
 8005c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d121      	bne.n	8005c8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <I2SEx_TxISR_I2SExt+0x90>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d101      	bne.n	8005c54 <I2SEx_TxISR_I2SExt+0x50>
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <I2SEx_TxISR_I2SExt+0x94>)
 8005c52:	e001      	b.n	8005c58 <I2SEx_TxISR_I2SExt+0x54>
 8005c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	490d      	ldr	r1, [pc, #52]	; (8005c94 <I2SEx_TxISR_I2SExt+0x90>)
 8005c60:	428b      	cmp	r3, r1
 8005c62:	d101      	bne.n	8005c68 <I2SEx_TxISR_I2SExt+0x64>
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <I2SEx_TxISR_I2SExt+0x94>)
 8005c66:	e001      	b.n	8005c6c <I2SEx_TxISR_I2SExt+0x68>
 8005c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d106      	bne.n	8005c8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ff81 	bl	8005b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40003800 	.word	0x40003800
 8005c98:	40003400 	.word	0x40003400

08005c9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68d8      	ldr	r0, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	1c99      	adds	r1, r3, #2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005cb4:	b282      	uxth	r2, r0
 8005cb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d113      	bne.n	8005cf8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff4a 	bl	8005b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <I2SEx_RxISR_I2SExt+0x90>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d101      	bne.n	8005d16 <I2SEx_RxISR_I2SExt+0x16>
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <I2SEx_RxISR_I2SExt+0x94>)
 8005d14:	e001      	b.n	8005d1a <I2SEx_RxISR_I2SExt+0x1a>
 8005d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d1a:	68d8      	ldr	r0, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	1c99      	adds	r1, r3, #2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005d26:	b282      	uxth	r2, r0
 8005d28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d121      	bne.n	8005d86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <I2SEx_RxISR_I2SExt+0x90>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <I2SEx_RxISR_I2SExt+0x50>
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <I2SEx_RxISR_I2SExt+0x94>)
 8005d4e:	e001      	b.n	8005d54 <I2SEx_RxISR_I2SExt+0x54>
 8005d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	490d      	ldr	r1, [pc, #52]	; (8005d90 <I2SEx_RxISR_I2SExt+0x90>)
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	d101      	bne.n	8005d64 <I2SEx_RxISR_I2SExt+0x64>
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <I2SEx_RxISR_I2SExt+0x94>)
 8005d62:	e001      	b.n	8005d68 <I2SEx_RxISR_I2SExt+0x68>
 8005d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff03 	bl	8005b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40003800 	.word	0x40003800
 8005d94:	40003400 	.word	0x40003400

08005d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e267      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d075      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005db6:	4b88      	ldr	r3, [pc, #544]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc2:	4b85      	ldr	r3, [pc, #532]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d112      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dce:	4b82      	ldr	r3, [pc, #520]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	4b7e      	ldr	r3, [pc, #504]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d05b      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x108>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d157      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e242      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x74>
 8005dfe:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a75      	ldr	r2, [pc, #468]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e01d      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x98>
 8005e16:	4b70      	ldr	r3, [pc, #448]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6f      	ldr	r2, [pc, #444]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b6d      	ldr	r3, [pc, #436]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6c      	ldr	r2, [pc, #432]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e00b      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e30:	4b69      	ldr	r3, [pc, #420]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d013      	beq.n	8005e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e50:	f7fd fabc 	bl	80033cc <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e58:	f7fd fab8 	bl	80033cc <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	; 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e207      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0xc0>
 8005e76:	e014      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fd faa8 	bl	80033cc <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e80:	f7fd faa4 	bl	80033cc <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	; 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1f3      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e92:	4b51      	ldr	r3, [pc, #324]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0xe8>
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d063      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d11c      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec6:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed2:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_RCC_OscConfig+0x152>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d001      	beq.n	8005eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e1c7      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eea:	4b3b      	ldr	r3, [pc, #236]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4937      	ldr	r1, [pc, #220]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efe:	e03a      	b.n	8005f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f08:	4b34      	ldr	r3, [pc, #208]	; (8005fdc <HAL_RCC_OscConfig+0x244>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fd fa5d 	bl	80033cc <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fd fa59 	bl	80033cc <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e1a8      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f34:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4925      	ldr	r1, [pc, #148]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	600b      	str	r3, [r1, #0]
 8005f48:	e015      	b.n	8005f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <HAL_RCC_OscConfig+0x244>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fd fa3c 	bl	80033cc <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f58:	f7fd fa38 	bl	80033cc <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e187      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d036      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d016      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <HAL_RCC_OscConfig+0x248>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fd fa1c 	bl	80033cc <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fd fa18 	bl	80033cc <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e167      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCC_OscConfig+0x240>)
 8005fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x200>
 8005fb6:	e01b      	b.n	8005ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <HAL_RCC_OscConfig+0x248>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbe:	f7fd fa05 	bl	80033cc <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	e00e      	b.n	8005fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fd fa01 	bl	80033cc <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d907      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e150      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	42470000 	.word	0x42470000
 8005fe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe4:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ea      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8097 	beq.w	800612c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006002:	4b81      	ldr	r3, [pc, #516]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	4b7d      	ldr	r3, [pc, #500]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	4a7c      	ldr	r2, [pc, #496]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	6413      	str	r3, [r2, #64]	; 0x40
 800601e:	4b7a      	ldr	r3, [pc, #488]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602e:	4b77      	ldr	r3, [pc, #476]	; (800620c <HAL_RCC_OscConfig+0x474>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d118      	bne.n	800606c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800603a:	4b74      	ldr	r3, [pc, #464]	; (800620c <HAL_RCC_OscConfig+0x474>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a73      	ldr	r2, [pc, #460]	; (800620c <HAL_RCC_OscConfig+0x474>)
 8006040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006046:	f7fd f9c1 	bl	80033cc <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604e:	f7fd f9bd 	bl	80033cc <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e10c      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006060:	4b6a      	ldr	r3, [pc, #424]	; (800620c <HAL_RCC_OscConfig+0x474>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d106      	bne.n	8006082 <HAL_RCC_OscConfig+0x2ea>
 8006074:	4b64      	ldr	r3, [pc, #400]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	4a63      	ldr	r2, [pc, #396]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	; 0x70
 8006080:	e01c      	b.n	80060bc <HAL_RCC_OscConfig+0x324>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b05      	cmp	r3, #5
 8006088:	d10c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x30c>
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	4a5e      	ldr	r2, [pc, #376]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006090:	f043 0304 	orr.w	r3, r3, #4
 8006094:	6713      	str	r3, [r2, #112]	; 0x70
 8006096:	4b5c      	ldr	r3, [pc, #368]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	4a5b      	ldr	r2, [pc, #364]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
 80060a2:	e00b      	b.n	80060bc <HAL_RCC_OscConfig+0x324>
 80060a4:	4b58      	ldr	r3, [pc, #352]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a8:	4a57      	ldr	r2, [pc, #348]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	6713      	str	r3, [r2, #112]	; 0x70
 80060b0:	4b55      	ldr	r3, [pc, #340]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	4a54      	ldr	r2, [pc, #336]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060b6:	f023 0304 	bic.w	r3, r3, #4
 80060ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d015      	beq.n	80060f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fd f982 	bl	80033cc <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fd f97e 	bl	80033cc <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0cb      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e2:	4b49      	ldr	r3, [pc, #292]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ee      	beq.n	80060cc <HAL_RCC_OscConfig+0x334>
 80060ee:	e014      	b.n	800611a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f0:	f7fd f96c 	bl	80033cc <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f6:	e00a      	b.n	800610e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fd f968 	bl	80033cc <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e0b5      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610e:	4b3e      	ldr	r3, [pc, #248]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ee      	bne.n	80060f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006120:	4b39      	ldr	r3, [pc, #228]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	4a38      	ldr	r2, [pc, #224]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a1 	beq.w	8006278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b08      	cmp	r3, #8
 8006140:	d05c      	beq.n	80061fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d141      	bne.n	80061ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006150:	f7fd f93c 	bl	80033cc <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006158:	f7fd f938 	bl	80033cc <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e087      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616a:	4b27      	ldr	r3, [pc, #156]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	019b      	lsls	r3, r3, #6
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	3b01      	subs	r3, #1
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	061b      	lsls	r3, r3, #24
 800619a:	491b      	ldr	r1, [pc, #108]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 800619c:	4313      	orrs	r3, r2
 800619e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a6:	f7fd f911 	bl	80033cc <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fd f90d 	bl	80033cc <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e05c      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x416>
 80061cc:	e054      	b.n	8006278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d4:	f7fd f8fa 	bl	80033cc <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fd f8f6 	bl	80033cc <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e045      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x470>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x444>
 80061fa:	e03d      	b.n	8006278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d107      	bne.n	8006214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e038      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
 8006208:	40023800 	.word	0x40023800
 800620c:	40007000 	.word	0x40007000
 8006210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_RCC_OscConfig+0x4ec>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d028      	beq.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d121      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623a:	429a      	cmp	r2, r3
 800623c:	d11a      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800624a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800624c:	4293      	cmp	r3, r2
 800624e:	d111      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	3b01      	subs	r3, #1
 800625e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d107      	bne.n	8006274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800

08006288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0cc      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800629c:	4b68      	ldr	r3, [pc, #416]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d90c      	bls.n	80062c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062aa:	4b65      	ldr	r3, [pc, #404]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b63      	ldr	r3, [pc, #396]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0b8      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d020      	beq.n	8006312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062dc:	4b59      	ldr	r3, [pc, #356]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a58      	ldr	r2, [pc, #352]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062f4:	4b53      	ldr	r3, [pc, #332]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006300:	4b50      	ldr	r3, [pc, #320]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	494d      	ldr	r1, [pc, #308]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	4313      	orrs	r3, r2
 8006310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d044      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d107      	bne.n	8006336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	4b47      	ldr	r3, [pc, #284]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d119      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e07f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d003      	beq.n	8006346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006342:	2b03      	cmp	r3, #3
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006346:	4b3f      	ldr	r3, [pc, #252]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e06f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006356:	4b3b      	ldr	r3, [pc, #236]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e067      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 0203 	bic.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4934      	ldr	r1, [pc, #208]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	4313      	orrs	r3, r2
 8006376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006378:	f7fd f828 	bl	80033cc <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	e00a      	b.n	8006396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006380:	f7fd f824 	bl	80033cc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	; 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e04f      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006396:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 020c 	and.w	r2, r3, #12
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1eb      	bne.n	8006380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d20c      	bcs.n	80063d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b22      	ldr	r3, [pc, #136]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e032      	b.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063dc:	4b19      	ldr	r3, [pc, #100]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4916      	ldr	r1, [pc, #88]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	490e      	ldr	r1, [pc, #56]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800640e:	f000 f821 	bl	8006454 <HAL_RCC_GetSysClockFreq>
 8006412:	4602      	mov	r2, r0
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	091b      	lsrs	r3, r3, #4
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	490a      	ldr	r1, [pc, #40]	; (8006448 <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	5ccb      	ldrb	r3, [r1, r3]
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	4a09      	ldr	r2, [pc, #36]	; (800644c <HAL_RCC_ClockConfig+0x1c4>)
 8006428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <HAL_RCC_ClockConfig+0x1c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fc ff88 	bl	8003344 <HAL_InitTick>

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023c00 	.word	0x40023c00
 8006444:	40023800 	.word	0x40023800
 8006448:	0800bcec 	.word	0x0800bcec
 800644c:	2000001c 	.word	0x2000001c
 8006450:	2000004c 	.word	0x2000004c

08006454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006458:	b094      	sub	sp, #80	; 0x50
 800645a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	647b      	str	r3, [r7, #68]	; 0x44
 8006460:	2300      	movs	r3, #0
 8006462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006464:	2300      	movs	r3, #0
 8006466:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800646c:	4b79      	ldr	r3, [pc, #484]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b08      	cmp	r3, #8
 8006476:	d00d      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0x40>
 8006478:	2b08      	cmp	r3, #8
 800647a:	f200 80e1 	bhi.w	8006640 <HAL_RCC_GetSysClockFreq+0x1ec>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0x34>
 8006482:	2b04      	cmp	r3, #4
 8006484:	d003      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0x3a>
 8006486:	e0db      	b.n	8006640 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006488:	4b73      	ldr	r3, [pc, #460]	; (8006658 <HAL_RCC_GetSysClockFreq+0x204>)
 800648a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800648c:	e0db      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800648e:	4b73      	ldr	r3, [pc, #460]	; (800665c <HAL_RCC_GetSysClockFreq+0x208>)
 8006490:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006492:	e0d8      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006494:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800649e:	4b6d      	ldr	r3, [pc, #436]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d063      	beq.n	8006572 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064aa:	4b6a      	ldr	r3, [pc, #424]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	2200      	movs	r2, #0
 80064b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
 80064be:	2300      	movs	r3, #0
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
 80064c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	f04f 0000 	mov.w	r0, #0
 80064ce:	f04f 0100 	mov.w	r1, #0
 80064d2:	0159      	lsls	r1, r3, #5
 80064d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064d8:	0150      	lsls	r0, r2, #5
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4621      	mov	r1, r4
 80064e0:	1a51      	subs	r1, r2, r1
 80064e2:	6139      	str	r1, [r7, #16]
 80064e4:	4629      	mov	r1, r5
 80064e6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064f8:	4659      	mov	r1, fp
 80064fa:	018b      	lsls	r3, r1, #6
 80064fc:	4651      	mov	r1, sl
 80064fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006502:	4651      	mov	r1, sl
 8006504:	018a      	lsls	r2, r1, #6
 8006506:	4651      	mov	r1, sl
 8006508:	ebb2 0801 	subs.w	r8, r2, r1
 800650c:	4659      	mov	r1, fp
 800650e:	eb63 0901 	sbc.w	r9, r3, r1
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800651e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006526:	4690      	mov	r8, r2
 8006528:	4699      	mov	r9, r3
 800652a:	4623      	mov	r3, r4
 800652c:	eb18 0303 	adds.w	r3, r8, r3
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	462b      	mov	r3, r5
 8006534:	eb49 0303 	adc.w	r3, r9, r3
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006546:	4629      	mov	r1, r5
 8006548:	024b      	lsls	r3, r1, #9
 800654a:	4621      	mov	r1, r4
 800654c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006550:	4621      	mov	r1, r4
 8006552:	024a      	lsls	r2, r1, #9
 8006554:	4610      	mov	r0, r2
 8006556:	4619      	mov	r1, r3
 8006558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655a:	2200      	movs	r2, #0
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
 800655e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006564:	f7f9 fe84 	bl	8000270 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4613      	mov	r3, r2
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006570:	e058      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006572:	4b38      	ldr	r3, [pc, #224]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	2200      	movs	r2, #0
 800657a:	4618      	mov	r0, r3
 800657c:	4611      	mov	r1, r2
 800657e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	2300      	movs	r3, #0
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	f04f 0000 	mov.w	r0, #0
 8006594:	f04f 0100 	mov.w	r1, #0
 8006598:	0159      	lsls	r1, r3, #5
 800659a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800659e:	0150      	lsls	r0, r2, #5
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4641      	mov	r1, r8
 80065a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80065aa:	4649      	mov	r1, r9
 80065ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065c4:	ebb2 040a 	subs.w	r4, r2, sl
 80065c8:	eb63 050b 	sbc.w	r5, r3, fp
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	00eb      	lsls	r3, r5, #3
 80065d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065da:	00e2      	lsls	r2, r4, #3
 80065dc:	4614      	mov	r4, r2
 80065de:	461d      	mov	r5, r3
 80065e0:	4643      	mov	r3, r8
 80065e2:	18e3      	adds	r3, r4, r3
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	464b      	mov	r3, r9
 80065e8:	eb45 0303 	adc.w	r3, r5, r3
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065fa:	4629      	mov	r1, r5
 80065fc:	028b      	lsls	r3, r1, #10
 80065fe:	4621      	mov	r1, r4
 8006600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006604:	4621      	mov	r1, r4
 8006606:	028a      	lsls	r2, r1, #10
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	2200      	movs	r2, #0
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	61fa      	str	r2, [r7, #28]
 8006614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006618:	f7f9 fe2a 	bl	8000270 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4613      	mov	r3, r2
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_GetSysClockFreq+0x200>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	3301      	adds	r3, #1
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800663e:	e002      	b.n	8006646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetSysClockFreq+0x204>)
 8006642:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006648:	4618      	mov	r0, r3
 800664a:	3750      	adds	r7, #80	; 0x50
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	00f42400 	.word	0x00f42400
 800665c:	007a1200 	.word	0x007a1200

08006660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006664:	4b03      	ldr	r3, [pc, #12]	; (8006674 <HAL_RCC_GetHCLKFreq+0x14>)
 8006666:	681b      	ldr	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	2000001c 	.word	0x2000001c

08006678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800667c:	f7ff fff0 	bl	8006660 <HAL_RCC_GetHCLKFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	0a9b      	lsrs	r3, r3, #10
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	4903      	ldr	r1, [pc, #12]	; (800669c <HAL_RCC_GetPCLK1Freq+0x24>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	0800bcfc 	.word	0x0800bcfc

080066a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d035      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066c8:	4b62      	ldr	r3, [pc, #392]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ce:	f7fc fe7d 	bl	80033cc <HAL_GetTick>
 80066d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066d4:	e008      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066d6:	f7fc fe79 	bl	80033cc <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0b0      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e8:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	019a      	lsls	r2, r3, #6
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	071b      	lsls	r3, r3, #28
 8006700:	4955      	ldr	r1, [pc, #340]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006702:	4313      	orrs	r3, r2
 8006704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006708:	4b52      	ldr	r3, [pc, #328]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800670e:	f7fc fe5d 	bl	80033cc <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006714:	e008      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006716:	f7fc fe59 	bl	80033cc <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e090      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006728:	4b4b      	ldr	r3, [pc, #300]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 8083 	beq.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	4b44      	ldr	r3, [pc, #272]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	4a43      	ldr	r2, [pc, #268]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800674c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006750:	6413      	str	r3, [r2, #64]	; 0x40
 8006752:	4b41      	ldr	r3, [pc, #260]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800675e:	4b3f      	ldr	r3, [pc, #252]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a3e      	ldr	r2, [pc, #248]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006768:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800676a:	f7fc fe2f 	bl	80033cc <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006770:	e008      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006772:	f7fc fe2b 	bl	80033cc <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e062      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006784:	4b35      	ldr	r3, [pc, #212]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006790:	4b31      	ldr	r3, [pc, #196]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006798:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02f      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d028      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067b8:	4b29      	ldr	r3, [pc, #164]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067be:	4b28      	ldr	r3, [pc, #160]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067c4:	4a24      	ldr	r2, [pc, #144]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067ca:	4b23      	ldr	r3, [pc, #140]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d114      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067d6:	f7fc fdf9 	bl	80033cc <HAL_GetTick>
 80067da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067dc:	e00a      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067de:	f7fc fdf5 	bl	80033cc <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e02a      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f4:	4b18      	ldr	r3, [pc, #96]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0ee      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800680c:	d10d      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006822:	490d      	ldr	r1, [pc, #52]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006824:	4313      	orrs	r3, r2
 8006826:	608b      	str	r3, [r1, #8]
 8006828:	e005      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006830:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006834:	6093      	str	r3, [r2, #8]
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006842:	4905      	ldr	r1, [pc, #20]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006844:	4313      	orrs	r3, r2
 8006846:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	42470068 	.word	0x42470068
 8006858:	40023800 	.word	0x40023800
 800685c:	40007000 	.word	0x40007000
 8006860:	42470e40 	.word	0x42470e40

08006864 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d13e      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006882:	4b23      	ldr	r3, [pc, #140]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d12f      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800689a:	617b      	str	r3, [r7, #20]
          break;
 800689c:	e02f      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068aa:	d108      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068ac:	4b18      	ldr	r3, [pc, #96]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b4:	4a18      	ldr	r2, [pc, #96]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	e007      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068be:	4b14      	ldr	r3, [pc, #80]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068c6:	4a15      	ldr	r2, [pc, #84]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d4:	099b      	lsrs	r3, r3, #6
 80068d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	fb02 f303 	mul.w	r3, r2, r3
 80068e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e8:	0f1b      	lsrs	r3, r3, #28
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	617b      	str	r3, [r7, #20]
          break;
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]
          break;
 80068fc:	bf00      	nop
        }
      }
      break;
 80068fe:	bf00      	nop
    }
  }
  return frequency;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40023800 	.word	0x40023800
 8006914:	00bb8000 	.word	0x00bb8000
 8006918:	007a1200 	.word	0x007a1200
 800691c:	00f42400 	.word	0x00f42400

08006920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07b      	b.n	8006a2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d108      	bne.n	800694c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006942:	d009      	beq.n	8006958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	61da      	str	r2, [r3, #28]
 800694a:	e005      	b.n	8006958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb fe02 	bl	800257c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	ea42 0103 	orr.w	r1, r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	f003 0104 	and.w	r1, r3, #4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	f003 0210 	and.w	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b088      	sub	sp, #32
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_SPI_Transmit+0x22>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e126      	b.n	8006ca2 <HAL_SPI_Transmit+0x270>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a5c:	f7fc fcb6 	bl	80033cc <HAL_GetTick>
 8006a60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d002      	beq.n	8006a78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
 8006a74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a76:	e10b      	b.n	8006c90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_SPI_Transmit+0x52>
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a88:	e102      	b.n	8006c90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad0:	d10f      	bne.n	8006af2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006af0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d007      	beq.n	8006b10 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b18:	d14b      	bne.n	8006bb2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_SPI_Transmit+0xf6>
 8006b22:	8afb      	ldrh	r3, [r7, #22]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d13e      	bne.n	8006ba6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2c:	881a      	ldrh	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	1c9a      	adds	r2, r3, #2
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b4c:	e02b      	b.n	8006ba6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d112      	bne.n	8006b82 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	881a      	ldrh	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	1c9a      	adds	r2, r3, #2
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b80:	e011      	b.n	8006ba6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b82:	f7fc fc23 	bl	80033cc <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d803      	bhi.n	8006b9a <HAL_SPI_Transmit+0x168>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d102      	bne.n	8006ba0 <HAL_SPI_Transmit+0x16e>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ba4:	e074      	b.n	8006c90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1ce      	bne.n	8006b4e <HAL_SPI_Transmit+0x11c>
 8006bb0:	e04c      	b.n	8006c4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_SPI_Transmit+0x18e>
 8006bba:	8afb      	ldrh	r3, [r7, #22]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d140      	bne.n	8006c42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	7812      	ldrb	r2, [r2, #0]
 8006bcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006be6:	e02c      	b.n	8006c42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d113      	bne.n	8006c1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c1c:	e011      	b.n	8006c42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c1e:	f7fc fbd5 	bl	80033cc <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d803      	bhi.n	8006c36 <HAL_SPI_Transmit+0x204>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d102      	bne.n	8006c3c <HAL_SPI_Transmit+0x20a>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c40:	e026      	b.n	8006c90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1cd      	bne.n	8006be8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fbcb 	bl	80073ec <SPI_EndRxTxTransaction>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e000      	b.n	8006c90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc6:	d112      	bne.n	8006cee <HAL_SPI_Receive+0x44>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10e      	bne.n	8006cee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f8f1 	bl	8006ecc <HAL_SPI_TransmitReceive>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e0ea      	b.n	8006ec4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_SPI_Receive+0x52>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e0e3      	b.n	8006ec4 <HAL_SPI_Receive+0x21a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d04:	f7fc fb62 	bl	80033cc <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d002      	beq.n	8006d1c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
 8006d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d1a:	e0ca      	b.n	8006eb2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_SPI_Receive+0x7e>
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d2c:	e0c1      	b.n	8006eb2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2204      	movs	r2, #4
 8006d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d74:	d10f      	bne.n	8006d96 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d007      	beq.n	8006db4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d162      	bne.n	8006e82 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dbc:	e02e      	b.n	8006e1c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d115      	bne.n	8006df8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f103 020c 	add.w	r2, r3, #12
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006df6:	e011      	b.n	8006e1c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df8:	f7fc fae8 	bl	80033cc <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d803      	bhi.n	8006e10 <HAL_SPI_Receive+0x166>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d102      	bne.n	8006e16 <HAL_SPI_Receive+0x16c>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e1a:	e04a      	b.n	8006eb2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1cb      	bne.n	8006dbe <HAL_SPI_Receive+0x114>
 8006e26:	e031      	b.n	8006e8c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d113      	bne.n	8006e5e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	b292      	uxth	r2, r2
 8006e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	1c9a      	adds	r2, r3, #2
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e5c:	e011      	b.n	8006e82 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5e:	f7fc fab5 	bl	80033cc <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d803      	bhi.n	8006e76 <HAL_SPI_Receive+0x1cc>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d102      	bne.n	8006e7c <HAL_SPI_Receive+0x1d2>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e80:	e017      	b.n	8006eb2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1cd      	bne.n	8006e28 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fa45 	bl	8007320 <SPI_EndRxTransaction>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
 8006eae:	e000      	b.n	8006eb2 <HAL_SPI_Receive+0x208>
  }

error :
 8006eb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08c      	sub	sp, #48	; 0x30
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006eda:	2301      	movs	r3, #1
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_SPI_TransmitReceive+0x26>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e18a      	b.n	8007208 <HAL_SPI_TransmitReceive+0x33c>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006efa:	f7fc fa67 	bl	80033cc <HAL_GetTick>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f10:	887b      	ldrh	r3, [r7, #2]
 8006f12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d00f      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x70>
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f22:	d107      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x68>
 8006f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d003      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f3a:	e15b      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x82>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x82>
 8006f48:	887b      	ldrh	r3, [r7, #2]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f54:	e14e      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d003      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2205      	movs	r2, #5
 8006f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	887a      	ldrh	r2, [r7, #2]
 8006f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	887a      	ldrh	r2, [r7, #2]
 8006f80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	887a      	ldrh	r2, [r7, #2]
 8006f8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	887a      	ldrh	r2, [r7, #2]
 8006f92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	d007      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc6:	d178      	bne.n	80070ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x10a>
 8006fd0:	8b7b      	ldrh	r3, [r7, #26]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d166      	bne.n	80070a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	881a      	ldrh	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	1c9a      	adds	r2, r3, #2
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ffa:	e053      	b.n	80070a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b02      	cmp	r3, #2
 8007008:	d11b      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x176>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d016      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x176>
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d113      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d119      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x1b8>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d014      	beq.n	8007084 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	b292      	uxth	r2, r2
 8007066:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	1c9a      	adds	r2, r3, #2
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007080:	2301      	movs	r3, #1
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007084:	f7fc f9a2 	bl	80033cc <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007090:	429a      	cmp	r2, r3
 8007092:	d807      	bhi.n	80070a4 <HAL_SPI_TransmitReceive+0x1d8>
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d003      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070a2:	e0a7      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1a6      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x130>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1a1      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x130>
 80070b8:	e07c      	b.n	80071b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_SPI_TransmitReceive+0x1fc>
 80070c2:	8b7b      	ldrh	r3, [r7, #26]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d16b      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	7812      	ldrb	r2, [r2, #0]
 80070d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ee:	e057      	b.n	80071a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d11c      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x26c>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d017      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x26c>
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d114      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	330c      	adds	r3, #12
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b01      	cmp	r3, #1
 8007144:	d119      	bne.n	800717a <HAL_SPI_TransmitReceive+0x2ae>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d014      	beq.n	800717a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007176:	2301      	movs	r3, #1
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800717a:	f7fc f927 	bl	80033cc <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007186:	429a      	cmp	r2, r3
 8007188:	d803      	bhi.n	8007192 <HAL_SPI_TransmitReceive+0x2c6>
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d102      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x2cc>
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d103      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800719e:	e029      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1a2      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x224>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d19d      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f917 	bl	80073ec <SPI_EndRxTxTransaction>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d006      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071d0:	e010      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	e000      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80071f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007204:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007208:	4618      	mov	r0, r3
 800720a:	3730      	adds	r7, #48	; 0x30
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	4613      	mov	r3, r2
 800721e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007220:	f7fc f8d4 	bl	80033cc <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4413      	add	r3, r2
 800722e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007230:	f7fc f8cc 	bl	80033cc <HAL_GetTick>
 8007234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	015b      	lsls	r3, r3, #5
 800723c:	0d1b      	lsrs	r3, r3, #20
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007246:	e054      	b.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d050      	beq.n	80072f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007250:	f7fc f8bc 	bl	80033cc <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	429a      	cmp	r2, r3
 800725e:	d902      	bls.n	8007266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d13d      	bne.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727e:	d111      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	d004      	beq.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007292:	d107      	bne.n	80072a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d10f      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e017      	b.n	8007312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d19b      	bne.n	8007248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000001c 	.word	0x2000001c

08007320 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007334:	d111      	bne.n	800735a <SPI_EndRxTransaction+0x3a>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733e:	d004      	beq.n	800734a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007348:	d107      	bne.n	800735a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007358:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007362:	d12a      	bne.n	80073ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d012      	beq.n	8007394 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f7ff ff49 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d02d      	beq.n	80073e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007388:	f043 0220 	orr.w	r2, r3, #32
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e026      	b.n	80073e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	2101      	movs	r1, #1
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff ff36 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01a      	beq.n	80073e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f043 0220 	orr.w	r2, r3, #32
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e013      	b.n	80073e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2200      	movs	r2, #0
 80073c2:	2101      	movs	r1, #1
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff ff23 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	f043 0220 	orr.w	r2, r3, #32
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e000      	b.n	80073e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073f8:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <SPI_EndRxTxTransaction+0x7c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1b      	ldr	r2, [pc, #108]	; (800746c <SPI_EndRxTxTransaction+0x80>)
 80073fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007402:	0d5b      	lsrs	r3, r3, #21
 8007404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007408:	fb02 f303 	mul.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007416:	d112      	bne.n	800743e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2200      	movs	r2, #0
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fef4 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d016      	beq.n	800745c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007432:	f043 0220 	orr.w	r2, r3, #32
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e00f      	b.n	800745e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	3b01      	subs	r3, #1
 8007448:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b80      	cmp	r3, #128	; 0x80
 8007456:	d0f2      	beq.n	800743e <SPI_EndRxTxTransaction+0x52>
 8007458:	e000      	b.n	800745c <SPI_EndRxTxTransaction+0x70>
        break;
 800745a:	bf00      	nop
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000001c 	.word	0x2000001c
 800746c:	165e9f81 	.word	0x165e9f81

08007470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007470:	b084      	sub	sp, #16
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	f107 001c 	add.w	r0, r7, #28
 800747e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	2b01      	cmp	r3, #1
 8007486:	d122      	bne.n	80074ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800749c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d105      	bne.n	80074c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9c0 	bl	8007848 <USB_CoreReset>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	e01a      	b.n	8007504 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f9b4 	bl	8007848 <USB_CoreReset>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
 80074f6:	e005      	b.n	8007504 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10b      	bne.n	8007522 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f043 0206 	orr.w	r2, r3, #6
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f043 0220 	orr.w	r2, r3, #32
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800752e:	b004      	add	sp, #16
 8007530:	4770      	bx	lr

08007532 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f043 0201 	orr.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f023 0201 	bic.w	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d115      	bne.n	80075c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075a4:	2001      	movs	r0, #1
 80075a6:	f7fb ff1d 	bl	80033e4 <HAL_Delay>
      ms++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f93a 	bl	800782a <USB_GetMode>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d01e      	beq.n	80075fa <USB_SetCurrentMode+0x84>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b31      	cmp	r3, #49	; 0x31
 80075c0:	d9f0      	bls.n	80075a4 <USB_SetCurrentMode+0x2e>
 80075c2:	e01a      	b.n	80075fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d115      	bne.n	80075f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075d6:	2001      	movs	r0, #1
 80075d8:	f7fb ff04 	bl	80033e4 <HAL_Delay>
      ms++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f921 	bl	800782a <USB_GetMode>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <USB_SetCurrentMode+0x84>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b31      	cmp	r3, #49	; 0x31
 80075f2:	d9f0      	bls.n	80075d6 <USB_SetCurrentMode+0x60>
 80075f4:	e001      	b.n	80075fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e005      	b.n	8007606 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b32      	cmp	r3, #50	; 0x32
 80075fe:	d101      	bne.n	8007604 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a13      	ldr	r2, [pc, #76]	; (8007674 <USB_FlushTxFifo+0x64>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e01b      	b.n	8007668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	daf2      	bge.n	800761e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	019b      	lsls	r3, r3, #6
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4a08      	ldr	r2, [pc, #32]	; (8007674 <USB_FlushTxFifo+0x64>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d901      	bls.n	800765a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e006      	b.n	8007668 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b20      	cmp	r3, #32
 8007664:	d0f0      	beq.n	8007648 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	00030d40 	.word	0x00030d40

08007678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3301      	adds	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <USB_FlushRxFifo+0x5c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e018      	b.n	80076c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	daf2      	bge.n	8007684 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2210      	movs	r2, #16
 80076a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <USB_FlushRxFifo+0x5c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e006      	b.n	80076c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d0f0      	beq.n	80076a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	00030d40 	.word	0x00030d40

080076d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	; 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	4611      	mov	r1, r2
 80076e4:	461a      	mov	r2, r3
 80076e6:	460b      	mov	r3, r1
 80076e8:	71fb      	strb	r3, [r7, #7]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d123      	bne.n	8007746 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076fe:	88bb      	ldrh	r3, [r7, #4]
 8007700:	3303      	adds	r3, #3
 8007702:	089b      	lsrs	r3, r3, #2
 8007704:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007706:	2300      	movs	r3, #0
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	e018      	b.n	800773e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	031a      	lsls	r2, r3, #12
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4413      	add	r3, r2
 8007714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007718:	461a      	mov	r2, r3
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	3301      	adds	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	3301      	adds	r3, #1
 800772a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	3301      	adds	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	3301      	adds	r3, #1
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	429a      	cmp	r2, r3
 8007744:	d3e2      	bcc.n	800770c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3724      	adds	r7, #36	; 0x24
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007754:	b480      	push	{r7}
 8007756:	b08b      	sub	sp, #44	; 0x2c
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	089b      	lsrs	r3, r3, #2
 800776e:	b29b      	uxth	r3, r3
 8007770:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	623b      	str	r3, [r7, #32]
 800777e:	e014      	b.n	80077aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	601a      	str	r2, [r3, #0]
    pDest++;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	3301      	adds	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	3301      	adds	r3, #1
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	3301      	adds	r3, #1
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	3301      	adds	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	3301      	adds	r3, #1
 80077a8:	623b      	str	r3, [r7, #32]
 80077aa:	6a3a      	ldr	r2, [r7, #32]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d3e6      	bcc.n	8007780 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077b2:	8bfb      	ldrh	r3, [r7, #30]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01e      	beq.n	80077f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c2:	461a      	mov	r2, r3
 80077c4:	f107 0310 	add.w	r3, r7, #16
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	701a      	strb	r2, [r3, #0]
      i++;
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	3301      	adds	r3, #1
 80077e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	3301      	adds	r3, #1
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077ea:	8bfb      	ldrh	r3, [r7, #30]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077f0:	8bfb      	ldrh	r3, [r7, #30]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1ea      	bne.n	80077cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	372c      	adds	r7, #44	; 0x2c
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4013      	ands	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800781c:	68fb      	ldr	r3, [r7, #12]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0301 	and.w	r3, r3, #1
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a13      	ldr	r2, [pc, #76]	; (80078ac <USB_CoreReset+0x64>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e01b      	b.n	800789e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	daf2      	bge.n	8007854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f043 0201 	orr.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4a09      	ldr	r2, [pc, #36]	; (80078ac <USB_CoreReset+0x64>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d901      	bls.n	8007890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e006      	b.n	800789e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b01      	cmp	r3, #1
 800789a:	d0f0      	beq.n	800787e <USB_CoreReset+0x36>

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	00030d40 	.word	0x00030d40

080078b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b0:	b084      	sub	sp, #16
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b086      	sub	sp, #24
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078d0:	461a      	mov	r2, r3
 80078d2:	2300      	movs	r3, #0
 80078d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d018      	beq.n	8007938 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d10a      	bne.n	8007922 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800791a:	f043 0304 	orr.w	r3, r3, #4
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	e014      	b.n	800794c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	e009      	b.n	800794c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007946:	f023 0304 	bic.w	r3, r3, #4
 800794a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800794c:	2110      	movs	r1, #16
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe5e 	bl	8007610 <USB_FlushTxFifo>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff fe8a 	bl	8007678 <USB_FlushRxFifo>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	e015      	b.n	80079a0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007980:	461a      	mov	r2, r3
 8007982:	f04f 33ff 	mov.w	r3, #4294967295
 8007986:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007994:	461a      	mov	r2, r3
 8007996:	2300      	movs	r3, #0
 8007998:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3301      	adds	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d3e5      	bcc.n	8007974 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f04f 32ff 	mov.w	r2, #4294967295
 80079b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <USB_HostInit+0x16c>)
 80079ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a13      	ldr	r2, [pc, #76]	; (8007a20 <USB_HostInit+0x170>)
 80079d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80079d8:	e009      	b.n	80079ee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2280      	movs	r2, #128	; 0x80
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a10      	ldr	r2, [pc, #64]	; (8007a24 <USB_HostInit+0x174>)
 80079e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <USB_HostInit+0x178>)
 80079ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f043 0210 	orr.w	r2, r3, #16
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <USB_HostInit+0x17c>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a18:	b004      	add	sp, #16
 8007a1a:	4770      	bx	lr
 8007a1c:	01000200 	.word	0x01000200
 8007a20:	00e00300 	.word	0x00e00300
 8007a24:	00600080 	.word	0x00600080
 8007a28:	004000e0 	.word	0x004000e0
 8007a2c:	a3200008 	.word	0xa3200008

08007a30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d107      	bne.n	8007a82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a7e:	6053      	str	r3, [r2, #4]
 8007a80:	e009      	b.n	8007a96 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d106      	bne.n	8007a96 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f241 7370 	movw	r3, #6000	; 0x1770
 8007a94:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ac4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ad4:	2064      	movs	r0, #100	; 0x64
 8007ad6:	f7fb fc85 	bl	80033e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ae8:	200a      	movs	r0, #10
 8007aea:	f7fb fc7b 	bl	80033e4 <HAL_Delay>

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <USB_DriveVbus+0x44>
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d106      	bne.n	8007b3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b46:	d109      	bne.n	8007b5c <USB_DriveVbus+0x64>
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	0c5b      	lsrs	r3, r3, #17
 8007b88:	f003 0303 	and.w	r3, r3, #3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	b29b      	uxth	r3, r3
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	70fb      	strb	r3, [r7, #3]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70bb      	strb	r3, [r7, #2]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bea:	461a      	mov	r2, r3
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007bf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d87e      	bhi.n	8007cf8 <USB_HC_Init+0x13c>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <USB_HC_Init+0x44>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007cbb 	.word	0x08007cbb
 8007c08:	08007c11 	.word	0x08007c11
 8007c0c:	08007c7d 	.word	0x08007c7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007c22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da10      	bge.n	8007c4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007c4c:	e057      	b.n	8007cfe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d051      	beq.n	8007cfe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	0151      	lsls	r1, r2, #5
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	440a      	add	r2, r1
 8007c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c78:	60d3      	str	r3, [r2, #12]
      break;
 8007c7a:	e040      	b.n	8007cfe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f240 639d 	movw	r3, #1693	; 0x69d
 8007c8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da34      	bge.n	8007d02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007cb8:	e023      	b.n	8007d02 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f240 2325 	movw	r3, #549	; 0x225
 8007ccc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da17      	bge.n	8007d06 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cf0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007cf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007cf6:	e006      	b.n	8007d06 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	77fb      	strb	r3, [r7, #31]
      break;
 8007cfc:	e004      	b.n	8007d08 <USB_HC_Init+0x14c>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e002      	b.n	8007d08 <USB_HC_Init+0x14c>
      break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <USB_HC_Init+0x14c>
      break;
 8007d06:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	2101      	movs	r1, #1
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	6939      	ldr	r1, [r7, #16]
 8007d3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d42:	4313      	orrs	r3, r2
 8007d44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da03      	bge.n	8007d62 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	e001      	b.n	8007d66 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff feff 	bl	8007b6a <USB_GetHostSpeed>
 8007d6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d106      	bne.n	8007d84 <USB_HC_Init+0x1c8>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d003      	beq.n	8007d84 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e001      	b.n	8007d88 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d88:	787b      	ldrb	r3, [r7, #1]
 8007d8a:	059b      	lsls	r3, r3, #22
 8007d8c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d90:	78bb      	ldrb	r3, [r7, #2]
 8007d92:	02db      	lsls	r3, r3, #11
 8007d94:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d9e:	049b      	lsls	r3, r3, #18
 8007da0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007da4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007da6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007dac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	0159      	lsls	r1, r3, #5
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	440b      	add	r3, r1
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dc4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d003      	beq.n	8007dd6 <USB_HC_Init+0x21a>
 8007dce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10f      	bne.n	8007df6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007df4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3720      	adds	r7, #32
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08c      	sub	sp, #48	; 0x30
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02d      	beq.n	8007e86 <USB_HC_StartXfer+0x86>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	791b      	ldrb	r3, [r3, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d129      	bne.n	8007e86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d117      	bne.n	8007e68 <USB_HC_StartXfer+0x68>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	79db      	ldrb	r3, [r3, #7]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <USB_HC_StartXfer+0x48>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	79db      	ldrb	r3, [r3, #7]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d10f      	bne.n	8007e68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	6a3a      	ldr	r2, [r7, #32]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <USB_HC_StartXfer+0x86>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fa0f 	bl	80082a0 <USB_DoPing>
      return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e0f8      	b.n	8008078 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d018      	beq.n	8007ec0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	8912      	ldrh	r2, [r2, #8]
 8007e96:	4413      	add	r3, r2
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	8912      	ldrh	r2, [r2, #8]
 8007e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007ea4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ea6:	8b7b      	ldrh	r3, [r7, #26]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d90b      	bls.n	8007ec4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007eac:	8b7b      	ldrh	r3, [r7, #26]
 8007eae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	8912      	ldrh	r2, [r2, #8]
 8007eb6:	fb03 f202 	mul.w	r2, r3, r2
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	611a      	str	r2, [r3, #16]
 8007ebe:	e001      	b.n	8007ec4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	78db      	ldrb	r3, [r3, #3]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	8912      	ldrh	r2, [r2, #8]
 8007ed2:	fb03 f202 	mul.w	r2, r3, r2
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	611a      	str	r2, [r3, #16]
 8007eda:	e003      	b.n	8007ee4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	695a      	ldr	r2, [r3, #20]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eee:	04d9      	lsls	r1, r3, #19
 8007ef0:	4b63      	ldr	r3, [pc, #396]	; (8008080 <USB_HC_StartXfer+0x280>)
 8007ef2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ef4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	7a9b      	ldrb	r3, [r3, #10]
 8007efa:	075b      	lsls	r3, r3, #29
 8007efc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f00:	69f9      	ldr	r1, [r7, #28]
 8007f02:	0148      	lsls	r0, r1, #5
 8007f04:	6a39      	ldr	r1, [r7, #32]
 8007f06:	4401      	add	r1, r0
 8007f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	68d9      	ldr	r1, [r3, #12]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	460a      	mov	r2, r1
 8007f28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bf0c      	ite	eq
 8007f3a:	2301      	moveq	r3, #1
 8007f3c:	2300      	movne	r3, #0
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	0151      	lsls	r1, r2, #5
 8007f54:	6a3a      	ldr	r2, [r7, #32]
 8007f56:	440a      	add	r2, r1
 8007f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	7e7b      	ldrb	r3, [r7, #25]
 8007f72:	075b      	lsls	r3, r3, #29
 8007f74:	69f9      	ldr	r1, [r7, #28]
 8007f76:	0148      	lsls	r0, r1, #5
 8007f78:	6a39      	ldr	r1, [r7, #32]
 8007f7a:	4401      	add	r1, r0
 8007f7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f80:	4313      	orrs	r3, r2
 8007f82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	78db      	ldrb	r3, [r3, #3]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	e003      	b.n	8007fb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fbc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fca:	461a      	mov	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e04e      	b.n	8008078 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	78db      	ldrb	r3, [r3, #3]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d149      	bne.n	8008076 <USB_HC_StartXfer+0x276>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d045      	beq.n	8008076 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	79db      	ldrb	r3, [r3, #7]
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d830      	bhi.n	8008054 <USB_HC_StartXfer+0x254>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USB_HC_StartXfer+0x1f8>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	0800802d 	.word	0x0800802d
 8008000:	08008009 	.word	0x08008009
 8008004:	0800802d 	.word	0x0800802d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	3303      	adds	r3, #3
 800800e:	089b      	lsrs	r3, r3, #2
 8008010:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008012:	8afa      	ldrh	r2, [r7, #22]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	b29b      	uxth	r3, r3
 800801a:	429a      	cmp	r2, r3
 800801c:	d91c      	bls.n	8008058 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f043 0220 	orr.w	r2, r3, #32
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	619a      	str	r2, [r3, #24]
        }
        break;
 800802a:	e015      	b.n	8008058 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	3303      	adds	r3, #3
 8008032:	089b      	lsrs	r3, r3, #2
 8008034:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008036:	8afa      	ldrh	r2, [r7, #22]
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	b29b      	uxth	r3, r3
 8008042:	429a      	cmp	r2, r3
 8008044:	d90a      	bls.n	800805c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	619a      	str	r2, [r3, #24]
        }
        break;
 8008052:	e003      	b.n	800805c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008054:	bf00      	nop
 8008056:	e002      	b.n	800805e <USB_HC_StartXfer+0x25e>
        break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <USB_HC_StartXfer+0x25e>
        break;
 800805c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	68d9      	ldr	r1, [r3, #12]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	785a      	ldrb	r2, [r3, #1]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	b29b      	uxth	r3, r3
 800806c:	2000      	movs	r0, #0
 800806e:	9000      	str	r0, [sp, #0]
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fb31 	bl	80076d8 <USB_WritePacket>
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3728      	adds	r7, #40	; 0x28
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	1ff80000 	.word	0x1ff80000

08008084 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	b29b      	uxth	r3, r3
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b089      	sub	sp, #36	; 0x24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	0c9b      	lsrs	r3, r3, #18
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	0fdb      	lsrs	r3, r3, #31
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d104      	bne.n	8008100 <USB_HC_Halt+0x5a>
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e0c8      	b.n	8008292 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <USB_HC_Halt+0x66>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d163      	bne.n	80081d4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	440a      	add	r2, r1
 8008122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800812a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b00      	cmp	r3, #0
 8008136:	f040 80ab 	bne.w	8008290 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d133      	bne.n	80081ae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	440a      	add	r2, r1
 800815c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008164:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	440a      	add	r2, r1
 800817c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008184:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008192:	d81d      	bhi.n	80081d0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081aa:	d0ec      	beq.n	8008186 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081ac:	e070      	b.n	8008290 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	69fa      	ldr	r2, [r7, #28]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081ce:	e05f      	b.n	8008290 <USB_HC_Halt+0x1ea>
            break;
 80081d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081d2:	e05d      	b.n	8008290 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d133      	bne.n	800826c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	440a      	add	r2, r1
 800821a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800821e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008222:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	440a      	add	r2, r1
 800823a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800823e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008242:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008250:	d81d      	bhi.n	800828e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008268:	d0ec      	beq.n	8008244 <USB_HC_Halt+0x19e>
 800826a:	e011      	b.n	8008290 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e000      	b.n	8008290 <USB_HC_Halt+0x1ea>
          break;
 800828e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3724      	adds	r7, #36	; 0x24
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
	...

080082a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80082b4:	2301      	movs	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	04da      	lsls	r2, r3, #19
 80082bc:	4b15      	ldr	r3, [pc, #84]	; (8008314 <USB_DoPing+0x74>)
 80082be:	4013      	ands	r3, r2
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fe:	461a      	mov	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	1ff80000 	.word	0x1ff80000

08008318 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f911 	bl	8007554 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008332:	2110      	movs	r1, #16
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff f96b 	bl	8007610 <USB_FlushTxFifo>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff f997 	bl	8007678 <USB_FlushRxFifo>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008354:	2300      	movs	r3, #0
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	e01f      	b.n	800839a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008370:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008378:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008380:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	4413      	add	r3, r2
 800838a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838e:	461a      	mov	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	3301      	adds	r3, #1
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b0f      	cmp	r3, #15
 800839e:	d9dc      	bls.n	800835a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
 80083a4:	e034      	b.n	8008410 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	461a      	mov	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ec:	d80c      	bhi.n	8008408 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008404:	d0ec      	beq.n	80083e0 <USB_StopHost+0xc8>
 8008406:	e000      	b.n	800840a <USB_StopHost+0xf2>
        break;
 8008408:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	3301      	adds	r3, #1
 800840e:	61bb      	str	r3, [r7, #24]
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b0f      	cmp	r3, #15
 8008414:	d9c7      	bls.n	80083a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800841c:	461a      	mov	r2, r3
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f04f 32ff 	mov.w	r2, #4294967295
 800842a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff f880 	bl	8007532 <USB_EnableGlobalInt>

  return ret;
 8008432:	7ffb      	ldrb	r3, [r7, #31]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af04      	add	r7, sp, #16
 8008442:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008444:	2301      	movs	r3, #1
 8008446:	2202      	movs	r2, #2
 8008448:	2102      	movs	r1, #2
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fc66 	bl	8008d1c <USBH_FindInterface>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	2bff      	cmp	r3, #255	; 0xff
 8008458:	d002      	beq.n	8008460 <USBH_CDC_InterfaceInit+0x24>
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d901      	bls.n	8008464 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008460:	2302      	movs	r3, #2
 8008462:	e13d      	b.n	80086e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fc3b 	bl	8008ce4 <USBH_SelectInterface>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008478:	2302      	movs	r3, #2
 800847a:	e131      	b.n	80086e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008482:	2050      	movs	r0, #80	; 0x50
 8008484:	f002 fafa 	bl	800aa7c <malloc>
 8008488:	4603      	mov	r3, r0
 800848a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800849c:	2302      	movs	r3, #2
 800849e:	e11f      	b.n	80086e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80084a0:	2250      	movs	r2, #80	; 0x50
 80084a2:	2100      	movs	r1, #0
 80084a4:	68b8      	ldr	r0, [r7, #8]
 80084a6:	f002 faf9 	bl	800aa9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	211a      	movs	r1, #26
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b25b      	sxtb	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	da15      	bge.n	80084ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	211a      	movs	r1, #26
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	4413      	add	r3, r2
 80084ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	211a      	movs	r1, #26
 80084de:	fb01 f303 	mul.w	r3, r1, r3
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 ff2c 	bl	800a352 <USBH_AllocPipe>
 80084fa:	4603      	mov	r3, r0
 80084fc:	461a      	mov	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7819      	ldrb	r1, [r3, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	7858      	ldrb	r0, [r3, #1]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	8952      	ldrh	r2, [r2, #10]
 800851a:	9202      	str	r2, [sp, #8]
 800851c:	2203      	movs	r2, #3
 800851e:	9201      	str	r2, [sp, #4]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	4623      	mov	r3, r4
 8008524:	4602      	mov	r2, r0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 fee4 	bl	800a2f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f002 f9f3 	bl	800a920 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800853a:	2300      	movs	r3, #0
 800853c:	2200      	movs	r2, #0
 800853e:	210a      	movs	r1, #10
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fbeb 	bl	8008d1c <USBH_FindInterface>
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2bff      	cmp	r3, #255	; 0xff
 800854e:	d002      	beq.n	8008556 <USBH_CDC_InterfaceInit+0x11a>
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d901      	bls.n	800855a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008556:	2302      	movs	r3, #2
 8008558:	e0c2      	b.n	80086e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	211a      	movs	r1, #26
 8008560:	fb01 f303 	mul.w	r3, r1, r3
 8008564:	4413      	add	r3, r2
 8008566:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	b25b      	sxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	da16      	bge.n	80085a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	211a      	movs	r1, #26
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	4413      	add	r3, r2
 800857e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	211a      	movs	r1, #26
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008598:	881a      	ldrh	r2, [r3, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	835a      	strh	r2, [r3, #26]
 800859e:	e015      	b.n	80085cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	211a      	movs	r1, #26
 80085a6:	fb01 f303 	mul.w	r3, r1, r3
 80085aa:	4413      	add	r3, r2
 80085ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	211a      	movs	r1, #26
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085c6:	881a      	ldrh	r2, [r3, #0]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	211a      	movs	r1, #26
 80085d2:	fb01 f303 	mul.w	r3, r1, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da16      	bge.n	8008612 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	211a      	movs	r1, #26
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	211a      	movs	r1, #26
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	4413      	add	r3, r2
 8008606:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800860a:	881a      	ldrh	r2, [r3, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	835a      	strh	r2, [r3, #26]
 8008610:	e015      	b.n	800863e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	211a      	movs	r1, #26
 8008618:	fb01 f303 	mul.w	r3, r1, r3
 800861c:	4413      	add	r3, r2
 800861e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008622:	781a      	ldrb	r2, [r3, #0]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	211a      	movs	r1, #26
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008638:	881a      	ldrh	r2, [r3, #0]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	7b9b      	ldrb	r3, [r3, #14]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fe84 	bl	800a352 <USBH_AllocPipe>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	7bdb      	ldrb	r3, [r3, #15]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 fe7a 	bl	800a352 <USBH_AllocPipe>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	7b59      	ldrb	r1, [r3, #13]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	7b98      	ldrb	r0, [r3, #14]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	8b12      	ldrh	r2, [r2, #24]
 800867e:	9202      	str	r2, [sp, #8]
 8008680:	2202      	movs	r2, #2
 8008682:	9201      	str	r2, [sp, #4]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	4623      	mov	r3, r4
 8008688:	4602      	mov	r2, r0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fe32 	bl	800a2f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	7b19      	ldrb	r1, [r3, #12]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	7bd8      	ldrb	r0, [r3, #15]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	8b52      	ldrh	r2, [r2, #26]
 80086a8:	9202      	str	r2, [sp, #8]
 80086aa:	2202      	movs	r2, #2
 80086ac:	9201      	str	r2, [sp, #4]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	4623      	mov	r3, r4
 80086b2:	4602      	mov	r2, r0
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fe1d 	bl	800a2f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	7b5b      	ldrb	r3, [r3, #13]
 80086c6:	2200      	movs	r2, #0
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f002 f928 	bl	800a920 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	7b1b      	ldrb	r3, [r3, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f002 f921 	bl	800a920 <USBH_LL_SetToggle>

  return USBH_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd90      	pop	{r4, r7, pc}

080086e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fe12 	bl	800a332 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fe3d 	bl	800a394 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	7b1b      	ldrb	r3, [r3, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7b1b      	ldrb	r3, [r3, #12]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 fdff 	bl	800a332 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	7b1b      	ldrb	r3, [r3, #12]
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fe2a 	bl	800a394 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	7b5b      	ldrb	r3, [r3, #13]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00e      	beq.n	800876c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	7b5b      	ldrb	r3, [r3, #13]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 fdec 	bl	800a332 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	7b5b      	ldrb	r3, [r3, #13]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 fe17 	bl	800a394 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	4618      	mov	r0, r3
 8008782:	f002 f983 	bl	800aa8c <free>
    phost->pActiveClass->pData = 0U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800878c:	2200      	movs	r2, #0
 800878e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3340      	adds	r3, #64	; 0x40
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f8b1 	bl	800891a <GetLineCoding>
 80087b8:	4603      	mov	r3, r0
 80087ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d105      	bne.n	80087ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087c8:	2102      	movs	r1, #2
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d877      	bhi.n	80088ec <USBH_CDC_Process+0x114>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <USBH_CDC_Process+0x2c>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	08008819 	.word	0x08008819
 8008808:	0800881f 	.word	0x0800881f
 800880c:	0800884f 	.word	0x0800884f
 8008810:	080088c3 	.word	0x080088c3
 8008814:	080088d1 	.word	0x080088d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
      break;
 800881c:	e06d      	b.n	80088fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f897 	bl	8008958 <SetLineCoding>
 800882a:	4603      	mov	r3, r0
 800882c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d104      	bne.n	800883e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800883c:	e058      	b.n	80088f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d055      	beq.n	80088f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2204      	movs	r2, #4
 8008848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800884c:	e050      	b.n	80088f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3340      	adds	r3, #64	; 0x40
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f860 	bl	800891a <GetLineCoding>
 800885a:	4603      	mov	r3, r0
 800885c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d126      	bne.n	80088b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	429a      	cmp	r2, r3
 800887a:	d13b      	bne.n	80088f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008886:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008888:	429a      	cmp	r2, r3
 800888a:	d133      	bne.n	80088f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008896:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008898:	429a      	cmp	r2, r3
 800889a:	d12b      	bne.n	80088f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d124      	bne.n	80088f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f958 	bl	8008b60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088b0:	e020      	b.n	80088f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d01d      	beq.n	80088f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2204      	movs	r2, #4
 80088bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80088c0:	e018      	b.n	80088f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f867 	bl	8008996 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f8da 	bl	8008a82 <CDC_ProcessReception>
      break;
 80088ce:	e014      	b.n	80088fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 ffef 	bl	80098b6 <USBH_ClrFeature>
 80088d8:	4603      	mov	r3, r0
 80088da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80088ea:	e005      	b.n	80088f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80088ec:	bf00      	nop
 80088ee:	e004      	b.n	80088fa <USBH_CDC_Process+0x122>
      break;
 80088f0:	bf00      	nop
 80088f2:	e002      	b.n	80088fa <USBH_CDC_Process+0x122>
      break;
 80088f4:	bf00      	nop
 80088f6:	e000      	b.n	80088fa <USBH_CDC_Process+0x122>
      break;
 80088f8:	bf00      	nop

  }

  return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	22a1      	movs	r2, #161	; 0xa1
 8008928:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2221      	movs	r2, #33	; 0x21
 800892e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2207      	movs	r2, #7
 8008940:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2207      	movs	r2, #7
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fa81 	bl	8009e50 <USBH_CtlReq>
 800894e:	4603      	mov	r3, r0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2221      	movs	r2, #33	; 0x21
 8008966:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2207      	movs	r2, #7
 800897e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2207      	movs	r2, #7
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fa62 	bl	8009e50 <USBH_CtlReq>
 800898c:	4603      	mov	r3, r0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b086      	sub	sp, #24
 800899a:	af02      	add	r7, sp, #8
 800899c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d002      	beq.n	80089bc <CDC_ProcessTransmission+0x26>
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d023      	beq.n	8008a02 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80089ba:	e05e      	b.n	8008a7a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	8b12      	ldrh	r2, [r2, #24]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d90b      	bls.n	80089e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	69d9      	ldr	r1, [r3, #28]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8b1a      	ldrh	r2, [r3, #24]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	7b5b      	ldrb	r3, [r3, #13]
 80089d4:	2001      	movs	r0, #1
 80089d6:	9000      	str	r0, [sp, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fc48 	bl	800a26e <USBH_BulkSendData>
 80089de:	e00b      	b.n	80089f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	7b5b      	ldrb	r3, [r3, #13]
 80089ee:	2001      	movs	r0, #1
 80089f0:	9000      	str	r0, [sp, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fc3b 	bl	800a26e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a00:	e03b      	b.n	8008a7a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	7b5b      	ldrb	r3, [r3, #13]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 ff5f 	bl	800a8cc <USBH_LL_GetURBState>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a12:	7afb      	ldrb	r3, [r7, #11]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d128      	bne.n	8008a6a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	8b12      	ldrh	r2, [r2, #24]
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d90e      	bls.n	8008a42 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	8b12      	ldrh	r2, [r2, #24]
 8008a2c:	1a9a      	subs	r2, r3, r2
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	8b12      	ldrh	r2, [r2, #24]
 8008a3a:	441a      	add	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	61da      	str	r2, [r3, #28]
 8008a40:	e002      	b.n	8008a48 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a58:	e00e      	b.n	8008a78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f868 	bl	8008b38 <USBH_CDC_TransmitCallback>
      break;
 8008a68:	e006      	b.n	8008a78 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d103      	bne.n	8008a78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a78:	bf00      	nop
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d002      	beq.n	8008aa8 <CDC_ProcessReception+0x26>
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d00e      	beq.n	8008ac4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008aa6:	e043      	b.n	8008b30 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	6a19      	ldr	r1, [r3, #32]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	8b5a      	ldrh	r2, [r3, #26]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	7b1b      	ldrb	r3, [r3, #12]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 fbff 	bl	800a2b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2204      	movs	r2, #4
 8008abe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ac2:	e035      	b.n	8008b30 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	7b1b      	ldrb	r3, [r3, #12]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 fefe 	bl	800a8cc <USBH_LL_GetURBState>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008ad4:	7cfb      	ldrb	r3, [r7, #19]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d129      	bne.n	8008b2e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	7b1b      	ldrb	r3, [r3, #12]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fe61 	bl	800a7a8 <USBH_LL_GetLastXferSize>
 8008ae6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d016      	beq.n	8008b20 <CDC_ProcessReception+0x9e>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	8b5b      	ldrh	r3, [r3, #26]
 8008af6:	461a      	mov	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d910      	bls.n	8008b20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	441a      	add	r2, r3
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2203      	movs	r2, #3
 8008b1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008b1e:	e006      	b.n	8008b2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f80f 	bl	8008b4c <USBH_CDC_ReceiveCallback>
      break;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	bf00      	nop
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e029      	b.n	8008be0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	79fa      	ldrb	r2, [r7, #7]
 8008b90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f81f 	bl	8008be8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f001 fd31 	bl	800a640 <USBH_LL_Init>

  return USBH_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e009      	b.n	8008c0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	33e0      	adds	r3, #224	; 0xe0
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	2200      	movs	r2, #0
 8008c06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b0f      	cmp	r3, #15
 8008c12:	d9f2      	bls.n	8008bfa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	e009      	b.n	8008c2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d3f1      	bcc.n	8008c1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2240      	movs	r2, #64	; 0x40
 8008c5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d016      	beq.n	8008cd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10e      	bne.n	8008ccc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cb4:	1c59      	adds	r1, r3, #1
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	33de      	adds	r3, #222	; 0xde
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
 8008cca:	e004      	b.n	8008cd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	e001      	b.n	8008cd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d204      	bcs.n	8008d0a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008d08:	e001      	b.n	8008d0e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b087      	sub	sp, #28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	4608      	mov	r0, r1
 8008d26:	4611      	mov	r1, r2
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	70fb      	strb	r3, [r7, #3]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70bb      	strb	r3, [r7, #2]
 8008d32:	4613      	mov	r3, r2
 8008d34:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d44:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d46:	e025      	b.n	8008d94 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	221a      	movs	r2, #26
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	3308      	adds	r3, #8
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	3302      	adds	r3, #2
 8008d58:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d002      	beq.n	8008d6a <USBH_FindInterface+0x4e>
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	2bff      	cmp	r3, #255	; 0xff
 8008d68:	d111      	bne.n	8008d8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d6e:	78ba      	ldrb	r2, [r7, #2]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d002      	beq.n	8008d7a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d74:	78bb      	ldrb	r3, [r7, #2]
 8008d76:	2bff      	cmp	r3, #255	; 0xff
 8008d78:	d109      	bne.n	8008d8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d7e:	787a      	ldrb	r2, [r7, #1]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d002      	beq.n	8008d8a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d84:	787b      	ldrb	r3, [r7, #1]
 8008d86:	2bff      	cmp	r3, #255	; 0xff
 8008d88:	d101      	bne.n	8008d8e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	e006      	b.n	8008d9c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	3301      	adds	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d9d6      	bls.n	8008d48 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d9a:	23ff      	movs	r3, #255	; 0xff
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 fc81 	bl	800a6b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008db6:	2101      	movs	r1, #1
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fd9a 	bl	800a8f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af04      	add	r7, sp, #16
 8008dce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d102      	bne.n	8008dea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2203      	movs	r2, #3
 8008de8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b0b      	cmp	r3, #11
 8008df2:	f200 81be 	bhi.w	8009172 <USBH_Process+0x3aa>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <USBH_Process+0x34>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e2d 	.word	0x08008e2d
 8008e00:	08008e5f 	.word	0x08008e5f
 8008e04:	08008ec7 	.word	0x08008ec7
 8008e08:	0800910d 	.word	0x0800910d
 8008e0c:	08009173 	.word	0x08009173
 8008e10:	08008f6b 	.word	0x08008f6b
 8008e14:	080090b3 	.word	0x080090b3
 8008e18:	08008fa1 	.word	0x08008fa1
 8008e1c:	08008fc1 	.word	0x08008fc1
 8008e20:	08008fe1 	.word	0x08008fe1
 8008e24:	08009025 	.word	0x08009025
 8008e28:	080090f5 	.word	0x080090f5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 819e 	beq.w	8009176 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e40:	20c8      	movs	r0, #200	; 0xc8
 8008e42:	f001 fd9d 	bl	800a980 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fc93 	bl	800a772 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e5c:	e18b      	b.n	8009176 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d107      	bne.n	8008e78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e76:	e18d      	b.n	8009194 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e82:	d914      	bls.n	8008eae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d903      	bls.n	8008ea6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	220d      	movs	r2, #13
 8008ea2:	701a      	strb	r2, [r3, #0]
      break;
 8008ea4:	e176      	b.n	8009194 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
      break;
 8008eac:	e172      	b.n	8009194 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008eb4:	f103 020a 	add.w	r2, r3, #10
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008ebe:	200a      	movs	r0, #10
 8008ec0:	f001 fd5e 	bl	800a980 <USBH_Delay>
      break;
 8008ec4:	e166      	b.n	8009194 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008edc:	2064      	movs	r0, #100	; 0x64
 8008ede:	f001 fd4f 	bl	800a980 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 fc1e 	bl	800a724 <USBH_LL_GetSpeed>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2205      	movs	r2, #5
 8008ef6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ef8:	2100      	movs	r1, #0
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fa29 	bl	800a352 <USBH_AllocPipe>
 8008f00:	4603      	mov	r3, r0
 8008f02:	461a      	mov	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fa21 	bl	800a352 <USBH_AllocPipe>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7919      	ldrb	r1, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f2c:	b292      	uxth	r2, r2
 8008f2e:	9202      	str	r2, [sp, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	9201      	str	r2, [sp, #4]
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	4603      	mov	r3, r0
 8008f38:	2280      	movs	r2, #128	; 0x80
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f9da 	bl	800a2f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7959      	ldrb	r1, [r3, #5]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f54:	b292      	uxth	r2, r2
 8008f56:	9202      	str	r2, [sp, #8]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	9201      	str	r2, [sp, #4]
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2200      	movs	r2, #0
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 f9c6 	bl	800a2f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f68:	e114      	b.n	8009194 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f918 	bl	80091a0 <USBH_HandleEnum>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 80fe 	bne.w	800917a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d103      	bne.n	8008f98 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2208      	movs	r2, #8
 8008f94:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f96:	e0f0      	b.n	800917a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	701a      	strb	r2, [r3, #0]
      break;
 8008f9e:	e0ec      	b.n	800917a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80e9 	beq.w	800917e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2208      	movs	r2, #8
 8008fbc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008fbe:	e0de      	b.n	800917e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fc2c 	bl	8009828 <USBH_SetCfg>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 80d5 	bne.w	8009182 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2209      	movs	r2, #9
 8008fdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fde:	e0d0      	b.n	8009182 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d016      	beq.n	800901c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc3c 	bl	800986e <USBH_SetFeature>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	220a      	movs	r2, #10
 8009006:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009008:	e0bd      	b.n	8009186 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	f040 80b9 	bne.w	8009186 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	220a      	movs	r2, #10
 8009018:	701a      	strb	r2, [r3, #0]
      break;
 800901a:	e0b4      	b.n	8009186 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	220a      	movs	r2, #10
 8009020:	701a      	strb	r2, [r3, #0]
      break;
 8009022:	e0b0      	b.n	8009186 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80ad 	beq.w	800918a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]
 800903c:	e016      	b.n	800906c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800903e:	7bfa      	ldrb	r2, [r7, #15]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	32de      	adds	r2, #222	; 0xde
 8009044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009048:	791a      	ldrb	r2, [r3, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009050:	429a      	cmp	r2, r3
 8009052:	d108      	bne.n	8009066 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009054:	7bfa      	ldrb	r2, [r7, #15]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	32de      	adds	r2, #222	; 0xde
 800905a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009064:	e005      	b.n	8009072 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	3301      	adds	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0e5      	beq.n	800903e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d016      	beq.n	80090aa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2206      	movs	r2, #6
 8009092:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800909a:	2103      	movs	r1, #3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090a0:	e073      	b.n	800918a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	220d      	movs	r2, #13
 80090a6:	701a      	strb	r2, [r3, #0]
      break;
 80090a8:	e06f      	b.n	800918a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	220d      	movs	r2, #13
 80090ae:	701a      	strb	r2, [r3, #0]
      break;
 80090b0:	e06b      	b.n	800918a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d017      	beq.n	80090ec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
 80090c8:	4603      	mov	r3, r0
 80090ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d103      	bne.n	80090dc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	220b      	movs	r2, #11
 80090d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090da:	e058      	b.n	800918e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d154      	bne.n	800918e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	220d      	movs	r2, #13
 80090e8:	701a      	strb	r2, [r3, #0]
      break;
 80090ea:	e050      	b.n	800918e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	220d      	movs	r2, #13
 80090f0:	701a      	strb	r2, [r3, #0]
      break;
 80090f2:	e04c      	b.n	800918e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d049      	beq.n	8009192 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
      }
      break;
 800910a:	e042      	b.n	8009192 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff fd67 	bl	8008be8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800913e:	2b00      	cmp	r3, #0
 8009140:	d005      	beq.n	800914e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009148:	2105      	movs	r1, #5
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b01      	cmp	r3, #1
 8009158:	d107      	bne.n	800916a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff fe20 	bl	8008da8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009168:	e014      	b.n	8009194 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 faa4 	bl	800a6b8 <USBH_LL_Start>
      break;
 8009170:	e010      	b.n	8009194 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009172:	bf00      	nop
 8009174:	e00e      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 8009176:	bf00      	nop
 8009178:	e00c      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 800917a:	bf00      	nop
 800917c:	e00a      	b.n	8009194 <USBH_Process+0x3cc>
    break;
 800917e:	bf00      	nop
 8009180:	e008      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 8009182:	bf00      	nop
 8009184:	e006      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 8009186:	bf00      	nop
 8009188:	e004      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 800918a:	bf00      	nop
 800918c:	e002      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <USBH_Process+0x3cc>
      break;
 8009192:	bf00      	nop
  }
  return USBH_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop

080091a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af04      	add	r7, sp, #16
 80091a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091a8:	2301      	movs	r3, #1
 80091aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	f200 81c1 	bhi.w	800953c <USBH_HandleEnum+0x39c>
 80091ba:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <USBH_HandleEnum+0x20>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	080091e1 	.word	0x080091e1
 80091c4:	0800929f 	.word	0x0800929f
 80091c8:	08009309 	.word	0x08009309
 80091cc:	08009397 	.word	0x08009397
 80091d0:	08009401 	.word	0x08009401
 80091d4:	08009471 	.word	0x08009471
 80091d8:	080094b7 	.word	0x080094b7
 80091dc:	080094fd 	.word	0x080094fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80091e0:	2108      	movs	r1, #8
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa50 	bl	8009688 <USBH_Get_DevDesc>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d130      	bne.n	8009254 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7919      	ldrb	r1, [r3, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009216:	b292      	uxth	r2, r2
 8009218:	9202      	str	r2, [sp, #8]
 800921a:	2200      	movs	r2, #0
 800921c:	9201      	str	r2, [sp, #4]
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	4603      	mov	r3, r0
 8009222:	2280      	movs	r2, #128	; 0x80
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f865 	bl	800a2f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	7959      	ldrb	r1, [r3, #5]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800923e:	b292      	uxth	r2, r2
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	9201      	str	r2, [sp, #4]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4603      	mov	r3, r0
 800924a:	2200      	movs	r2, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 f851 	bl	800a2f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009252:	e175      	b.n	8009540 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b03      	cmp	r3, #3
 8009258:	f040 8172 	bne.w	8009540 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009262:	3301      	adds	r3, #1
 8009264:	b2da      	uxtb	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009272:	2b03      	cmp	r3, #3
 8009274:	d903      	bls.n	800927e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	220d      	movs	r2, #13
 800927a:	701a      	strb	r2, [r3, #0]
      break;
 800927c:	e160      	b.n	8009540 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	795b      	ldrb	r3, [r3, #5]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f885 	bl	800a394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	791b      	ldrb	r3, [r3, #4]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f87f 	bl	800a394 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	701a      	strb	r2, [r3, #0]
      break;
 800929c:	e150      	b.n	8009540 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800929e:	2112      	movs	r1, #18
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9f1 	bl	8009688 <USBH_Get_DevDesc>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092b6:	e145      	b.n	8009544 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	f040 8142 	bne.w	8009544 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092c6:	3301      	adds	r3, #1
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d903      	bls.n	80092e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	220d      	movs	r2, #13
 80092de:	701a      	strb	r2, [r3, #0]
      break;
 80092e0:	e130      	b.n	8009544 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	795b      	ldrb	r3, [r3, #5]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f853 	bl	800a394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	791b      	ldrb	r3, [r3, #4]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 f84d 	bl	800a394 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	701a      	strb	r2, [r3, #0]
      break;
 8009306:	e11d      	b.n	8009544 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009308:	2101      	movs	r1, #1
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa68 	bl	80097e0 <USBH_SetAddress>
 8009310:	4603      	mov	r3, r0
 8009312:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d132      	bne.n	8009380 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800931a:	2002      	movs	r0, #2
 800931c:	f001 fb30 	bl	800a980 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2203      	movs	r2, #3
 800932c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	7919      	ldrb	r1, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009342:	b292      	uxth	r2, r2
 8009344:	9202      	str	r2, [sp, #8]
 8009346:	2200      	movs	r2, #0
 8009348:	9201      	str	r2, [sp, #4]
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	4603      	mov	r3, r0
 800934e:	2280      	movs	r2, #128	; 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 ffcf 	bl	800a2f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7959      	ldrb	r1, [r3, #5]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800936a:	b292      	uxth	r2, r2
 800936c:	9202      	str	r2, [sp, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	9201      	str	r2, [sp, #4]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	4603      	mov	r3, r0
 8009376:	2200      	movs	r2, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 ffbb 	bl	800a2f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800937e:	e0e3      	b.n	8009548 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b03      	cmp	r3, #3
 8009384:	f040 80e0 	bne.w	8009548 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	220d      	movs	r2, #13
 800938c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	705a      	strb	r2, [r3, #1]
      break;
 8009394:	e0d8      	b.n	8009548 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009396:	2109      	movs	r1, #9
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f99d 	bl	80096d8 <USBH_Get_CfgDesc>
 800939e:	4603      	mov	r3, r0
 80093a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2204      	movs	r2, #4
 80093ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093ae:	e0cd      	b.n	800954c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	f040 80ca 	bne.w	800954c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093be:	3301      	adds	r3, #1
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d903      	bls.n	80093da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	220d      	movs	r2, #13
 80093d6:	701a      	strb	r2, [r3, #0]
      break;
 80093d8:	e0b8      	b.n	800954c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	795b      	ldrb	r3, [r3, #5]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 ffd7 	bl	800a394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	791b      	ldrb	r3, [r3, #4]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 ffd1 	bl	800a394 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
      break;
 80093fe:	e0a5      	b.n	800954c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f965 	bl	80096d8 <USBH_Get_CfgDesc>
 800940e:	4603      	mov	r3, r0
 8009410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2205      	movs	r2, #5
 800941c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800941e:	e097      	b.n	8009550 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	2b03      	cmp	r3, #3
 8009424:	f040 8094 	bne.w	8009550 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800942e:	3301      	adds	r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800943e:	2b03      	cmp	r3, #3
 8009440:	d903      	bls.n	800944a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	220d      	movs	r2, #13
 8009446:	701a      	strb	r2, [r3, #0]
      break;
 8009448:	e082      	b.n	8009550 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	795b      	ldrb	r3, [r3, #5]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 ff9f 	bl	800a394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	791b      	ldrb	r3, [r3, #4]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 ff99 	bl	800a394 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
      break;
 800946e:	e06f      	b.n	8009550 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009476:	2b00      	cmp	r3, #0
 8009478:	d019      	beq.n	80094ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009486:	23ff      	movs	r3, #255	; 0xff
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f949 	bl	8009720 <USBH_Get_StringDesc>
 800948e:	4603      	mov	r3, r0
 8009490:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009492:	7bbb      	ldrb	r3, [r7, #14]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d103      	bne.n	80094a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2206      	movs	r2, #6
 800949c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800949e:	e059      	b.n	8009554 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d156      	bne.n	8009554 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2206      	movs	r2, #6
 80094aa:	705a      	strb	r2, [r3, #1]
      break;
 80094ac:	e052      	b.n	8009554 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2206      	movs	r2, #6
 80094b2:	705a      	strb	r2, [r3, #1]
      break;
 80094b4:	e04e      	b.n	8009554 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d019      	beq.n	80094f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094cc:	23ff      	movs	r3, #255	; 0xff
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f926 	bl	8009720 <USBH_Get_StringDesc>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d103      	bne.n	80094e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2207      	movs	r2, #7
 80094e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094e4:	e038      	b.n	8009558 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d135      	bne.n	8009558 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2207      	movs	r2, #7
 80094f0:	705a      	strb	r2, [r3, #1]
      break;
 80094f2:	e031      	b.n	8009558 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2207      	movs	r2, #7
 80094f8:	705a      	strb	r2, [r3, #1]
      break;
 80094fa:	e02d      	b.n	8009558 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009502:	2b00      	cmp	r3, #0
 8009504:	d017      	beq.n	8009536 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009512:	23ff      	movs	r3, #255	; 0xff
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f903 	bl	8009720 <USBH_Get_StringDesc>
 800951a:	4603      	mov	r3, r0
 800951c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009528:	e018      	b.n	800955c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b03      	cmp	r3, #3
 800952e:	d115      	bne.n	800955c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73fb      	strb	r3, [r7, #15]
      break;
 8009534:	e012      	b.n	800955c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
      break;
 800953a:	e00f      	b.n	800955c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800953c:	bf00      	nop
 800953e:	e00e      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 8009540:	bf00      	nop
 8009542:	e00c      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 8009544:	bf00      	nop
 8009546:	e00a      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 8009548:	bf00      	nop
 800954a:	e008      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 800954c:	bf00      	nop
 800954e:	e006      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 8009550:	bf00      	nop
 8009552:	e004      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 8009554:	bf00      	nop
 8009556:	e002      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <USBH_HandleEnum+0x3be>
      break;
 800955c:	bf00      	nop
  }
  return Status;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f804 	bl	80095aa <USBH_HandleSof>
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b0b      	cmp	r3, #11
 80095ba:	d10a      	bne.n	80095d2 <USBH_HandleSof+0x28>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
  }
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80095ea:	bf00      	nop
}
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009606:	bf00      	nop
}
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f844 	bl	800a6ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	791b      	ldrb	r3, [r3, #4]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fe91 	bl	800a394 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	795b      	ldrb	r3, [r3, #5]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fe8b 	bl	800a394 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af02      	add	r7, sp, #8
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	b29b      	uxth	r3, r3
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096a6:	2100      	movs	r1, #0
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f864 	bl	8009776 <USBH_GetDescriptor>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f203 3026 	addw	r0, r3, #806	; 0x326
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	b292      	uxth	r2, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	f000 f918 	bl	80098fe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af02      	add	r7, sp, #8
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	331c      	adds	r3, #28
 80096e8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80096ea:	887b      	ldrh	r3, [r7, #2]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096f4:	2100      	movs	r1, #0
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f83d 	bl	8009776 <USBH_GetDescriptor>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d107      	bne.n	8009716 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009706:	887b      	ldrh	r3, [r7, #2]
 8009708:	461a      	mov	r2, r3
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f987 	bl	8009a20 <USBH_ParseCfgDesc>
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	607a      	str	r2, [r7, #4]
 800972a:	461a      	mov	r2, r3
 800972c:	460b      	mov	r3, r1
 800972e:	72fb      	strb	r3, [r7, #11]
 8009730:	4613      	mov	r3, r2
 8009732:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009734:	7afb      	ldrb	r3, [r7, #11]
 8009736:	b29b      	uxth	r3, r3
 8009738:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800973c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009744:	893b      	ldrh	r3, [r7, #8]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	460b      	mov	r3, r1
 800974a:	2100      	movs	r1, #0
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 f812 	bl	8009776 <USBH_GetDescriptor>
 8009752:	4603      	mov	r3, r0
 8009754:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009762:	893a      	ldrh	r2, [r7, #8]
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fb24 	bl	8009db4 <USBH_ParseStringDesc>
  }

  return status;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	607b      	str	r3, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	72fb      	strb	r3, [r7, #11]
 8009784:	4613      	mov	r3, r2
 8009786:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d11c      	bne.n	80097ca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009796:	b2da      	uxtb	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2206      	movs	r2, #6
 80097a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	893a      	ldrh	r2, [r7, #8]
 80097a6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80097a8:	893b      	ldrh	r3, [r7, #8]
 80097aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097b2:	d104      	bne.n	80097be <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f240 4209 	movw	r2, #1033	; 0x409
 80097ba:	829a      	strh	r2, [r3, #20]
 80097bc:	e002      	b.n	80097c4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8b3a      	ldrh	r2, [r7, #24]
 80097c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80097ca:	8b3b      	ldrh	r3, [r7, #24]
 80097cc:	461a      	mov	r2, r3
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 fb3d 	bl	8009e50 <USBH_CtlReq>
 80097d6:	4603      	mov	r3, r0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	789b      	ldrb	r3, [r3, #2]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d10f      	bne.n	8009814 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2205      	movs	r2, #5
 80097fe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	b29a      	uxth	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009814:	2200      	movs	r2, #0
 8009816:	2100      	movs	r1, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fb19 	bl	8009e50 <USBH_CtlReq>
 800981e:	4603      	mov	r3, r0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	789b      	ldrb	r3, [r3, #2]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d10e      	bne.n	800985a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2209      	movs	r2, #9
 8009846:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	887a      	ldrh	r2, [r7, #2]
 800984c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800985a:	2200      	movs	r2, #0
 800985c:	2100      	movs	r1, #0
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 faf6 	bl	8009e50 <USBH_CtlReq>
 8009864:	4603      	mov	r3, r0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b082      	sub	sp, #8
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	789b      	ldrb	r3, [r3, #2]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10f      	bne.n	80098a2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2203      	movs	r2, #3
 800988c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80098a2:	2200      	movs	r2, #0
 80098a4:	2100      	movs	r1, #0
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fad2 	bl	8009e50 <USBH_CtlReq>
 80098ac:	4603      	mov	r3, r0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	789b      	ldrb	r3, [r3, #2]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d10f      	bne.n	80098ea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2202      	movs	r2, #2
 80098ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80098ea:	2200      	movs	r2, #0
 80098ec:	2100      	movs	r1, #0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 faae 	bl	8009e50 <USBH_CtlReq>
 80098f4:	4603      	mov	r3, r0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	4613      	mov	r3, r2
 800990a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	785a      	ldrb	r2, [r3, #1]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	3302      	adds	r3, #2
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b29a      	uxth	r2, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	3303      	adds	r3, #3
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	b29b      	uxth	r3, r3
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	b29b      	uxth	r3, r3
 8009930:	4313      	orrs	r3, r2
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	791a      	ldrb	r2, [r3, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	795a      	ldrb	r2, [r3, #5]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	799a      	ldrb	r2, [r3, #6]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	79da      	ldrb	r2, [r3, #7]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	79db      	ldrb	r3, [r3, #7]
 800995c:	2b20      	cmp	r3, #32
 800995e:	dc11      	bgt.n	8009984 <USBH_ParseDevDesc+0x86>
 8009960:	2b08      	cmp	r3, #8
 8009962:	db16      	blt.n	8009992 <USBH_ParseDevDesc+0x94>
 8009964:	3b08      	subs	r3, #8
 8009966:	2201      	movs	r2, #1
 8009968:	fa02 f303 	lsl.w	r3, r2, r3
 800996c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009974:	2b00      	cmp	r3, #0
 8009976:	bf14      	ite	ne
 8009978:	2301      	movne	r3, #1
 800997a:	2300      	moveq	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <USBH_ParseDevDesc+0x8a>
 8009982:	e006      	b.n	8009992 <USBH_ParseDevDesc+0x94>
 8009984:	2b40      	cmp	r3, #64	; 0x40
 8009986:	d104      	bne.n	8009992 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	79da      	ldrb	r2, [r3, #7]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	71da      	strb	r2, [r3, #7]
      break;
 8009990:	e003      	b.n	800999a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2240      	movs	r2, #64	; 0x40
 8009996:	71da      	strb	r2, [r3, #7]
      break;
 8009998:	bf00      	nop
  }

  if (length > 8U)
 800999a:	88fb      	ldrh	r3, [r7, #6]
 800999c:	2b08      	cmp	r3, #8
 800999e:	d939      	bls.n	8009a14 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	3308      	adds	r3, #8
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	3309      	adds	r3, #9
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	021b      	lsls	r3, r3, #8
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	4313      	orrs	r3, r2
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	330a      	adds	r3, #10
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	330b      	adds	r3, #11
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	330c      	adds	r3, #12
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b29a      	uxth	r2, r3
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	330d      	adds	r3, #13
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	4313      	orrs	r3, r2
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	7b9a      	ldrb	r2, [r3, #14]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	7bda      	ldrb	r2, [r3, #15]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	7c1a      	ldrb	r2, [r3, #16]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	7c5a      	ldrb	r2, [r3, #17]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	745a      	strb	r2, [r3, #17]
  }
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08c      	sub	sp, #48	; 0x30
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009a34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	781a      	ldrb	r2, [r3, #0]
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	785a      	ldrb	r2, [r3, #1]
 8009a5c:	6a3b      	ldr	r3, [r7, #32]
 8009a5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	3302      	adds	r3, #2
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	3303      	adds	r3, #3
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	4313      	orrs	r3, r2
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a7c:	bf28      	it	cs
 8009a7e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	791a      	ldrb	r2, [r3, #4]
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	795a      	ldrb	r2, [r3, #5]
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	799a      	ldrb	r2, [r3, #6]
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	79da      	ldrb	r2, [r3, #7]
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	7a1a      	ldrb	r2, [r3, #8]
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b09      	cmp	r3, #9
 8009ab6:	d002      	beq.n	8009abe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	2209      	movs	r2, #9
 8009abc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	2b09      	cmp	r3, #9
 8009ac2:	f240 809d 	bls.w	8009c00 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009ac6:	2309      	movs	r3, #9
 8009ac8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ace:	e081      	b.n	8009bd4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ad0:	f107 0316 	add.w	r3, r7, #22
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad8:	f000 f99f 	bl	8009e1a <USBH_GetNextDesc>
 8009adc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b04      	cmp	r3, #4
 8009ae4:	d176      	bne.n	8009bd4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b09      	cmp	r3, #9
 8009aec:	d002      	beq.n	8009af4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	2209      	movs	r2, #9
 8009af2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af8:	221a      	movs	r2, #26
 8009afa:	fb02 f303 	mul.w	r3, r2, r3
 8009afe:	3308      	adds	r3, #8
 8009b00:	6a3a      	ldr	r2, [r7, #32]
 8009b02:	4413      	add	r3, r2
 8009b04:	3302      	adds	r3, #2
 8009b06:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0a:	69f8      	ldr	r0, [r7, #28]
 8009b0c:	f000 f87e 	bl	8009c0c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b1a:	e043      	b.n	8009ba4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009b1c:	f107 0316 	add.w	r3, r7, #22
 8009b20:	4619      	mov	r1, r3
 8009b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b24:	f000 f979 	bl	8009e1a <USBH_GetNextDesc>
 8009b28:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	785b      	ldrb	r3, [r3, #1]
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d138      	bne.n	8009ba4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	795b      	ldrb	r3, [r3, #5]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d10f      	bne.n	8009b5a <USBH_ParseCfgDesc+0x13a>
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	799b      	ldrb	r3, [r3, #6]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d10b      	bne.n	8009b5a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	79db      	ldrb	r3, [r3, #7]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10f      	bne.n	8009b6a <USBH_ParseCfgDesc+0x14a>
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	d00b      	beq.n	8009b6a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	2209      	movs	r2, #9
 8009b56:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b58:	e007      	b.n	8009b6a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b07      	cmp	r3, #7
 8009b60:	d004      	beq.n	8009b6c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	2207      	movs	r2, #7
 8009b66:	701a      	strb	r2, [r3, #0]
 8009b68:	e000      	b.n	8009b6c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009b6a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009b74:	3201      	adds	r2, #1
 8009b76:	00d2      	lsls	r2, r2, #3
 8009b78:	211a      	movs	r1, #26
 8009b7a:	fb01 f303 	mul.w	r3, r1, r3
 8009b7e:	4413      	add	r3, r2
 8009b80:	3308      	adds	r3, #8
 8009b82:	6a3a      	ldr	r2, [r7, #32]
 8009b84:	4413      	add	r3, r2
 8009b86:	3304      	adds	r3, #4
 8009b88:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8c:	69b9      	ldr	r1, [r7, #24]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 f86b 	bl	8009c6a <USBH_ParseEPDesc>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	791b      	ldrb	r3, [r3, #4]
 8009ba8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d204      	bcs.n	8009bba <USBH_ParseCfgDesc+0x19a>
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	885a      	ldrh	r2, [r3, #2]
 8009bb4:	8afb      	ldrh	r3, [r7, #22]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d8b0      	bhi.n	8009b1c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	791b      	ldrb	r3, [r3, #4]
 8009bbe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d201      	bcs.n	8009bca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e01c      	b.n	8009c04 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bce:	3301      	adds	r3, #1
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d805      	bhi.n	8009be8 <USBH_ParseCfgDesc+0x1c8>
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	885a      	ldrh	r2, [r3, #2]
 8009be0:	8afb      	ldrh	r3, [r7, #22]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	f63f af74 	bhi.w	8009ad0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	791b      	ldrb	r3, [r3, #4]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	bf28      	it	cs
 8009bf0:	2302      	movcs	r3, #2
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d201      	bcs.n	8009c00 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e001      	b.n	8009c04 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3730      	adds	r7, #48	; 0x30
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781a      	ldrb	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	785a      	ldrb	r2, [r3, #1]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	789a      	ldrb	r2, [r3, #2]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	78da      	ldrb	r2, [r3, #3]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	791a      	ldrb	r2, [r3, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	795a      	ldrb	r2, [r3, #5]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	799a      	ldrb	r2, [r3, #6]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	79da      	ldrb	r2, [r3, #7]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	7a1a      	ldrb	r2, [r3, #8]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	721a      	strb	r2, [r3, #8]
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b087      	sub	sp, #28
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	785a      	ldrb	r2, [r3, #1]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	789a      	ldrb	r2, [r3, #2]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	78da      	ldrb	r2, [r3, #3]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3305      	adds	r3, #5
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	799a      	ldrb	r2, [r3, #6]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	889b      	ldrh	r3, [r3, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d102      	bne.n	8009ccc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	75fb      	strb	r3, [r7, #23]
 8009cca:	e033      	b.n	8009d34 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	889b      	ldrh	r3, [r3, #4]
 8009cd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009cd4:	f023 0307 	bic.w	r3, r3, #7
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	889b      	ldrh	r3, [r3, #4]
 8009ce2:	b21a      	sxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	b299      	uxth	r1, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3305      	adds	r3, #5
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	430b      	orrs	r3, r1
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d110      	bne.n	8009d26 <USBH_ParseEPDesc+0xbc>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	b299      	uxth	r1, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3305      	adds	r3, #5
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	b21b      	sxth	r3, r3
 8009d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d22:	b21b      	sxth	r3, r3
 8009d24:	e001      	b.n	8009d2a <USBH_ParseEPDesc+0xc0>
 8009d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	b21b      	sxth	r3, r3
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d116      	bne.n	8009d6c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	78db      	ldrb	r3, [r3, #3]
 8009d42:	f003 0303 	and.w	r3, r3, #3
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d005      	beq.n	8009d56 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	78db      	ldrb	r3, [r3, #3]
 8009d4e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d127      	bne.n	8009da6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	799b      	ldrb	r3, [r3, #6]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <USBH_ParseEPDesc+0xfc>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	799b      	ldrb	r3, [r3, #6]
 8009d62:	2b10      	cmp	r3, #16
 8009d64:	d91f      	bls.n	8009da6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009d66:	2303      	movs	r3, #3
 8009d68:	75fb      	strb	r3, [r7, #23]
 8009d6a:	e01c      	b.n	8009da6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	78db      	ldrb	r3, [r3, #3]
 8009d70:	f003 0303 	and.w	r3, r3, #3
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d10a      	bne.n	8009d8e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	799b      	ldrb	r3, [r3, #6]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <USBH_ParseEPDesc+0x11e>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	799b      	ldrb	r3, [r3, #6]
 8009d84:	2b10      	cmp	r3, #16
 8009d86:	d90e      	bls.n	8009da6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	75fb      	strb	r3, [r7, #23]
 8009d8c:	e00b      	b.n	8009da6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	78db      	ldrb	r3, [r3, #3]
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d105      	bne.n	8009da6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	799b      	ldrb	r3, [r3, #6]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009da2:	2303      	movs	r3, #3
 8009da4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d120      	bne.n	8009e0e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	1e9a      	subs	r2, r3, #2
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	bf28      	it	cs
 8009dd8:	4613      	movcs	r3, r2
 8009dda:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3302      	adds	r3, #2
 8009de0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009de2:	2300      	movs	r3, #0
 8009de4:	82fb      	strh	r3, [r7, #22]
 8009de6:	e00b      	b.n	8009e00 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009de8:	8afb      	ldrh	r3, [r7, #22]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	781a      	ldrb	r2, [r3, #0]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	3301      	adds	r3, #1
 8009df8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009dfa:	8afb      	ldrh	r3, [r7, #22]
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	82fb      	strh	r3, [r7, #22]
 8009e00:	8afa      	ldrh	r2, [r7, #22]
 8009e02:	8abb      	ldrh	r3, [r7, #20]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d3ef      	bcc.n	8009de8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
  }
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	881a      	ldrh	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4413      	add	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e42:	68fb      	ldr	r3, [r7, #12]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	789b      	ldrb	r3, [r3, #2]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d002      	beq.n	8009e70 <USBH_CtlReq+0x20>
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d00f      	beq.n	8009e8e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009e6e:	e027      	b.n	8009ec0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2202      	movs	r2, #2
 8009e86:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8c:	e018      	b.n	8009ec0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 f81c 	bl	8009ecc <USBH_HandleControl>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <USBH_CtlReq+0x54>
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d106      	bne.n	8009eb2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	761a      	strb	r2, [r3, #24]
      break;
 8009eb0:	e005      	b.n	8009ebe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d102      	bne.n	8009ebe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	709a      	strb	r2, [r3, #2]
      break;
 8009ebe:	bf00      	nop
  }
  return status;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7e1b      	ldrb	r3, [r3, #24]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	2b0a      	cmp	r3, #10
 8009ee4:	f200 8156 	bhi.w	800a194 <USBH_HandleControl+0x2c8>
 8009ee8:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <USBH_HandleControl+0x24>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	08009f37 	.word	0x08009f37
 8009ef8:	08009fa1 	.word	0x08009fa1
 8009efc:	08009fc7 	.word	0x08009fc7
 8009f00:	08009fff 	.word	0x08009fff
 8009f04:	0800a029 	.word	0x0800a029
 8009f08:	0800a07b 	.word	0x0800a07b
 8009f0c:	0800a09d 	.word	0x0800a09d
 8009f10:	0800a0d9 	.word	0x0800a0d9
 8009f14:	0800a0ff 	.word	0x0800a0ff
 8009f18:	0800a13d 	.word	0x0800a13d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f103 0110 	add.w	r1, r3, #16
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	461a      	mov	r2, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f943 	bl	800a1b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2202      	movs	r2, #2
 8009f32:	761a      	strb	r2, [r3, #24]
      break;
 8009f34:	e139      	b.n	800a1aa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	795b      	ldrb	r3, [r3, #5]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fcc5 	bl	800a8cc <USBH_LL_GetURBState>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d11e      	bne.n	8009f8a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	7c1b      	ldrb	r3, [r3, #16]
 8009f50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8adb      	ldrh	r3, [r3, #22]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009f5e:	7b7b      	ldrb	r3, [r7, #13]
 8009f60:	2b80      	cmp	r3, #128	; 0x80
 8009f62:	d103      	bne.n	8009f6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2203      	movs	r2, #3
 8009f68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f6a:	e115      	b.n	800a198 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2205      	movs	r2, #5
 8009f70:	761a      	strb	r2, [r3, #24]
      break;
 8009f72:	e111      	b.n	800a198 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009f74:	7b7b      	ldrb	r3, [r7, #13]
 8009f76:	2b80      	cmp	r3, #128	; 0x80
 8009f78:	d103      	bne.n	8009f82 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2209      	movs	r2, #9
 8009f7e:	761a      	strb	r2, [r3, #24]
      break;
 8009f80:	e10a      	b.n	800a198 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2207      	movs	r2, #7
 8009f86:	761a      	strb	r2, [r3, #24]
      break;
 8009f88:	e106      	b.n	800a198 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d003      	beq.n	8009f98 <USBH_HandleControl+0xcc>
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	f040 8100 	bne.w	800a198 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	220b      	movs	r2, #11
 8009f9c:	761a      	strb	r2, [r3, #24]
      break;
 8009f9e:	e0fb      	b.n	800a198 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6899      	ldr	r1, [r3, #8]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	899a      	ldrh	r2, [r3, #12]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	791b      	ldrb	r3, [r3, #4]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f93a 	bl	800a232 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2204      	movs	r2, #4
 8009fc2:	761a      	strb	r2, [r3, #24]
      break;
 8009fc4:	e0f1      	b.n	800a1aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fc7d 	bl	800a8cc <USBH_LL_GetURBState>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d102      	bne.n	8009fe2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2209      	movs	r2, #9
 8009fe0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b05      	cmp	r3, #5
 8009fe6:	d102      	bne.n	8009fee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fec:	e0d6      	b.n	800a19c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	f040 80d3 	bne.w	800a19c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	220b      	movs	r2, #11
 8009ffa:	761a      	strb	r2, [r3, #24]
      break;
 8009ffc:	e0ce      	b.n	800a19c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6899      	ldr	r1, [r3, #8]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	899a      	ldrh	r2, [r3, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	795b      	ldrb	r3, [r3, #5]
 800a00a:	2001      	movs	r0, #1
 800a00c:	9000      	str	r0, [sp, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8ea 	bl	800a1e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2206      	movs	r2, #6
 800a024:	761a      	strb	r2, [r3, #24]
      break;
 800a026:	e0c0      	b.n	800a1aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	795b      	ldrb	r3, [r3, #5]
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fc4c 	bl	800a8cc <USBH_LL_GetURBState>
 800a034:	4603      	mov	r3, r0
 800a036:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d103      	bne.n	800a046 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2207      	movs	r2, #7
 800a042:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a044:	e0ac      	b.n	800a1a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	2b05      	cmp	r3, #5
 800a04a:	d105      	bne.n	800a058 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	220c      	movs	r2, #12
 800a050:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a052:	2303      	movs	r3, #3
 800a054:	73fb      	strb	r3, [r7, #15]
      break;
 800a056:	e0a3      	b.n	800a1a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d103      	bne.n	800a066 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2205      	movs	r2, #5
 800a062:	761a      	strb	r2, [r3, #24]
      break;
 800a064:	e09c      	b.n	800a1a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	f040 8099 	bne.w	800a1a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	220b      	movs	r2, #11
 800a072:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a074:	2302      	movs	r3, #2
 800a076:	73fb      	strb	r3, [r7, #15]
      break;
 800a078:	e092      	b.n	800a1a0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	791b      	ldrb	r3, [r3, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f8d5 	bl	800a232 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a08e:	b29a      	uxth	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2208      	movs	r2, #8
 800a098:	761a      	strb	r2, [r3, #24]

      break;
 800a09a:	e086      	b.n	800a1aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	791b      	ldrb	r3, [r3, #4]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fc12 	bl	800a8cc <USBH_LL_GetURBState>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d105      	bne.n	800a0be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	220d      	movs	r2, #13
 800a0b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0bc:	e072      	b.n	800a1a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b04      	cmp	r3, #4
 800a0c2:	d103      	bne.n	800a0cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	220b      	movs	r2, #11
 800a0c8:	761a      	strb	r2, [r3, #24]
      break;
 800a0ca:	e06b      	b.n	800a1a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d168      	bne.n	800a1a4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d6:	e065      	b.n	800a1a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	795b      	ldrb	r3, [r3, #5]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	9200      	str	r2, [sp, #0]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f87f 	bl	800a1e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	761a      	strb	r2, [r3, #24]
      break;
 800a0fc:	e055      	b.n	800a1aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fbe1 	bl	800a8cc <USBH_LL_GetURBState>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d105      	bne.n	800a120 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	220d      	movs	r2, #13
 800a11c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a11e:	e043      	b.n	800a1a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	2b02      	cmp	r3, #2
 800a124:	d103      	bne.n	800a12e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2209      	movs	r2, #9
 800a12a:	761a      	strb	r2, [r3, #24]
      break;
 800a12c:	e03c      	b.n	800a1a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d139      	bne.n	800a1a8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	220b      	movs	r2, #11
 800a138:	761a      	strb	r2, [r3, #24]
      break;
 800a13a:	e035      	b.n	800a1a8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	7e5b      	ldrb	r3, [r3, #25]
 800a140:	3301      	adds	r3, #1
 800a142:	b2da      	uxtb	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	765a      	strb	r2, [r3, #25]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	7e5b      	ldrb	r3, [r3, #25]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d806      	bhi.n	800a15e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a15c:	e025      	b.n	800a1aa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a164:	2106      	movs	r1, #6
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	795b      	ldrb	r3, [r3, #5]
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f90c 	bl	800a394 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	791b      	ldrb	r3, [r3, #4]
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f906 	bl	800a394 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a18e:	2302      	movs	r3, #2
 800a190:	73fb      	strb	r3, [r7, #15]
      break;
 800a192:	e00a      	b.n	800a1aa <USBH_HandleControl+0x2de>

    default:
      break;
 800a194:	bf00      	nop
 800a196:	e008      	b.n	800a1aa <USBH_HandleControl+0x2de>
      break;
 800a198:	bf00      	nop
 800a19a:	e006      	b.n	800a1aa <USBH_HandleControl+0x2de>
      break;
 800a19c:	bf00      	nop
 800a19e:	e004      	b.n	800a1aa <USBH_HandleControl+0x2de>
      break;
 800a1a0:	bf00      	nop
 800a1a2:	e002      	b.n	800a1aa <USBH_HandleControl+0x2de>
      break;
 800a1a4:	bf00      	nop
 800a1a6:	e000      	b.n	800a1aa <USBH_HandleControl+0x2de>
      break;
 800a1a8:	bf00      	nop
  }

  return status;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af04      	add	r7, sp, #16
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1c2:	79f9      	ldrb	r1, [r7, #7]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fb46 	bl	800a86a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af04      	add	r7, sp, #16
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	80fb      	strh	r3, [r7, #6]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a20c:	7979      	ldrb	r1, [r7, #5]
 800a20e:	7e3b      	ldrb	r3, [r7, #24]
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	88fb      	ldrh	r3, [r7, #6]
 800a214:	9302      	str	r3, [sp, #8]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	2301      	movs	r3, #1
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	2300      	movs	r3, #0
 800a220:	2200      	movs	r2, #0
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 fb21 	bl	800a86a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b088      	sub	sp, #32
 800a236:	af04      	add	r7, sp, #16
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	4611      	mov	r1, r2
 800a23e:	461a      	mov	r2, r3
 800a240:	460b      	mov	r3, r1
 800a242:	80fb      	strh	r3, [r7, #6]
 800a244:	4613      	mov	r3, r2
 800a246:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a248:	7979      	ldrb	r1, [r7, #5]
 800a24a:	2300      	movs	r3, #0
 800a24c:	9303      	str	r3, [sp, #12]
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	9302      	str	r3, [sp, #8]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	2301      	movs	r3, #1
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	2300      	movs	r3, #0
 800a25c:	2201      	movs	r2, #1
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 fb03 	bl	800a86a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a264:	2300      	movs	r3, #0

}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b088      	sub	sp, #32
 800a272:	af04      	add	r7, sp, #16
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	4611      	mov	r1, r2
 800a27a:	461a      	mov	r2, r3
 800a27c:	460b      	mov	r3, r1
 800a27e:	80fb      	strh	r3, [r7, #6]
 800a280:	4613      	mov	r3, r2
 800a282:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a292:	7979      	ldrb	r1, [r7, #5]
 800a294:	7e3b      	ldrb	r3, [r7, #24]
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fade 	bl	800a86a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af04      	add	r7, sp, #16
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	80fb      	strh	r3, [r7, #6]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2ce:	7979      	ldrb	r1, [r7, #5]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9303      	str	r3, [sp, #12]
 800a2d4:	88fb      	ldrh	r3, [r7, #6]
 800a2d6:	9302      	str	r3, [sp, #8]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	2301      	movs	r3, #1
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fac0 	bl	800a86a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af04      	add	r7, sp, #16
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	4611      	mov	r1, r2
 800a300:	461a      	mov	r2, r3
 800a302:	4603      	mov	r3, r0
 800a304:	70fb      	strb	r3, [r7, #3]
 800a306:	460b      	mov	r3, r1
 800a308:	70bb      	strb	r3, [r7, #2]
 800a30a:	4613      	mov	r3, r2
 800a30c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a30e:	7878      	ldrb	r0, [r7, #1]
 800a310:	78ba      	ldrb	r2, [r7, #2]
 800a312:	78f9      	ldrb	r1, [r7, #3]
 800a314:	8b3b      	ldrh	r3, [r7, #24]
 800a316:	9302      	str	r3, [sp, #8]
 800a318:	7d3b      	ldrb	r3, [r7, #20]
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	7c3b      	ldrb	r3, [r7, #16]
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	4603      	mov	r3, r0
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa53 	bl	800a7ce <USBH_LL_OpenPipe>

  return USBH_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa72 	bl	800a82c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f836 	bl	800a3d0 <USBH_GetFreePipe>
 800a364:	4603      	mov	r3, r0
 800a366:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a368:	89fb      	ldrh	r3, [r7, #14]
 800a36a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a36e:	4293      	cmp	r3, r2
 800a370:	d00a      	beq.n	800a388 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a372:	78fa      	ldrb	r2, [r7, #3]
 800a374:	89fb      	ldrh	r3, [r7, #14]
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	33e0      	adds	r3, #224	; 0xe0
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	440b      	add	r3, r1
 800a386:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a388:	89fb      	ldrh	r3, [r7, #14]
 800a38a:	b2db      	uxtb	r3, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	2b0f      	cmp	r3, #15
 800a3a4:	d80d      	bhi.n	800a3c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a3a6:	78fb      	ldrb	r3, [r7, #3]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	33e0      	adds	r3, #224	; 0xe0
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	33e0      	adds	r3, #224	; 0xe0
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	440b      	add	r3, r1
 800a3c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
 800a3e0:	e00f      	b.n	800a402 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	33e0      	adds	r3, #224	; 0xe0
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	e007      	b.n	800a40c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	3301      	adds	r3, #1
 800a400:	73fb      	strb	r3, [r7, #15]
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	2b0f      	cmp	r3, #15
 800a406:	d9ec      	bls.n	800a3e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a408:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a41c:	2201      	movs	r2, #1
 800a41e:	490e      	ldr	r1, [pc, #56]	; (800a458 <MX_USB_HOST_Init+0x40>)
 800a420:	480e      	ldr	r0, [pc, #56]	; (800a45c <MX_USB_HOST_Init+0x44>)
 800a422:	f7fe fba7 	bl	8008b74 <USBH_Init>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a42c:	f7f7 f888 	bl	8001540 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a430:	490b      	ldr	r1, [pc, #44]	; (800a460 <MX_USB_HOST_Init+0x48>)
 800a432:	480a      	ldr	r0, [pc, #40]	; (800a45c <MX_USB_HOST_Init+0x44>)
 800a434:	f7fe fc2c 	bl	8008c90 <USBH_RegisterClass>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a43e:	f7f7 f87f 	bl	8001540 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a442:	4806      	ldr	r0, [pc, #24]	; (800a45c <MX_USB_HOST_Init+0x44>)
 800a444:	f7fe fcb0 	bl	8008da8 <USBH_Start>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a44e:	f7f7 f877 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a452:	bf00      	nop
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	0800a479 	.word	0x0800a479
 800a45c:	20000a14 	.word	0x20000a14
 800a460:	20000054 	.word	0x20000054

0800a464 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a468:	4802      	ldr	r0, [pc, #8]	; (800a474 <MX_USB_HOST_Process+0x10>)
 800a46a:	f7fe fcad 	bl	8008dc8 <USBH_Process>
}
 800a46e:	bf00      	nop
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000a14 	.word	0x20000a14

0800a478 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	3b01      	subs	r3, #1
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d819      	bhi.n	800a4c0 <USBH_UserProcess+0x48>
 800a48c:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <USBH_UserProcess+0x1c>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a4c1 	.word	0x0800a4c1
 800a498:	0800a4b1 	.word	0x0800a4b1
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4b9 	.word	0x0800a4b9
 800a4a4:	0800a4a9 	.word	0x0800a4a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a4a8:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <USBH_UserProcess+0x58>)
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	701a      	strb	r2, [r3, #0]
  break;
 800a4ae:	e008      	b.n	800a4c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <USBH_UserProcess+0x58>)
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	701a      	strb	r2, [r3, #0]
  break;
 800a4b6:	e004      	b.n	800a4c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <USBH_UserProcess+0x58>)
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	701a      	strb	r2, [r3, #0]
  break;
 800a4be:	e000      	b.n	800a4c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a4c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20000dec 	.word	0x20000dec

0800a4d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	; 0x28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4dc:	f107 0314 	add.w	r3, r7, #20
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	605a      	str	r2, [r3, #4]
 800a4e6:	609a      	str	r2, [r3, #8]
 800a4e8:	60da      	str	r2, [r3, #12]
 800a4ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4f4:	d147      	bne.n	800a586 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	4b25      	ldr	r3, [pc, #148]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	4a24      	ldr	r2, [pc, #144]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a500:	f043 0301 	orr.w	r3, r3, #1
 800a504:	6313      	str	r3, [r2, #48]	; 0x30
 800a506:	4b22      	ldr	r3, [pc, #136]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a512:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a518:	2300      	movs	r3, #0
 800a51a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a51c:	2300      	movs	r3, #0
 800a51e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4619      	mov	r1, r3
 800a526:	481b      	ldr	r0, [pc, #108]	; (800a594 <HAL_HCD_MspInit+0xc0>)
 800a528:	f7f9 f892 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a52c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a532:	2302      	movs	r3, #2
 800a534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a536:	2300      	movs	r3, #0
 800a538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a53a:	2300      	movs	r3, #0
 800a53c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a53e:	230a      	movs	r3, #10
 800a540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a542:	f107 0314 	add.w	r3, r7, #20
 800a546:	4619      	mov	r1, r3
 800a548:	4812      	ldr	r0, [pc, #72]	; (800a594 <HAL_HCD_MspInit+0xc0>)
 800a54a:	f7f9 f881 	bl	8003650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a54e:	4b10      	ldr	r3, [pc, #64]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a552:	4a0f      	ldr	r2, [pc, #60]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a558:	6353      	str	r3, [r2, #52]	; 0x34
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a562:	4a0b      	ldr	r2, [pc, #44]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a568:	6453      	str	r3, [r2, #68]	; 0x44
 800a56a:	4b09      	ldr	r3, [pc, #36]	; (800a590 <HAL_HCD_MspInit+0xbc>)
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a576:	2200      	movs	r2, #0
 800a578:	2100      	movs	r1, #0
 800a57a:	2043      	movs	r0, #67	; 0x43
 800a57c:	f7f9 f831 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a580:	2043      	movs	r0, #67	; 0x43
 800a582:	f7f9 f84a 	bl	800361a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a586:	bf00      	nop
 800a588:	3728      	adds	r7, #40	; 0x28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	40023800 	.word	0x40023800
 800a594:	40020000 	.word	0x40020000

0800a598 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe ffed 	bl	8009586 <USBH_LL_IncTimer>
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff f825 	bl	8009612 <USBH_LL_Connect>
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff f82e 	bl	8009640 <USBH_LL_Disconnect>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe ffdf 	bl	80095da <USBH_LL_PortEnabled>
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe ffdf 	bl	80095f6 <USBH_LL_PortDisabled>
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d12a      	bne.n	800a6a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a652:	4a18      	ldr	r2, [pc, #96]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a15      	ldr	r2, [pc, #84]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a65e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a662:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a664:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a668:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a66a:	4b12      	ldr	r3, [pc, #72]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a66c:	2208      	movs	r2, #8
 800a66e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a670:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a672:	2201      	movs	r2, #1
 800a674:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a676:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a678:	2200      	movs	r2, #0
 800a67a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a67c:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a67e:	2202      	movs	r2, #2
 800a680:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a682:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a684:	2200      	movs	r2, #0
 800a686:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a688:	480a      	ldr	r0, [pc, #40]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a68a:	f7f9 f996 	bl	80039ba <HAL_HCD_Init>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a694:	f7f6 ff54 	bl	8001540 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a698:	4806      	ldr	r0, [pc, #24]	; (800a6b4 <USBH_LL_Init+0x74>)
 800a69a:	f7f9 fd7a 	bl	8004192 <HAL_HCD_GetCurrentFrame>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7fe ff60 	bl	8009568 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000df0 	.word	0x20000df0

0800a6b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7f9 fce9 	bl	80040a6 <HAL_HCD_Start>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f95c 	bl	800a998 <USBH_Get_USB_Status>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a704:	4618      	mov	r0, r3
 800a706:	f7f9 fcf1 	bl	80040ec <HAL_HCD_Stop>
 800a70a:	4603      	mov	r3, r0
 800a70c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
 800a710:	4618      	mov	r0, r3
 800a712:	f000 f941 	bl	800a998 <USBH_Get_USB_Status>
 800a716:	4603      	mov	r3, r0
 800a718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a72c:	2301      	movs	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a736:	4618      	mov	r0, r3
 800a738:	f7f9 fd39 	bl	80041ae <HAL_HCD_GetCurrentSpeed>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d00c      	beq.n	800a75c <USBH_LL_GetSpeed+0x38>
 800a742:	2b02      	cmp	r3, #2
 800a744:	d80d      	bhi.n	800a762 <USBH_LL_GetSpeed+0x3e>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <USBH_LL_GetSpeed+0x2c>
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d003      	beq.n	800a756 <USBH_LL_GetSpeed+0x32>
 800a74e:	e008      	b.n	800a762 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a750:	2300      	movs	r3, #0
 800a752:	73fb      	strb	r3, [r7, #15]
    break;
 800a754:	e008      	b.n	800a768 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a756:	2301      	movs	r3, #1
 800a758:	73fb      	strb	r3, [r7, #15]
    break;
 800a75a:	e005      	b.n	800a768 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a75c:	2302      	movs	r3, #2
 800a75e:	73fb      	strb	r3, [r7, #15]
    break;
 800a760:	e002      	b.n	800a768 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a762:	2301      	movs	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]
    break;
 800a766:	bf00      	nop
  }
  return  speed;
 800a768:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a788:	4618      	mov	r0, r3
 800a78a:	f7f9 fccc 	bl	8004126 <HAL_HCD_ResetPort>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4618      	mov	r0, r3
 800a796:	f000 f8ff 	bl	800a998 <USBH_Get_USB_Status>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7ba:	78fa      	ldrb	r2, [r7, #3]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f9 fcd3 	bl	800416a <HAL_HCD_HC_GetXferCount>
 800a7c4:	4603      	mov	r3, r0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a7ce:	b590      	push	{r4, r7, lr}
 800a7d0:	b089      	sub	sp, #36	; 0x24
 800a7d2:	af04      	add	r7, sp, #16
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	4611      	mov	r1, r2
 800a7da:	461a      	mov	r2, r3
 800a7dc:	4603      	mov	r3, r0
 800a7de:	70fb      	strb	r3, [r7, #3]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70bb      	strb	r3, [r7, #2]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a7f6:	787c      	ldrb	r4, [r7, #1]
 800a7f8:	78ba      	ldrb	r2, [r7, #2]
 800a7fa:	78f9      	ldrb	r1, [r7, #3]
 800a7fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a7fe:	9302      	str	r3, [sp, #8]
 800a800:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	4623      	mov	r3, r4
 800a80e:	f7f9 f936 	bl	8003a7e <HAL_HCD_HC_Init>
 800a812:	4603      	mov	r3, r0
 800a814:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a816:	7bfb      	ldrb	r3, [r7, #15]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 f8bd 	bl	800a998 <USBH_Get_USB_Status>
 800a81e:	4603      	mov	r3, r0
 800a820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a822:	7bbb      	ldrb	r3, [r7, #14]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd90      	pop	{r4, r7, pc}

0800a82c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a846:	78fa      	ldrb	r2, [r7, #3]
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f9 f9a6 	bl	8003b9c <HAL_HCD_HC_Halt>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f89e 	bl	800a998 <USBH_Get_USB_Status>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a860:	7bbb      	ldrb	r3, [r7, #14]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a86a:	b590      	push	{r4, r7, lr}
 800a86c:	b089      	sub	sp, #36	; 0x24
 800a86e:	af04      	add	r7, sp, #16
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	4608      	mov	r0, r1
 800a874:	4611      	mov	r1, r2
 800a876:	461a      	mov	r2, r3
 800a878:	4603      	mov	r3, r0
 800a87a:	70fb      	strb	r3, [r7, #3]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70bb      	strb	r3, [r7, #2]
 800a880:	4613      	mov	r3, r2
 800a882:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a892:	787c      	ldrb	r4, [r7, #1]
 800a894:	78ba      	ldrb	r2, [r7, #2]
 800a896:	78f9      	ldrb	r1, [r7, #3]
 800a898:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a89c:	9303      	str	r3, [sp, #12]
 800a89e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8a0:	9302      	str	r3, [sp, #8]
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	4623      	mov	r3, r4
 800a8ae:	f7f9 f999 	bl	8003be4 <HAL_HCD_HC_SubmitRequest>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 f86d 	bl	800a998 <USBH_Get_USB_Status>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd90      	pop	{r4, r7, pc}

0800a8cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8de:	78fa      	ldrb	r2, [r7, #3]
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7f9 fc2d 	bl	8004142 <HAL_HCD_HC_GetURBState>
 800a8e8:	4603      	mov	r3, r0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a904:	2b01      	cmp	r3, #1
 800a906:	d103      	bne.n	800a910 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f870 	bl	800a9f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a910:	20c8      	movs	r0, #200	; 0xc8
 800a912:	f7f8 fd67 	bl	80033e4 <HAL_Delay>
  return USBH_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
 800a92c:	4613      	mov	r3, r2
 800a92e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a936:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	212c      	movs	r1, #44	; 0x2c
 800a93e:	fb01 f303 	mul.w	r3, r1, r3
 800a942:	4413      	add	r3, r2
 800a944:	333b      	adds	r3, #59	; 0x3b
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d009      	beq.n	800a960 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	212c      	movs	r1, #44	; 0x2c
 800a952:	fb01 f303 	mul.w	r3, r1, r3
 800a956:	4413      	add	r3, r2
 800a958:	3354      	adds	r3, #84	; 0x54
 800a95a:	78ba      	ldrb	r2, [r7, #2]
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e008      	b.n	800a972 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	212c      	movs	r1, #44	; 0x2c
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	3355      	adds	r3, #85	; 0x55
 800a96e:	78ba      	ldrb	r2, [r7, #2]
 800a970:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7f8 fd2b 	bl	80033e4 <HAL_Delay>
}
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d817      	bhi.n	800a9dc <USBH_Get_USB_Status+0x44>
 800a9ac:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <USBH_Get_USB_Status+0x1c>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800a9c5 	.word	0x0800a9c5
 800a9b8:	0800a9cb 	.word	0x0800a9cb
 800a9bc:	0800a9d1 	.word	0x0800a9d1
 800a9c0:	0800a9d7 	.word	0x0800a9d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	e00b      	b.n	800a9e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e008      	b.n	800a9e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	e005      	b.n	800a9e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9da:	e002      	b.n	800a9e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e0:	bf00      	nop
  }
  return usb_status;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
 800aa08:	e001      	b.n	800aa0e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	461a      	mov	r2, r3
 800aa12:	2101      	movs	r1, #1
 800aa14:	4803      	ldr	r0, [pc, #12]	; (800aa24 <MX_DriverVbusFS+0x34>)
 800aa16:	f7f8 ffb7 	bl	8003988 <HAL_GPIO_WritePin>
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	40020800 	.word	0x40020800

0800aa28 <__errno>:
 800aa28:	4b01      	ldr	r3, [pc, #4]	; (800aa30 <__errno+0x8>)
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20000074 	.word	0x20000074

0800aa34 <__libc_init_array>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4d0d      	ldr	r5, [pc, #52]	; (800aa6c <__libc_init_array+0x38>)
 800aa38:	4c0d      	ldr	r4, [pc, #52]	; (800aa70 <__libc_init_array+0x3c>)
 800aa3a:	1b64      	subs	r4, r4, r5
 800aa3c:	10a4      	asrs	r4, r4, #2
 800aa3e:	2600      	movs	r6, #0
 800aa40:	42a6      	cmp	r6, r4
 800aa42:	d109      	bne.n	800aa58 <__libc_init_array+0x24>
 800aa44:	4d0b      	ldr	r5, [pc, #44]	; (800aa74 <__libc_init_array+0x40>)
 800aa46:	4c0c      	ldr	r4, [pc, #48]	; (800aa78 <__libc_init_array+0x44>)
 800aa48:	f001 f834 	bl	800bab4 <_init>
 800aa4c:	1b64      	subs	r4, r4, r5
 800aa4e:	10a4      	asrs	r4, r4, #2
 800aa50:	2600      	movs	r6, #0
 800aa52:	42a6      	cmp	r6, r4
 800aa54:	d105      	bne.n	800aa62 <__libc_init_array+0x2e>
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa5c:	4798      	blx	r3
 800aa5e:	3601      	adds	r6, #1
 800aa60:	e7ee      	b.n	800aa40 <__libc_init_array+0xc>
 800aa62:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa66:	4798      	blx	r3
 800aa68:	3601      	adds	r6, #1
 800aa6a:	e7f2      	b.n	800aa52 <__libc_init_array+0x1e>
 800aa6c:	0800bda4 	.word	0x0800bda4
 800aa70:	0800bda4 	.word	0x0800bda4
 800aa74:	0800bda4 	.word	0x0800bda4
 800aa78:	0800bda8 	.word	0x0800bda8

0800aa7c <malloc>:
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <malloc+0xc>)
 800aa7e:	4601      	mov	r1, r0
 800aa80:	6818      	ldr	r0, [r3, #0]
 800aa82:	f000 b87f 	b.w	800ab84 <_malloc_r>
 800aa86:	bf00      	nop
 800aa88:	20000074 	.word	0x20000074

0800aa8c <free>:
 800aa8c:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <free+0xc>)
 800aa8e:	4601      	mov	r1, r0
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	f000 b80b 	b.w	800aaac <_free_r>
 800aa96:	bf00      	nop
 800aa98:	20000074 	.word	0x20000074

0800aa9c <memset>:
 800aa9c:	4402      	add	r2, r0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d100      	bne.n	800aaa6 <memset+0xa>
 800aaa4:	4770      	bx	lr
 800aaa6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaaa:	e7f9      	b.n	800aaa0 <memset+0x4>

0800aaac <_free_r>:
 800aaac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d044      	beq.n	800ab3c <_free_r+0x90>
 800aab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab6:	9001      	str	r0, [sp, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f1a1 0404 	sub.w	r4, r1, #4
 800aabe:	bfb8      	it	lt
 800aac0:	18e4      	addlt	r4, r4, r3
 800aac2:	f000 fc51 	bl	800b368 <__malloc_lock>
 800aac6:	4a1e      	ldr	r2, [pc, #120]	; (800ab40 <_free_r+0x94>)
 800aac8:	9801      	ldr	r0, [sp, #4]
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	b933      	cbnz	r3, 800aadc <_free_r+0x30>
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	6014      	str	r4, [r2, #0]
 800aad2:	b003      	add	sp, #12
 800aad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aad8:	f000 bc4c 	b.w	800b374 <__malloc_unlock>
 800aadc:	42a3      	cmp	r3, r4
 800aade:	d908      	bls.n	800aaf2 <_free_r+0x46>
 800aae0:	6825      	ldr	r5, [r4, #0]
 800aae2:	1961      	adds	r1, r4, r5
 800aae4:	428b      	cmp	r3, r1
 800aae6:	bf01      	itttt	eq
 800aae8:	6819      	ldreq	r1, [r3, #0]
 800aaea:	685b      	ldreq	r3, [r3, #4]
 800aaec:	1949      	addeq	r1, r1, r5
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	e7ed      	b.n	800aace <_free_r+0x22>
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	b10b      	cbz	r3, 800aafc <_free_r+0x50>
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d9fa      	bls.n	800aaf2 <_free_r+0x46>
 800aafc:	6811      	ldr	r1, [r2, #0]
 800aafe:	1855      	adds	r5, r2, r1
 800ab00:	42a5      	cmp	r5, r4
 800ab02:	d10b      	bne.n	800ab1c <_free_r+0x70>
 800ab04:	6824      	ldr	r4, [r4, #0]
 800ab06:	4421      	add	r1, r4
 800ab08:	1854      	adds	r4, r2, r1
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	6011      	str	r1, [r2, #0]
 800ab0e:	d1e0      	bne.n	800aad2 <_free_r+0x26>
 800ab10:	681c      	ldr	r4, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	6053      	str	r3, [r2, #4]
 800ab16:	4421      	add	r1, r4
 800ab18:	6011      	str	r1, [r2, #0]
 800ab1a:	e7da      	b.n	800aad2 <_free_r+0x26>
 800ab1c:	d902      	bls.n	800ab24 <_free_r+0x78>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	e7d6      	b.n	800aad2 <_free_r+0x26>
 800ab24:	6825      	ldr	r5, [r4, #0]
 800ab26:	1961      	adds	r1, r4, r5
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	bf04      	itt	eq
 800ab2c:	6819      	ldreq	r1, [r3, #0]
 800ab2e:	685b      	ldreq	r3, [r3, #4]
 800ab30:	6063      	str	r3, [r4, #4]
 800ab32:	bf04      	itt	eq
 800ab34:	1949      	addeq	r1, r1, r5
 800ab36:	6021      	streq	r1, [r4, #0]
 800ab38:	6054      	str	r4, [r2, #4]
 800ab3a:	e7ca      	b.n	800aad2 <_free_r+0x26>
 800ab3c:	b003      	add	sp, #12
 800ab3e:	bd30      	pop	{r4, r5, pc}
 800ab40:	200010f4 	.word	0x200010f4

0800ab44 <sbrk_aligned>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4e0e      	ldr	r6, [pc, #56]	; (800ab80 <sbrk_aligned+0x3c>)
 800ab48:	460c      	mov	r4, r1
 800ab4a:	6831      	ldr	r1, [r6, #0]
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	b911      	cbnz	r1, 800ab56 <sbrk_aligned+0x12>
 800ab50:	f000 f91a 	bl	800ad88 <_sbrk_r>
 800ab54:	6030      	str	r0, [r6, #0]
 800ab56:	4621      	mov	r1, r4
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f000 f915 	bl	800ad88 <_sbrk_r>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	d00a      	beq.n	800ab78 <sbrk_aligned+0x34>
 800ab62:	1cc4      	adds	r4, r0, #3
 800ab64:	f024 0403 	bic.w	r4, r4, #3
 800ab68:	42a0      	cmp	r0, r4
 800ab6a:	d007      	beq.n	800ab7c <sbrk_aligned+0x38>
 800ab6c:	1a21      	subs	r1, r4, r0
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 f90a 	bl	800ad88 <_sbrk_r>
 800ab74:	3001      	adds	r0, #1
 800ab76:	d101      	bne.n	800ab7c <sbrk_aligned+0x38>
 800ab78:	f04f 34ff 	mov.w	r4, #4294967295
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	200010f8 	.word	0x200010f8

0800ab84 <_malloc_r>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	1ccd      	adds	r5, r1, #3
 800ab8a:	f025 0503 	bic.w	r5, r5, #3
 800ab8e:	3508      	adds	r5, #8
 800ab90:	2d0c      	cmp	r5, #12
 800ab92:	bf38      	it	cc
 800ab94:	250c      	movcc	r5, #12
 800ab96:	2d00      	cmp	r5, #0
 800ab98:	4607      	mov	r7, r0
 800ab9a:	db01      	blt.n	800aba0 <_malloc_r+0x1c>
 800ab9c:	42a9      	cmp	r1, r5
 800ab9e:	d905      	bls.n	800abac <_malloc_r+0x28>
 800aba0:	230c      	movs	r3, #12
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	2600      	movs	r6, #0
 800aba6:	4630      	mov	r0, r6
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	4e2e      	ldr	r6, [pc, #184]	; (800ac68 <_malloc_r+0xe4>)
 800abae:	f000 fbdb 	bl	800b368 <__malloc_lock>
 800abb2:	6833      	ldr	r3, [r6, #0]
 800abb4:	461c      	mov	r4, r3
 800abb6:	bb34      	cbnz	r4, 800ac06 <_malloc_r+0x82>
 800abb8:	4629      	mov	r1, r5
 800abba:	4638      	mov	r0, r7
 800abbc:	f7ff ffc2 	bl	800ab44 <sbrk_aligned>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	4604      	mov	r4, r0
 800abc4:	d14d      	bne.n	800ac62 <_malloc_r+0xde>
 800abc6:	6834      	ldr	r4, [r6, #0]
 800abc8:	4626      	mov	r6, r4
 800abca:	2e00      	cmp	r6, #0
 800abcc:	d140      	bne.n	800ac50 <_malloc_r+0xcc>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	4631      	mov	r1, r6
 800abd2:	4638      	mov	r0, r7
 800abd4:	eb04 0803 	add.w	r8, r4, r3
 800abd8:	f000 f8d6 	bl	800ad88 <_sbrk_r>
 800abdc:	4580      	cmp	r8, r0
 800abde:	d13a      	bne.n	800ac56 <_malloc_r+0xd2>
 800abe0:	6821      	ldr	r1, [r4, #0]
 800abe2:	3503      	adds	r5, #3
 800abe4:	1a6d      	subs	r5, r5, r1
 800abe6:	f025 0503 	bic.w	r5, r5, #3
 800abea:	3508      	adds	r5, #8
 800abec:	2d0c      	cmp	r5, #12
 800abee:	bf38      	it	cc
 800abf0:	250c      	movcc	r5, #12
 800abf2:	4629      	mov	r1, r5
 800abf4:	4638      	mov	r0, r7
 800abf6:	f7ff ffa5 	bl	800ab44 <sbrk_aligned>
 800abfa:	3001      	adds	r0, #1
 800abfc:	d02b      	beq.n	800ac56 <_malloc_r+0xd2>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	442b      	add	r3, r5
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	e00e      	b.n	800ac24 <_malloc_r+0xa0>
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	1b52      	subs	r2, r2, r5
 800ac0a:	d41e      	bmi.n	800ac4a <_malloc_r+0xc6>
 800ac0c:	2a0b      	cmp	r2, #11
 800ac0e:	d916      	bls.n	800ac3e <_malloc_r+0xba>
 800ac10:	1961      	adds	r1, r4, r5
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	6025      	str	r5, [r4, #0]
 800ac16:	bf18      	it	ne
 800ac18:	6059      	strne	r1, [r3, #4]
 800ac1a:	6863      	ldr	r3, [r4, #4]
 800ac1c:	bf08      	it	eq
 800ac1e:	6031      	streq	r1, [r6, #0]
 800ac20:	5162      	str	r2, [r4, r5]
 800ac22:	604b      	str	r3, [r1, #4]
 800ac24:	4638      	mov	r0, r7
 800ac26:	f104 060b 	add.w	r6, r4, #11
 800ac2a:	f000 fba3 	bl	800b374 <__malloc_unlock>
 800ac2e:	f026 0607 	bic.w	r6, r6, #7
 800ac32:	1d23      	adds	r3, r4, #4
 800ac34:	1af2      	subs	r2, r6, r3
 800ac36:	d0b6      	beq.n	800aba6 <_malloc_r+0x22>
 800ac38:	1b9b      	subs	r3, r3, r6
 800ac3a:	50a3      	str	r3, [r4, r2]
 800ac3c:	e7b3      	b.n	800aba6 <_malloc_r+0x22>
 800ac3e:	6862      	ldr	r2, [r4, #4]
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	bf0c      	ite	eq
 800ac44:	6032      	streq	r2, [r6, #0]
 800ac46:	605a      	strne	r2, [r3, #4]
 800ac48:	e7ec      	b.n	800ac24 <_malloc_r+0xa0>
 800ac4a:	4623      	mov	r3, r4
 800ac4c:	6864      	ldr	r4, [r4, #4]
 800ac4e:	e7b2      	b.n	800abb6 <_malloc_r+0x32>
 800ac50:	4634      	mov	r4, r6
 800ac52:	6876      	ldr	r6, [r6, #4]
 800ac54:	e7b9      	b.n	800abca <_malloc_r+0x46>
 800ac56:	230c      	movs	r3, #12
 800ac58:	603b      	str	r3, [r7, #0]
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	f000 fb8a 	bl	800b374 <__malloc_unlock>
 800ac60:	e7a1      	b.n	800aba6 <_malloc_r+0x22>
 800ac62:	6025      	str	r5, [r4, #0]
 800ac64:	e7de      	b.n	800ac24 <_malloc_r+0xa0>
 800ac66:	bf00      	nop
 800ac68:	200010f4 	.word	0x200010f4

0800ac6c <iprintf>:
 800ac6c:	b40f      	push	{r0, r1, r2, r3}
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <iprintf+0x2c>)
 800ac70:	b513      	push	{r0, r1, r4, lr}
 800ac72:	681c      	ldr	r4, [r3, #0]
 800ac74:	b124      	cbz	r4, 800ac80 <iprintf+0x14>
 800ac76:	69a3      	ldr	r3, [r4, #24]
 800ac78:	b913      	cbnz	r3, 800ac80 <iprintf+0x14>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fa6e 	bl	800b15c <__sinit>
 800ac80:	ab05      	add	r3, sp, #20
 800ac82:	9a04      	ldr	r2, [sp, #16]
 800ac84:	68a1      	ldr	r1, [r4, #8]
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fba3 	bl	800b3d4 <_vfiprintf_r>
 800ac8e:	b002      	add	sp, #8
 800ac90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac94:	b004      	add	sp, #16
 800ac96:	4770      	bx	lr
 800ac98:	20000074 	.word	0x20000074

0800ac9c <_puts_r>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	460e      	mov	r6, r1
 800aca0:	4605      	mov	r5, r0
 800aca2:	b118      	cbz	r0, 800acac <_puts_r+0x10>
 800aca4:	6983      	ldr	r3, [r0, #24]
 800aca6:	b90b      	cbnz	r3, 800acac <_puts_r+0x10>
 800aca8:	f000 fa58 	bl	800b15c <__sinit>
 800acac:	69ab      	ldr	r3, [r5, #24]
 800acae:	68ac      	ldr	r4, [r5, #8]
 800acb0:	b913      	cbnz	r3, 800acb8 <_puts_r+0x1c>
 800acb2:	4628      	mov	r0, r5
 800acb4:	f000 fa52 	bl	800b15c <__sinit>
 800acb8:	4b2c      	ldr	r3, [pc, #176]	; (800ad6c <_puts_r+0xd0>)
 800acba:	429c      	cmp	r4, r3
 800acbc:	d120      	bne.n	800ad00 <_puts_r+0x64>
 800acbe:	686c      	ldr	r4, [r5, #4]
 800acc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc2:	07db      	lsls	r3, r3, #31
 800acc4:	d405      	bmi.n	800acd2 <_puts_r+0x36>
 800acc6:	89a3      	ldrh	r3, [r4, #12]
 800acc8:	0598      	lsls	r0, r3, #22
 800acca:	d402      	bmi.n	800acd2 <_puts_r+0x36>
 800accc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acce:	f000 fae3 	bl	800b298 <__retarget_lock_acquire_recursive>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	0719      	lsls	r1, r3, #28
 800acd6:	d51d      	bpl.n	800ad14 <_puts_r+0x78>
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	b1db      	cbz	r3, 800ad14 <_puts_r+0x78>
 800acdc:	3e01      	subs	r6, #1
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ace4:	3b01      	subs	r3, #1
 800ace6:	60a3      	str	r3, [r4, #8]
 800ace8:	bb39      	cbnz	r1, 800ad3a <_puts_r+0x9e>
 800acea:	2b00      	cmp	r3, #0
 800acec:	da38      	bge.n	800ad60 <_puts_r+0xc4>
 800acee:	4622      	mov	r2, r4
 800acf0:	210a      	movs	r1, #10
 800acf2:	4628      	mov	r0, r5
 800acf4:	f000 f858 	bl	800ada8 <__swbuf_r>
 800acf8:	3001      	adds	r0, #1
 800acfa:	d011      	beq.n	800ad20 <_puts_r+0x84>
 800acfc:	250a      	movs	r5, #10
 800acfe:	e011      	b.n	800ad24 <_puts_r+0x88>
 800ad00:	4b1b      	ldr	r3, [pc, #108]	; (800ad70 <_puts_r+0xd4>)
 800ad02:	429c      	cmp	r4, r3
 800ad04:	d101      	bne.n	800ad0a <_puts_r+0x6e>
 800ad06:	68ac      	ldr	r4, [r5, #8]
 800ad08:	e7da      	b.n	800acc0 <_puts_r+0x24>
 800ad0a:	4b1a      	ldr	r3, [pc, #104]	; (800ad74 <_puts_r+0xd8>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	bf08      	it	eq
 800ad10:	68ec      	ldreq	r4, [r5, #12]
 800ad12:	e7d5      	b.n	800acc0 <_puts_r+0x24>
 800ad14:	4621      	mov	r1, r4
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 f898 	bl	800ae4c <__swsetup_r>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d0dd      	beq.n	800acdc <_puts_r+0x40>
 800ad20:	f04f 35ff 	mov.w	r5, #4294967295
 800ad24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad26:	07da      	lsls	r2, r3, #31
 800ad28:	d405      	bmi.n	800ad36 <_puts_r+0x9a>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	059b      	lsls	r3, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_puts_r+0x9a>
 800ad30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad32:	f000 fab2 	bl	800b29a <__retarget_lock_release_recursive>
 800ad36:	4628      	mov	r0, r5
 800ad38:	bd70      	pop	{r4, r5, r6, pc}
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	da04      	bge.n	800ad48 <_puts_r+0xac>
 800ad3e:	69a2      	ldr	r2, [r4, #24]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	dc06      	bgt.n	800ad52 <_puts_r+0xb6>
 800ad44:	290a      	cmp	r1, #10
 800ad46:	d004      	beq.n	800ad52 <_puts_r+0xb6>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	7019      	strb	r1, [r3, #0]
 800ad50:	e7c5      	b.n	800acde <_puts_r+0x42>
 800ad52:	4622      	mov	r2, r4
 800ad54:	4628      	mov	r0, r5
 800ad56:	f000 f827 	bl	800ada8 <__swbuf_r>
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d1bf      	bne.n	800acde <_puts_r+0x42>
 800ad5e:	e7df      	b.n	800ad20 <_puts_r+0x84>
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	250a      	movs	r5, #10
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	6022      	str	r2, [r4, #0]
 800ad68:	701d      	strb	r5, [r3, #0]
 800ad6a:	e7db      	b.n	800ad24 <_puts_r+0x88>
 800ad6c:	0800bd28 	.word	0x0800bd28
 800ad70:	0800bd48 	.word	0x0800bd48
 800ad74:	0800bd08 	.word	0x0800bd08

0800ad78 <puts>:
 800ad78:	4b02      	ldr	r3, [pc, #8]	; (800ad84 <puts+0xc>)
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	6818      	ldr	r0, [r3, #0]
 800ad7e:	f7ff bf8d 	b.w	800ac9c <_puts_r>
 800ad82:	bf00      	nop
 800ad84:	20000074 	.word	0x20000074

0800ad88 <_sbrk_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_sbrk_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f7 fcdc 	bl	8002750 <_sbrk>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_sbrk_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_sbrk_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20001100 	.word	0x20001100

0800ada8 <__swbuf_r>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	460e      	mov	r6, r1
 800adac:	4614      	mov	r4, r2
 800adae:	4605      	mov	r5, r0
 800adb0:	b118      	cbz	r0, 800adba <__swbuf_r+0x12>
 800adb2:	6983      	ldr	r3, [r0, #24]
 800adb4:	b90b      	cbnz	r3, 800adba <__swbuf_r+0x12>
 800adb6:	f000 f9d1 	bl	800b15c <__sinit>
 800adba:	4b21      	ldr	r3, [pc, #132]	; (800ae40 <__swbuf_r+0x98>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d12b      	bne.n	800ae18 <__swbuf_r+0x70>
 800adc0:	686c      	ldr	r4, [r5, #4]
 800adc2:	69a3      	ldr	r3, [r4, #24]
 800adc4:	60a3      	str	r3, [r4, #8]
 800adc6:	89a3      	ldrh	r3, [r4, #12]
 800adc8:	071a      	lsls	r2, r3, #28
 800adca:	d52f      	bpl.n	800ae2c <__swbuf_r+0x84>
 800adcc:	6923      	ldr	r3, [r4, #16]
 800adce:	b36b      	cbz	r3, 800ae2c <__swbuf_r+0x84>
 800add0:	6923      	ldr	r3, [r4, #16]
 800add2:	6820      	ldr	r0, [r4, #0]
 800add4:	1ac0      	subs	r0, r0, r3
 800add6:	6963      	ldr	r3, [r4, #20]
 800add8:	b2f6      	uxtb	r6, r6
 800adda:	4283      	cmp	r3, r0
 800addc:	4637      	mov	r7, r6
 800adde:	dc04      	bgt.n	800adea <__swbuf_r+0x42>
 800ade0:	4621      	mov	r1, r4
 800ade2:	4628      	mov	r0, r5
 800ade4:	f000 f926 	bl	800b034 <_fflush_r>
 800ade8:	bb30      	cbnz	r0, 800ae38 <__swbuf_r+0x90>
 800adea:	68a3      	ldr	r3, [r4, #8]
 800adec:	3b01      	subs	r3, #1
 800adee:	60a3      	str	r3, [r4, #8]
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	6022      	str	r2, [r4, #0]
 800adf6:	701e      	strb	r6, [r3, #0]
 800adf8:	6963      	ldr	r3, [r4, #20]
 800adfa:	3001      	adds	r0, #1
 800adfc:	4283      	cmp	r3, r0
 800adfe:	d004      	beq.n	800ae0a <__swbuf_r+0x62>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	07db      	lsls	r3, r3, #31
 800ae04:	d506      	bpl.n	800ae14 <__swbuf_r+0x6c>
 800ae06:	2e0a      	cmp	r6, #10
 800ae08:	d104      	bne.n	800ae14 <__swbuf_r+0x6c>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f000 f911 	bl	800b034 <_fflush_r>
 800ae12:	b988      	cbnz	r0, 800ae38 <__swbuf_r+0x90>
 800ae14:	4638      	mov	r0, r7
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae18:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <__swbuf_r+0x9c>)
 800ae1a:	429c      	cmp	r4, r3
 800ae1c:	d101      	bne.n	800ae22 <__swbuf_r+0x7a>
 800ae1e:	68ac      	ldr	r4, [r5, #8]
 800ae20:	e7cf      	b.n	800adc2 <__swbuf_r+0x1a>
 800ae22:	4b09      	ldr	r3, [pc, #36]	; (800ae48 <__swbuf_r+0xa0>)
 800ae24:	429c      	cmp	r4, r3
 800ae26:	bf08      	it	eq
 800ae28:	68ec      	ldreq	r4, [r5, #12]
 800ae2a:	e7ca      	b.n	800adc2 <__swbuf_r+0x1a>
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 f80c 	bl	800ae4c <__swsetup_r>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d0cb      	beq.n	800add0 <__swbuf_r+0x28>
 800ae38:	f04f 37ff 	mov.w	r7, #4294967295
 800ae3c:	e7ea      	b.n	800ae14 <__swbuf_r+0x6c>
 800ae3e:	bf00      	nop
 800ae40:	0800bd28 	.word	0x0800bd28
 800ae44:	0800bd48 	.word	0x0800bd48
 800ae48:	0800bd08 	.word	0x0800bd08

0800ae4c <__swsetup_r>:
 800ae4c:	4b32      	ldr	r3, [pc, #200]	; (800af18 <__swsetup_r+0xcc>)
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	681d      	ldr	r5, [r3, #0]
 800ae52:	4606      	mov	r6, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	b125      	cbz	r5, 800ae62 <__swsetup_r+0x16>
 800ae58:	69ab      	ldr	r3, [r5, #24]
 800ae5a:	b913      	cbnz	r3, 800ae62 <__swsetup_r+0x16>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f97d 	bl	800b15c <__sinit>
 800ae62:	4b2e      	ldr	r3, [pc, #184]	; (800af1c <__swsetup_r+0xd0>)
 800ae64:	429c      	cmp	r4, r3
 800ae66:	d10f      	bne.n	800ae88 <__swsetup_r+0x3c>
 800ae68:	686c      	ldr	r4, [r5, #4]
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae70:	0719      	lsls	r1, r3, #28
 800ae72:	d42c      	bmi.n	800aece <__swsetup_r+0x82>
 800ae74:	06dd      	lsls	r5, r3, #27
 800ae76:	d411      	bmi.n	800ae9c <__swsetup_r+0x50>
 800ae78:	2309      	movs	r3, #9
 800ae7a:	6033      	str	r3, [r6, #0]
 800ae7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae80:	81a3      	strh	r3, [r4, #12]
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295
 800ae86:	e03e      	b.n	800af06 <__swsetup_r+0xba>
 800ae88:	4b25      	ldr	r3, [pc, #148]	; (800af20 <__swsetup_r+0xd4>)
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	d101      	bne.n	800ae92 <__swsetup_r+0x46>
 800ae8e:	68ac      	ldr	r4, [r5, #8]
 800ae90:	e7eb      	b.n	800ae6a <__swsetup_r+0x1e>
 800ae92:	4b24      	ldr	r3, [pc, #144]	; (800af24 <__swsetup_r+0xd8>)
 800ae94:	429c      	cmp	r4, r3
 800ae96:	bf08      	it	eq
 800ae98:	68ec      	ldreq	r4, [r5, #12]
 800ae9a:	e7e6      	b.n	800ae6a <__swsetup_r+0x1e>
 800ae9c:	0758      	lsls	r0, r3, #29
 800ae9e:	d512      	bpl.n	800aec6 <__swsetup_r+0x7a>
 800aea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aea2:	b141      	cbz	r1, 800aeb6 <__swsetup_r+0x6a>
 800aea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea8:	4299      	cmp	r1, r3
 800aeaa:	d002      	beq.n	800aeb2 <__swsetup_r+0x66>
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7ff fdfd 	bl	800aaac <_free_r>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6363      	str	r3, [r4, #52]	; 0x34
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	2300      	movs	r3, #0
 800aec0:	6063      	str	r3, [r4, #4]
 800aec2:	6923      	ldr	r3, [r4, #16]
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	f043 0308 	orr.w	r3, r3, #8
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	b94b      	cbnz	r3, 800aee6 <__swsetup_r+0x9a>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aedc:	d003      	beq.n	800aee6 <__swsetup_r+0x9a>
 800aede:	4621      	mov	r1, r4
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 fa01 	bl	800b2e8 <__smakebuf_r>
 800aee6:	89a0      	ldrh	r0, [r4, #12]
 800aee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeec:	f010 0301 	ands.w	r3, r0, #1
 800aef0:	d00a      	beq.n	800af08 <__swsetup_r+0xbc>
 800aef2:	2300      	movs	r3, #0
 800aef4:	60a3      	str	r3, [r4, #8]
 800aef6:	6963      	ldr	r3, [r4, #20]
 800aef8:	425b      	negs	r3, r3
 800aefa:	61a3      	str	r3, [r4, #24]
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	b943      	cbnz	r3, 800af12 <__swsetup_r+0xc6>
 800af00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af04:	d1ba      	bne.n	800ae7c <__swsetup_r+0x30>
 800af06:	bd70      	pop	{r4, r5, r6, pc}
 800af08:	0781      	lsls	r1, r0, #30
 800af0a:	bf58      	it	pl
 800af0c:	6963      	ldrpl	r3, [r4, #20]
 800af0e:	60a3      	str	r3, [r4, #8]
 800af10:	e7f4      	b.n	800aefc <__swsetup_r+0xb0>
 800af12:	2000      	movs	r0, #0
 800af14:	e7f7      	b.n	800af06 <__swsetup_r+0xba>
 800af16:	bf00      	nop
 800af18:	20000074 	.word	0x20000074
 800af1c:	0800bd28 	.word	0x0800bd28
 800af20:	0800bd48 	.word	0x0800bd48
 800af24:	0800bd08 	.word	0x0800bd08

0800af28 <__sflush_r>:
 800af28:	898a      	ldrh	r2, [r1, #12]
 800af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	4605      	mov	r5, r0
 800af30:	0710      	lsls	r0, r2, #28
 800af32:	460c      	mov	r4, r1
 800af34:	d458      	bmi.n	800afe8 <__sflush_r+0xc0>
 800af36:	684b      	ldr	r3, [r1, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dc05      	bgt.n	800af48 <__sflush_r+0x20>
 800af3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dc02      	bgt.n	800af48 <__sflush_r+0x20>
 800af42:	2000      	movs	r0, #0
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	d0f9      	beq.n	800af42 <__sflush_r+0x1a>
 800af4e:	2300      	movs	r3, #0
 800af50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af54:	682f      	ldr	r7, [r5, #0]
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	d032      	beq.n	800afc0 <__sflush_r+0x98>
 800af5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	075a      	lsls	r2, r3, #29
 800af60:	d505      	bpl.n	800af6e <__sflush_r+0x46>
 800af62:	6863      	ldr	r3, [r4, #4]
 800af64:	1ac0      	subs	r0, r0, r3
 800af66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af68:	b10b      	cbz	r3, 800af6e <__sflush_r+0x46>
 800af6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af6c:	1ac0      	subs	r0, r0, r3
 800af6e:	2300      	movs	r3, #0
 800af70:	4602      	mov	r2, r0
 800af72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af74:	6a21      	ldr	r1, [r4, #32]
 800af76:	4628      	mov	r0, r5
 800af78:	47b0      	blx	r6
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	d106      	bne.n	800af8e <__sflush_r+0x66>
 800af80:	6829      	ldr	r1, [r5, #0]
 800af82:	291d      	cmp	r1, #29
 800af84:	d82c      	bhi.n	800afe0 <__sflush_r+0xb8>
 800af86:	4a2a      	ldr	r2, [pc, #168]	; (800b030 <__sflush_r+0x108>)
 800af88:	40ca      	lsrs	r2, r1
 800af8a:	07d6      	lsls	r6, r2, #31
 800af8c:	d528      	bpl.n	800afe0 <__sflush_r+0xb8>
 800af8e:	2200      	movs	r2, #0
 800af90:	6062      	str	r2, [r4, #4]
 800af92:	04d9      	lsls	r1, r3, #19
 800af94:	6922      	ldr	r2, [r4, #16]
 800af96:	6022      	str	r2, [r4, #0]
 800af98:	d504      	bpl.n	800afa4 <__sflush_r+0x7c>
 800af9a:	1c42      	adds	r2, r0, #1
 800af9c:	d101      	bne.n	800afa2 <__sflush_r+0x7a>
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	b903      	cbnz	r3, 800afa4 <__sflush_r+0x7c>
 800afa2:	6560      	str	r0, [r4, #84]	; 0x54
 800afa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa6:	602f      	str	r7, [r5, #0]
 800afa8:	2900      	cmp	r1, #0
 800afaa:	d0ca      	beq.n	800af42 <__sflush_r+0x1a>
 800afac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb0:	4299      	cmp	r1, r3
 800afb2:	d002      	beq.n	800afba <__sflush_r+0x92>
 800afb4:	4628      	mov	r0, r5
 800afb6:	f7ff fd79 	bl	800aaac <_free_r>
 800afba:	2000      	movs	r0, #0
 800afbc:	6360      	str	r0, [r4, #52]	; 0x34
 800afbe:	e7c1      	b.n	800af44 <__sflush_r+0x1c>
 800afc0:	6a21      	ldr	r1, [r4, #32]
 800afc2:	2301      	movs	r3, #1
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b0      	blx	r6
 800afc8:	1c41      	adds	r1, r0, #1
 800afca:	d1c7      	bne.n	800af5c <__sflush_r+0x34>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0c4      	beq.n	800af5c <__sflush_r+0x34>
 800afd2:	2b1d      	cmp	r3, #29
 800afd4:	d001      	beq.n	800afda <__sflush_r+0xb2>
 800afd6:	2b16      	cmp	r3, #22
 800afd8:	d101      	bne.n	800afde <__sflush_r+0xb6>
 800afda:	602f      	str	r7, [r5, #0]
 800afdc:	e7b1      	b.n	800af42 <__sflush_r+0x1a>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	e7ad      	b.n	800af44 <__sflush_r+0x1c>
 800afe8:	690f      	ldr	r7, [r1, #16]
 800afea:	2f00      	cmp	r7, #0
 800afec:	d0a9      	beq.n	800af42 <__sflush_r+0x1a>
 800afee:	0793      	lsls	r3, r2, #30
 800aff0:	680e      	ldr	r6, [r1, #0]
 800aff2:	bf08      	it	eq
 800aff4:	694b      	ldreq	r3, [r1, #20]
 800aff6:	600f      	str	r7, [r1, #0]
 800aff8:	bf18      	it	ne
 800affa:	2300      	movne	r3, #0
 800affc:	eba6 0807 	sub.w	r8, r6, r7
 800b000:	608b      	str	r3, [r1, #8]
 800b002:	f1b8 0f00 	cmp.w	r8, #0
 800b006:	dd9c      	ble.n	800af42 <__sflush_r+0x1a>
 800b008:	6a21      	ldr	r1, [r4, #32]
 800b00a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b00c:	4643      	mov	r3, r8
 800b00e:	463a      	mov	r2, r7
 800b010:	4628      	mov	r0, r5
 800b012:	47b0      	blx	r6
 800b014:	2800      	cmp	r0, #0
 800b016:	dc06      	bgt.n	800b026 <__sflush_r+0xfe>
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b01e:	81a3      	strh	r3, [r4, #12]
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	e78e      	b.n	800af44 <__sflush_r+0x1c>
 800b026:	4407      	add	r7, r0
 800b028:	eba8 0800 	sub.w	r8, r8, r0
 800b02c:	e7e9      	b.n	800b002 <__sflush_r+0xda>
 800b02e:	bf00      	nop
 800b030:	20400001 	.word	0x20400001

0800b034 <_fflush_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b913      	cbnz	r3, 800b044 <_fflush_r+0x10>
 800b03e:	2500      	movs	r5, #0
 800b040:	4628      	mov	r0, r5
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	b118      	cbz	r0, 800b04e <_fflush_r+0x1a>
 800b046:	6983      	ldr	r3, [r0, #24]
 800b048:	b90b      	cbnz	r3, 800b04e <_fflush_r+0x1a>
 800b04a:	f000 f887 	bl	800b15c <__sinit>
 800b04e:	4b14      	ldr	r3, [pc, #80]	; (800b0a0 <_fflush_r+0x6c>)
 800b050:	429c      	cmp	r4, r3
 800b052:	d11b      	bne.n	800b08c <_fflush_r+0x58>
 800b054:	686c      	ldr	r4, [r5, #4]
 800b056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0ef      	beq.n	800b03e <_fflush_r+0xa>
 800b05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b060:	07d0      	lsls	r0, r2, #31
 800b062:	d404      	bmi.n	800b06e <_fflush_r+0x3a>
 800b064:	0599      	lsls	r1, r3, #22
 800b066:	d402      	bmi.n	800b06e <_fflush_r+0x3a>
 800b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06a:	f000 f915 	bl	800b298 <__retarget_lock_acquire_recursive>
 800b06e:	4628      	mov	r0, r5
 800b070:	4621      	mov	r1, r4
 800b072:	f7ff ff59 	bl	800af28 <__sflush_r>
 800b076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b078:	07da      	lsls	r2, r3, #31
 800b07a:	4605      	mov	r5, r0
 800b07c:	d4e0      	bmi.n	800b040 <_fflush_r+0xc>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	059b      	lsls	r3, r3, #22
 800b082:	d4dd      	bmi.n	800b040 <_fflush_r+0xc>
 800b084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b086:	f000 f908 	bl	800b29a <__retarget_lock_release_recursive>
 800b08a:	e7d9      	b.n	800b040 <_fflush_r+0xc>
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <_fflush_r+0x70>)
 800b08e:	429c      	cmp	r4, r3
 800b090:	d101      	bne.n	800b096 <_fflush_r+0x62>
 800b092:	68ac      	ldr	r4, [r5, #8]
 800b094:	e7df      	b.n	800b056 <_fflush_r+0x22>
 800b096:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <_fflush_r+0x74>)
 800b098:	429c      	cmp	r4, r3
 800b09a:	bf08      	it	eq
 800b09c:	68ec      	ldreq	r4, [r5, #12]
 800b09e:	e7da      	b.n	800b056 <_fflush_r+0x22>
 800b0a0:	0800bd28 	.word	0x0800bd28
 800b0a4:	0800bd48 	.word	0x0800bd48
 800b0a8:	0800bd08 	.word	0x0800bd08

0800b0ac <std>:
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	b510      	push	{r4, lr}
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b0b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ba:	6083      	str	r3, [r0, #8]
 800b0bc:	8181      	strh	r1, [r0, #12]
 800b0be:	6643      	str	r3, [r0, #100]	; 0x64
 800b0c0:	81c2      	strh	r2, [r0, #14]
 800b0c2:	6183      	str	r3, [r0, #24]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	2208      	movs	r2, #8
 800b0c8:	305c      	adds	r0, #92	; 0x5c
 800b0ca:	f7ff fce7 	bl	800aa9c <memset>
 800b0ce:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <std+0x38>)
 800b0d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <std+0x3c>)
 800b0d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0d6:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <std+0x40>)
 800b0d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0da:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <std+0x44>)
 800b0dc:	6224      	str	r4, [r4, #32]
 800b0de:	6323      	str	r3, [r4, #48]	; 0x30
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0800b95d 	.word	0x0800b95d
 800b0e8:	0800b97f 	.word	0x0800b97f
 800b0ec:	0800b9b7 	.word	0x0800b9b7
 800b0f0:	0800b9db 	.word	0x0800b9db

0800b0f4 <_cleanup_r>:
 800b0f4:	4901      	ldr	r1, [pc, #4]	; (800b0fc <_cleanup_r+0x8>)
 800b0f6:	f000 b8af 	b.w	800b258 <_fwalk_reent>
 800b0fa:	bf00      	nop
 800b0fc:	0800b035 	.word	0x0800b035

0800b100 <__sfmoreglue>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	2268      	movs	r2, #104	; 0x68
 800b104:	1e4d      	subs	r5, r1, #1
 800b106:	4355      	muls	r5, r2
 800b108:	460e      	mov	r6, r1
 800b10a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b10e:	f7ff fd39 	bl	800ab84 <_malloc_r>
 800b112:	4604      	mov	r4, r0
 800b114:	b140      	cbz	r0, 800b128 <__sfmoreglue+0x28>
 800b116:	2100      	movs	r1, #0
 800b118:	e9c0 1600 	strd	r1, r6, [r0]
 800b11c:	300c      	adds	r0, #12
 800b11e:	60a0      	str	r0, [r4, #8]
 800b120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b124:	f7ff fcba 	bl	800aa9c <memset>
 800b128:	4620      	mov	r0, r4
 800b12a:	bd70      	pop	{r4, r5, r6, pc}

0800b12c <__sfp_lock_acquire>:
 800b12c:	4801      	ldr	r0, [pc, #4]	; (800b134 <__sfp_lock_acquire+0x8>)
 800b12e:	f000 b8b3 	b.w	800b298 <__retarget_lock_acquire_recursive>
 800b132:	bf00      	nop
 800b134:	200010fd 	.word	0x200010fd

0800b138 <__sfp_lock_release>:
 800b138:	4801      	ldr	r0, [pc, #4]	; (800b140 <__sfp_lock_release+0x8>)
 800b13a:	f000 b8ae 	b.w	800b29a <__retarget_lock_release_recursive>
 800b13e:	bf00      	nop
 800b140:	200010fd 	.word	0x200010fd

0800b144 <__sinit_lock_acquire>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__sinit_lock_acquire+0x8>)
 800b146:	f000 b8a7 	b.w	800b298 <__retarget_lock_acquire_recursive>
 800b14a:	bf00      	nop
 800b14c:	200010fe 	.word	0x200010fe

0800b150 <__sinit_lock_release>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__sinit_lock_release+0x8>)
 800b152:	f000 b8a2 	b.w	800b29a <__retarget_lock_release_recursive>
 800b156:	bf00      	nop
 800b158:	200010fe 	.word	0x200010fe

0800b15c <__sinit>:
 800b15c:	b510      	push	{r4, lr}
 800b15e:	4604      	mov	r4, r0
 800b160:	f7ff fff0 	bl	800b144 <__sinit_lock_acquire>
 800b164:	69a3      	ldr	r3, [r4, #24]
 800b166:	b11b      	cbz	r3, 800b170 <__sinit+0x14>
 800b168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b16c:	f7ff bff0 	b.w	800b150 <__sinit_lock_release>
 800b170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b174:	6523      	str	r3, [r4, #80]	; 0x50
 800b176:	4b13      	ldr	r3, [pc, #76]	; (800b1c4 <__sinit+0x68>)
 800b178:	4a13      	ldr	r2, [pc, #76]	; (800b1c8 <__sinit+0x6c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b17e:	42a3      	cmp	r3, r4
 800b180:	bf04      	itt	eq
 800b182:	2301      	moveq	r3, #1
 800b184:	61a3      	streq	r3, [r4, #24]
 800b186:	4620      	mov	r0, r4
 800b188:	f000 f820 	bl	800b1cc <__sfp>
 800b18c:	6060      	str	r0, [r4, #4]
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 f81c 	bl	800b1cc <__sfp>
 800b194:	60a0      	str	r0, [r4, #8]
 800b196:	4620      	mov	r0, r4
 800b198:	f000 f818 	bl	800b1cc <__sfp>
 800b19c:	2200      	movs	r2, #0
 800b19e:	60e0      	str	r0, [r4, #12]
 800b1a0:	2104      	movs	r1, #4
 800b1a2:	6860      	ldr	r0, [r4, #4]
 800b1a4:	f7ff ff82 	bl	800b0ac <std>
 800b1a8:	68a0      	ldr	r0, [r4, #8]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	2109      	movs	r1, #9
 800b1ae:	f7ff ff7d 	bl	800b0ac <std>
 800b1b2:	68e0      	ldr	r0, [r4, #12]
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	2112      	movs	r1, #18
 800b1b8:	f7ff ff78 	bl	800b0ac <std>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	61a3      	str	r3, [r4, #24]
 800b1c0:	e7d2      	b.n	800b168 <__sinit+0xc>
 800b1c2:	bf00      	nop
 800b1c4:	0800bd04 	.word	0x0800bd04
 800b1c8:	0800b0f5 	.word	0x0800b0f5

0800b1cc <__sfp>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	f7ff ffac 	bl	800b12c <__sfp_lock_acquire>
 800b1d4:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <__sfp+0x84>)
 800b1d6:	681e      	ldr	r6, [r3, #0]
 800b1d8:	69b3      	ldr	r3, [r6, #24]
 800b1da:	b913      	cbnz	r3, 800b1e2 <__sfp+0x16>
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f7ff ffbd 	bl	800b15c <__sinit>
 800b1e2:	3648      	adds	r6, #72	; 0x48
 800b1e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	d503      	bpl.n	800b1f4 <__sfp+0x28>
 800b1ec:	6833      	ldr	r3, [r6, #0]
 800b1ee:	b30b      	cbz	r3, 800b234 <__sfp+0x68>
 800b1f0:	6836      	ldr	r6, [r6, #0]
 800b1f2:	e7f7      	b.n	800b1e4 <__sfp+0x18>
 800b1f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1f8:	b9d5      	cbnz	r5, 800b230 <__sfp+0x64>
 800b1fa:	4b16      	ldr	r3, [pc, #88]	; (800b254 <__sfp+0x88>)
 800b1fc:	60e3      	str	r3, [r4, #12]
 800b1fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b202:	6665      	str	r5, [r4, #100]	; 0x64
 800b204:	f000 f847 	bl	800b296 <__retarget_lock_init_recursive>
 800b208:	f7ff ff96 	bl	800b138 <__sfp_lock_release>
 800b20c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b214:	6025      	str	r5, [r4, #0]
 800b216:	61a5      	str	r5, [r4, #24]
 800b218:	2208      	movs	r2, #8
 800b21a:	4629      	mov	r1, r5
 800b21c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b220:	f7ff fc3c 	bl	800aa9c <memset>
 800b224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b22c:	4620      	mov	r0, r4
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	3468      	adds	r4, #104	; 0x68
 800b232:	e7d9      	b.n	800b1e8 <__sfp+0x1c>
 800b234:	2104      	movs	r1, #4
 800b236:	4638      	mov	r0, r7
 800b238:	f7ff ff62 	bl	800b100 <__sfmoreglue>
 800b23c:	4604      	mov	r4, r0
 800b23e:	6030      	str	r0, [r6, #0]
 800b240:	2800      	cmp	r0, #0
 800b242:	d1d5      	bne.n	800b1f0 <__sfp+0x24>
 800b244:	f7ff ff78 	bl	800b138 <__sfp_lock_release>
 800b248:	230c      	movs	r3, #12
 800b24a:	603b      	str	r3, [r7, #0]
 800b24c:	e7ee      	b.n	800b22c <__sfp+0x60>
 800b24e:	bf00      	nop
 800b250:	0800bd04 	.word	0x0800bd04
 800b254:	ffff0001 	.word	0xffff0001

0800b258 <_fwalk_reent>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4606      	mov	r6, r0
 800b25e:	4688      	mov	r8, r1
 800b260:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b264:	2700      	movs	r7, #0
 800b266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b26a:	f1b9 0901 	subs.w	r9, r9, #1
 800b26e:	d505      	bpl.n	800b27c <_fwalk_reent+0x24>
 800b270:	6824      	ldr	r4, [r4, #0]
 800b272:	2c00      	cmp	r4, #0
 800b274:	d1f7      	bne.n	800b266 <_fwalk_reent+0xe>
 800b276:	4638      	mov	r0, r7
 800b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27c:	89ab      	ldrh	r3, [r5, #12]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d907      	bls.n	800b292 <_fwalk_reent+0x3a>
 800b282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b286:	3301      	adds	r3, #1
 800b288:	d003      	beq.n	800b292 <_fwalk_reent+0x3a>
 800b28a:	4629      	mov	r1, r5
 800b28c:	4630      	mov	r0, r6
 800b28e:	47c0      	blx	r8
 800b290:	4307      	orrs	r7, r0
 800b292:	3568      	adds	r5, #104	; 0x68
 800b294:	e7e9      	b.n	800b26a <_fwalk_reent+0x12>

0800b296 <__retarget_lock_init_recursive>:
 800b296:	4770      	bx	lr

0800b298 <__retarget_lock_acquire_recursive>:
 800b298:	4770      	bx	lr

0800b29a <__retarget_lock_release_recursive>:
 800b29a:	4770      	bx	lr

0800b29c <__swhatbuf_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	460e      	mov	r6, r1
 800b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a4:	2900      	cmp	r1, #0
 800b2a6:	b096      	sub	sp, #88	; 0x58
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	461d      	mov	r5, r3
 800b2ac:	da08      	bge.n	800b2c0 <__swhatbuf_r+0x24>
 800b2ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	602a      	str	r2, [r5, #0]
 800b2b6:	061a      	lsls	r2, r3, #24
 800b2b8:	d410      	bmi.n	800b2dc <__swhatbuf_r+0x40>
 800b2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2be:	e00e      	b.n	800b2de <__swhatbuf_r+0x42>
 800b2c0:	466a      	mov	r2, sp
 800b2c2:	f000 fbb1 	bl	800ba28 <_fstat_r>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	dbf1      	blt.n	800b2ae <__swhatbuf_r+0x12>
 800b2ca:	9a01      	ldr	r2, [sp, #4]
 800b2cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2d4:	425a      	negs	r2, r3
 800b2d6:	415a      	adcs	r2, r3
 800b2d8:	602a      	str	r2, [r5, #0]
 800b2da:	e7ee      	b.n	800b2ba <__swhatbuf_r+0x1e>
 800b2dc:	2340      	movs	r3, #64	; 0x40
 800b2de:	2000      	movs	r0, #0
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	b016      	add	sp, #88	; 0x58
 800b2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2e8 <__smakebuf_r>:
 800b2e8:	898b      	ldrh	r3, [r1, #12]
 800b2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2ec:	079d      	lsls	r5, r3, #30
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	d507      	bpl.n	800b304 <__smakebuf_r+0x1c>
 800b2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	6163      	str	r3, [r4, #20]
 800b300:	b002      	add	sp, #8
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	ab01      	add	r3, sp, #4
 800b306:	466a      	mov	r2, sp
 800b308:	f7ff ffc8 	bl	800b29c <__swhatbuf_r>
 800b30c:	9900      	ldr	r1, [sp, #0]
 800b30e:	4605      	mov	r5, r0
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff fc37 	bl	800ab84 <_malloc_r>
 800b316:	b948      	cbnz	r0, 800b32c <__smakebuf_r+0x44>
 800b318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31c:	059a      	lsls	r2, r3, #22
 800b31e:	d4ef      	bmi.n	800b300 <__smakebuf_r+0x18>
 800b320:	f023 0303 	bic.w	r3, r3, #3
 800b324:	f043 0302 	orr.w	r3, r3, #2
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	e7e3      	b.n	800b2f4 <__smakebuf_r+0xc>
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <__smakebuf_r+0x7c>)
 800b32e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	6020      	str	r0, [r4, #0]
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	6163      	str	r3, [r4, #20]
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	6120      	str	r0, [r4, #16]
 800b342:	b15b      	cbz	r3, 800b35c <__smakebuf_r+0x74>
 800b344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 fb7f 	bl	800ba4c <_isatty_r>
 800b34e:	b128      	cbz	r0, 800b35c <__smakebuf_r+0x74>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	89a0      	ldrh	r0, [r4, #12]
 800b35e:	4305      	orrs	r5, r0
 800b360:	81a5      	strh	r5, [r4, #12]
 800b362:	e7cd      	b.n	800b300 <__smakebuf_r+0x18>
 800b364:	0800b0f5 	.word	0x0800b0f5

0800b368 <__malloc_lock>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__malloc_lock+0x8>)
 800b36a:	f7ff bf95 	b.w	800b298 <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200010fc 	.word	0x200010fc

0800b374 <__malloc_unlock>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__malloc_unlock+0x8>)
 800b376:	f7ff bf90 	b.w	800b29a <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200010fc 	.word	0x200010fc

0800b380 <__sfputc_r>:
 800b380:	6893      	ldr	r3, [r2, #8]
 800b382:	3b01      	subs	r3, #1
 800b384:	2b00      	cmp	r3, #0
 800b386:	b410      	push	{r4}
 800b388:	6093      	str	r3, [r2, #8]
 800b38a:	da08      	bge.n	800b39e <__sfputc_r+0x1e>
 800b38c:	6994      	ldr	r4, [r2, #24]
 800b38e:	42a3      	cmp	r3, r4
 800b390:	db01      	blt.n	800b396 <__sfputc_r+0x16>
 800b392:	290a      	cmp	r1, #10
 800b394:	d103      	bne.n	800b39e <__sfputc_r+0x1e>
 800b396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b39a:	f7ff bd05 	b.w	800ada8 <__swbuf_r>
 800b39e:	6813      	ldr	r3, [r2, #0]
 800b3a0:	1c58      	adds	r0, r3, #1
 800b3a2:	6010      	str	r0, [r2, #0]
 800b3a4:	7019      	strb	r1, [r3, #0]
 800b3a6:	4608      	mov	r0, r1
 800b3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <__sfputs_r>:
 800b3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	18d5      	adds	r5, r2, r3
 800b3b8:	42ac      	cmp	r4, r5
 800b3ba:	d101      	bne.n	800b3c0 <__sfputs_r+0x12>
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e007      	b.n	800b3d0 <__sfputs_r+0x22>
 800b3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c4:	463a      	mov	r2, r7
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ffda 	bl	800b380 <__sfputc_r>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d1f3      	bne.n	800b3b8 <__sfputs_r+0xa>
 800b3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3d4 <_vfiprintf_r>:
 800b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	460d      	mov	r5, r1
 800b3da:	b09d      	sub	sp, #116	; 0x74
 800b3dc:	4614      	mov	r4, r2
 800b3de:	4698      	mov	r8, r3
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	b118      	cbz	r0, 800b3ec <_vfiprintf_r+0x18>
 800b3e4:	6983      	ldr	r3, [r0, #24]
 800b3e6:	b90b      	cbnz	r3, 800b3ec <_vfiprintf_r+0x18>
 800b3e8:	f7ff feb8 	bl	800b15c <__sinit>
 800b3ec:	4b89      	ldr	r3, [pc, #548]	; (800b614 <_vfiprintf_r+0x240>)
 800b3ee:	429d      	cmp	r5, r3
 800b3f0:	d11b      	bne.n	800b42a <_vfiprintf_r+0x56>
 800b3f2:	6875      	ldr	r5, [r6, #4]
 800b3f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3f6:	07d9      	lsls	r1, r3, #31
 800b3f8:	d405      	bmi.n	800b406 <_vfiprintf_r+0x32>
 800b3fa:	89ab      	ldrh	r3, [r5, #12]
 800b3fc:	059a      	lsls	r2, r3, #22
 800b3fe:	d402      	bmi.n	800b406 <_vfiprintf_r+0x32>
 800b400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b402:	f7ff ff49 	bl	800b298 <__retarget_lock_acquire_recursive>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	071b      	lsls	r3, r3, #28
 800b40a:	d501      	bpl.n	800b410 <_vfiprintf_r+0x3c>
 800b40c:	692b      	ldr	r3, [r5, #16]
 800b40e:	b9eb      	cbnz	r3, 800b44c <_vfiprintf_r+0x78>
 800b410:	4629      	mov	r1, r5
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff fd1a 	bl	800ae4c <__swsetup_r>
 800b418:	b1c0      	cbz	r0, 800b44c <_vfiprintf_r+0x78>
 800b41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41c:	07dc      	lsls	r4, r3, #31
 800b41e:	d50e      	bpl.n	800b43e <_vfiprintf_r+0x6a>
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	b01d      	add	sp, #116	; 0x74
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	4b7b      	ldr	r3, [pc, #492]	; (800b618 <_vfiprintf_r+0x244>)
 800b42c:	429d      	cmp	r5, r3
 800b42e:	d101      	bne.n	800b434 <_vfiprintf_r+0x60>
 800b430:	68b5      	ldr	r5, [r6, #8]
 800b432:	e7df      	b.n	800b3f4 <_vfiprintf_r+0x20>
 800b434:	4b79      	ldr	r3, [pc, #484]	; (800b61c <_vfiprintf_r+0x248>)
 800b436:	429d      	cmp	r5, r3
 800b438:	bf08      	it	eq
 800b43a:	68f5      	ldreq	r5, [r6, #12]
 800b43c:	e7da      	b.n	800b3f4 <_vfiprintf_r+0x20>
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	0598      	lsls	r0, r3, #22
 800b442:	d4ed      	bmi.n	800b420 <_vfiprintf_r+0x4c>
 800b444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b446:	f7ff ff28 	bl	800b29a <__retarget_lock_release_recursive>
 800b44a:	e7e9      	b.n	800b420 <_vfiprintf_r+0x4c>
 800b44c:	2300      	movs	r3, #0
 800b44e:	9309      	str	r3, [sp, #36]	; 0x24
 800b450:	2320      	movs	r3, #32
 800b452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b456:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45a:	2330      	movs	r3, #48	; 0x30
 800b45c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b620 <_vfiprintf_r+0x24c>
 800b460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b464:	f04f 0901 	mov.w	r9, #1
 800b468:	4623      	mov	r3, r4
 800b46a:	469a      	mov	sl, r3
 800b46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b470:	b10a      	cbz	r2, 800b476 <_vfiprintf_r+0xa2>
 800b472:	2a25      	cmp	r2, #37	; 0x25
 800b474:	d1f9      	bne.n	800b46a <_vfiprintf_r+0x96>
 800b476:	ebba 0b04 	subs.w	fp, sl, r4
 800b47a:	d00b      	beq.n	800b494 <_vfiprintf_r+0xc0>
 800b47c:	465b      	mov	r3, fp
 800b47e:	4622      	mov	r2, r4
 800b480:	4629      	mov	r1, r5
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ff93 	bl	800b3ae <__sfputs_r>
 800b488:	3001      	adds	r0, #1
 800b48a:	f000 80aa 	beq.w	800b5e2 <_vfiprintf_r+0x20e>
 800b48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b490:	445a      	add	r2, fp
 800b492:	9209      	str	r2, [sp, #36]	; 0x24
 800b494:	f89a 3000 	ldrb.w	r3, [sl]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 80a2 	beq.w	800b5e2 <_vfiprintf_r+0x20e>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a8:	f10a 0a01 	add.w	sl, sl, #1
 800b4ac:	9304      	str	r3, [sp, #16]
 800b4ae:	9307      	str	r3, [sp, #28]
 800b4b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b6:	4654      	mov	r4, sl
 800b4b8:	2205      	movs	r2, #5
 800b4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4be:	4858      	ldr	r0, [pc, #352]	; (800b620 <_vfiprintf_r+0x24c>)
 800b4c0:	f7f4 fe86 	bl	80001d0 <memchr>
 800b4c4:	9a04      	ldr	r2, [sp, #16]
 800b4c6:	b9d8      	cbnz	r0, 800b500 <_vfiprintf_r+0x12c>
 800b4c8:	06d1      	lsls	r1, r2, #27
 800b4ca:	bf44      	itt	mi
 800b4cc:	2320      	movmi	r3, #32
 800b4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d2:	0713      	lsls	r3, r2, #28
 800b4d4:	bf44      	itt	mi
 800b4d6:	232b      	movmi	r3, #43	; 0x2b
 800b4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e2:	d015      	beq.n	800b510 <_vfiprintf_r+0x13c>
 800b4e4:	9a07      	ldr	r2, [sp, #28]
 800b4e6:	4654      	mov	r4, sl
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f04f 0c0a 	mov.w	ip, #10
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f4:	3b30      	subs	r3, #48	; 0x30
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	d94e      	bls.n	800b598 <_vfiprintf_r+0x1c4>
 800b4fa:	b1b0      	cbz	r0, 800b52a <_vfiprintf_r+0x156>
 800b4fc:	9207      	str	r2, [sp, #28]
 800b4fe:	e014      	b.n	800b52a <_vfiprintf_r+0x156>
 800b500:	eba0 0308 	sub.w	r3, r0, r8
 800b504:	fa09 f303 	lsl.w	r3, r9, r3
 800b508:	4313      	orrs	r3, r2
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	46a2      	mov	sl, r4
 800b50e:	e7d2      	b.n	800b4b6 <_vfiprintf_r+0xe2>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	1d19      	adds	r1, r3, #4
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	9103      	str	r1, [sp, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfbb      	ittet	lt
 800b51c:	425b      	neglt	r3, r3
 800b51e:	f042 0202 	orrlt.w	r2, r2, #2
 800b522:	9307      	strge	r3, [sp, #28]
 800b524:	9307      	strlt	r3, [sp, #28]
 800b526:	bfb8      	it	lt
 800b528:	9204      	strlt	r2, [sp, #16]
 800b52a:	7823      	ldrb	r3, [r4, #0]
 800b52c:	2b2e      	cmp	r3, #46	; 0x2e
 800b52e:	d10c      	bne.n	800b54a <_vfiprintf_r+0x176>
 800b530:	7863      	ldrb	r3, [r4, #1]
 800b532:	2b2a      	cmp	r3, #42	; 0x2a
 800b534:	d135      	bne.n	800b5a2 <_vfiprintf_r+0x1ce>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	1d1a      	adds	r2, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9203      	str	r2, [sp, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfb8      	it	lt
 800b542:	f04f 33ff 	movlt.w	r3, #4294967295
 800b546:	3402      	adds	r4, #2
 800b548:	9305      	str	r3, [sp, #20]
 800b54a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b630 <_vfiprintf_r+0x25c>
 800b54e:	7821      	ldrb	r1, [r4, #0]
 800b550:	2203      	movs	r2, #3
 800b552:	4650      	mov	r0, sl
 800b554:	f7f4 fe3c 	bl	80001d0 <memchr>
 800b558:	b140      	cbz	r0, 800b56c <_vfiprintf_r+0x198>
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	eba0 000a 	sub.w	r0, r0, sl
 800b560:	fa03 f000 	lsl.w	r0, r3, r0
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	4303      	orrs	r3, r0
 800b568:	3401      	adds	r4, #1
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b570:	482c      	ldr	r0, [pc, #176]	; (800b624 <_vfiprintf_r+0x250>)
 800b572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b576:	2206      	movs	r2, #6
 800b578:	f7f4 fe2a 	bl	80001d0 <memchr>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d03f      	beq.n	800b600 <_vfiprintf_r+0x22c>
 800b580:	4b29      	ldr	r3, [pc, #164]	; (800b628 <_vfiprintf_r+0x254>)
 800b582:	bb1b      	cbnz	r3, 800b5cc <_vfiprintf_r+0x1f8>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	3307      	adds	r3, #7
 800b588:	f023 0307 	bic.w	r3, r3, #7
 800b58c:	3308      	adds	r3, #8
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b592:	443b      	add	r3, r7
 800b594:	9309      	str	r3, [sp, #36]	; 0x24
 800b596:	e767      	b.n	800b468 <_vfiprintf_r+0x94>
 800b598:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59c:	460c      	mov	r4, r1
 800b59e:	2001      	movs	r0, #1
 800b5a0:	e7a5      	b.n	800b4ee <_vfiprintf_r+0x11a>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	3401      	adds	r4, #1
 800b5a6:	9305      	str	r3, [sp, #20]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f04f 0c0a 	mov.w	ip, #10
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b4:	3a30      	subs	r2, #48	; 0x30
 800b5b6:	2a09      	cmp	r2, #9
 800b5b8:	d903      	bls.n	800b5c2 <_vfiprintf_r+0x1ee>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c5      	beq.n	800b54a <_vfiprintf_r+0x176>
 800b5be:	9105      	str	r1, [sp, #20]
 800b5c0:	e7c3      	b.n	800b54a <_vfiprintf_r+0x176>
 800b5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e7f0      	b.n	800b5ae <_vfiprintf_r+0x1da>
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4b16      	ldr	r3, [pc, #88]	; (800b62c <_vfiprintf_r+0x258>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f3af 8000 	nop.w
 800b5dc:	4607      	mov	r7, r0
 800b5de:	1c78      	adds	r0, r7, #1
 800b5e0:	d1d6      	bne.n	800b590 <_vfiprintf_r+0x1bc>
 800b5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5e4:	07d9      	lsls	r1, r3, #31
 800b5e6:	d405      	bmi.n	800b5f4 <_vfiprintf_r+0x220>
 800b5e8:	89ab      	ldrh	r3, [r5, #12]
 800b5ea:	059a      	lsls	r2, r3, #22
 800b5ec:	d402      	bmi.n	800b5f4 <_vfiprintf_r+0x220>
 800b5ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5f0:	f7ff fe53 	bl	800b29a <__retarget_lock_release_recursive>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	065b      	lsls	r3, r3, #25
 800b5f8:	f53f af12 	bmi.w	800b420 <_vfiprintf_r+0x4c>
 800b5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fe:	e711      	b.n	800b424 <_vfiprintf_r+0x50>
 800b600:	ab03      	add	r3, sp, #12
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	462a      	mov	r2, r5
 800b606:	4b09      	ldr	r3, [pc, #36]	; (800b62c <_vfiprintf_r+0x258>)
 800b608:	a904      	add	r1, sp, #16
 800b60a:	4630      	mov	r0, r6
 800b60c:	f000 f880 	bl	800b710 <_printf_i>
 800b610:	e7e4      	b.n	800b5dc <_vfiprintf_r+0x208>
 800b612:	bf00      	nop
 800b614:	0800bd28 	.word	0x0800bd28
 800b618:	0800bd48 	.word	0x0800bd48
 800b61c:	0800bd08 	.word	0x0800bd08
 800b620:	0800bd68 	.word	0x0800bd68
 800b624:	0800bd72 	.word	0x0800bd72
 800b628:	00000000 	.word	0x00000000
 800b62c:	0800b3af 	.word	0x0800b3af
 800b630:	0800bd6e 	.word	0x0800bd6e

0800b634 <_printf_common>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	4616      	mov	r6, r2
 800b63a:	4699      	mov	r9, r3
 800b63c:	688a      	ldr	r2, [r1, #8]
 800b63e:	690b      	ldr	r3, [r1, #16]
 800b640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b644:	4293      	cmp	r3, r2
 800b646:	bfb8      	it	lt
 800b648:	4613      	movlt	r3, r2
 800b64a:	6033      	str	r3, [r6, #0]
 800b64c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b650:	4607      	mov	r7, r0
 800b652:	460c      	mov	r4, r1
 800b654:	b10a      	cbz	r2, 800b65a <_printf_common+0x26>
 800b656:	3301      	adds	r3, #1
 800b658:	6033      	str	r3, [r6, #0]
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	0699      	lsls	r1, r3, #26
 800b65e:	bf42      	ittt	mi
 800b660:	6833      	ldrmi	r3, [r6, #0]
 800b662:	3302      	addmi	r3, #2
 800b664:	6033      	strmi	r3, [r6, #0]
 800b666:	6825      	ldr	r5, [r4, #0]
 800b668:	f015 0506 	ands.w	r5, r5, #6
 800b66c:	d106      	bne.n	800b67c <_printf_common+0x48>
 800b66e:	f104 0a19 	add.w	sl, r4, #25
 800b672:	68e3      	ldr	r3, [r4, #12]
 800b674:	6832      	ldr	r2, [r6, #0]
 800b676:	1a9b      	subs	r3, r3, r2
 800b678:	42ab      	cmp	r3, r5
 800b67a:	dc26      	bgt.n	800b6ca <_printf_common+0x96>
 800b67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b680:	1e13      	subs	r3, r2, #0
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	bf18      	it	ne
 800b686:	2301      	movne	r3, #1
 800b688:	0692      	lsls	r2, r2, #26
 800b68a:	d42b      	bmi.n	800b6e4 <_printf_common+0xb0>
 800b68c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b690:	4649      	mov	r1, r9
 800b692:	4638      	mov	r0, r7
 800b694:	47c0      	blx	r8
 800b696:	3001      	adds	r0, #1
 800b698:	d01e      	beq.n	800b6d8 <_printf_common+0xa4>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	68e5      	ldr	r5, [r4, #12]
 800b69e:	6832      	ldr	r2, [r6, #0]
 800b6a0:	f003 0306 	and.w	r3, r3, #6
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	bf08      	it	eq
 800b6a8:	1aad      	subeq	r5, r5, r2
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	bf0c      	ite	eq
 800b6b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6b4:	2500      	movne	r5, #0
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	bfc4      	itt	gt
 800b6ba:	1a9b      	subgt	r3, r3, r2
 800b6bc:	18ed      	addgt	r5, r5, r3
 800b6be:	2600      	movs	r6, #0
 800b6c0:	341a      	adds	r4, #26
 800b6c2:	42b5      	cmp	r5, r6
 800b6c4:	d11a      	bne.n	800b6fc <_printf_common+0xc8>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e008      	b.n	800b6dc <_printf_common+0xa8>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4652      	mov	r2, sl
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	47c0      	blx	r8
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d103      	bne.n	800b6e0 <_printf_common+0xac>
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e0:	3501      	adds	r5, #1
 800b6e2:	e7c6      	b.n	800b672 <_printf_common+0x3e>
 800b6e4:	18e1      	adds	r1, r4, r3
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	2030      	movs	r0, #48	; 0x30
 800b6ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ee:	4422      	add	r2, r4
 800b6f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	e7c7      	b.n	800b68c <_printf_common+0x58>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4622      	mov	r2, r4
 800b700:	4649      	mov	r1, r9
 800b702:	4638      	mov	r0, r7
 800b704:	47c0      	blx	r8
 800b706:	3001      	adds	r0, #1
 800b708:	d0e6      	beq.n	800b6d8 <_printf_common+0xa4>
 800b70a:	3601      	adds	r6, #1
 800b70c:	e7d9      	b.n	800b6c2 <_printf_common+0x8e>
	...

0800b710 <_printf_i>:
 800b710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	7e0f      	ldrb	r7, [r1, #24]
 800b716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b718:	2f78      	cmp	r7, #120	; 0x78
 800b71a:	4691      	mov	r9, r2
 800b71c:	4680      	mov	r8, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	469a      	mov	sl, r3
 800b722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b726:	d807      	bhi.n	800b738 <_printf_i+0x28>
 800b728:	2f62      	cmp	r7, #98	; 0x62
 800b72a:	d80a      	bhi.n	800b742 <_printf_i+0x32>
 800b72c:	2f00      	cmp	r7, #0
 800b72e:	f000 80d8 	beq.w	800b8e2 <_printf_i+0x1d2>
 800b732:	2f58      	cmp	r7, #88	; 0x58
 800b734:	f000 80a3 	beq.w	800b87e <_printf_i+0x16e>
 800b738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b73c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b740:	e03a      	b.n	800b7b8 <_printf_i+0xa8>
 800b742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b746:	2b15      	cmp	r3, #21
 800b748:	d8f6      	bhi.n	800b738 <_printf_i+0x28>
 800b74a:	a101      	add	r1, pc, #4	; (adr r1, 800b750 <_printf_i+0x40>)
 800b74c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b750:	0800b7a9 	.word	0x0800b7a9
 800b754:	0800b7bd 	.word	0x0800b7bd
 800b758:	0800b739 	.word	0x0800b739
 800b75c:	0800b739 	.word	0x0800b739
 800b760:	0800b739 	.word	0x0800b739
 800b764:	0800b739 	.word	0x0800b739
 800b768:	0800b7bd 	.word	0x0800b7bd
 800b76c:	0800b739 	.word	0x0800b739
 800b770:	0800b739 	.word	0x0800b739
 800b774:	0800b739 	.word	0x0800b739
 800b778:	0800b739 	.word	0x0800b739
 800b77c:	0800b8c9 	.word	0x0800b8c9
 800b780:	0800b7ed 	.word	0x0800b7ed
 800b784:	0800b8ab 	.word	0x0800b8ab
 800b788:	0800b739 	.word	0x0800b739
 800b78c:	0800b739 	.word	0x0800b739
 800b790:	0800b8eb 	.word	0x0800b8eb
 800b794:	0800b739 	.word	0x0800b739
 800b798:	0800b7ed 	.word	0x0800b7ed
 800b79c:	0800b739 	.word	0x0800b739
 800b7a0:	0800b739 	.word	0x0800b739
 800b7a4:	0800b8b3 	.word	0x0800b8b3
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	1d1a      	adds	r2, r3, #4
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	602a      	str	r2, [r5, #0]
 800b7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e0a3      	b.n	800b904 <_printf_i+0x1f4>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	6829      	ldr	r1, [r5, #0]
 800b7c0:	0606      	lsls	r6, r0, #24
 800b7c2:	f101 0304 	add.w	r3, r1, #4
 800b7c6:	d50a      	bpl.n	800b7de <_printf_i+0xce>
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	602b      	str	r3, [r5, #0]
 800b7cc:	2e00      	cmp	r6, #0
 800b7ce:	da03      	bge.n	800b7d8 <_printf_i+0xc8>
 800b7d0:	232d      	movs	r3, #45	; 0x2d
 800b7d2:	4276      	negs	r6, r6
 800b7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7d8:	485e      	ldr	r0, [pc, #376]	; (800b954 <_printf_i+0x244>)
 800b7da:	230a      	movs	r3, #10
 800b7dc:	e019      	b.n	800b812 <_printf_i+0x102>
 800b7de:	680e      	ldr	r6, [r1, #0]
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7e6:	bf18      	it	ne
 800b7e8:	b236      	sxthne	r6, r6
 800b7ea:	e7ef      	b.n	800b7cc <_printf_i+0xbc>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	1d19      	adds	r1, r3, #4
 800b7f2:	6029      	str	r1, [r5, #0]
 800b7f4:	0601      	lsls	r1, r0, #24
 800b7f6:	d501      	bpl.n	800b7fc <_printf_i+0xec>
 800b7f8:	681e      	ldr	r6, [r3, #0]
 800b7fa:	e002      	b.n	800b802 <_printf_i+0xf2>
 800b7fc:	0646      	lsls	r6, r0, #25
 800b7fe:	d5fb      	bpl.n	800b7f8 <_printf_i+0xe8>
 800b800:	881e      	ldrh	r6, [r3, #0]
 800b802:	4854      	ldr	r0, [pc, #336]	; (800b954 <_printf_i+0x244>)
 800b804:	2f6f      	cmp	r7, #111	; 0x6f
 800b806:	bf0c      	ite	eq
 800b808:	2308      	moveq	r3, #8
 800b80a:	230a      	movne	r3, #10
 800b80c:	2100      	movs	r1, #0
 800b80e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b812:	6865      	ldr	r5, [r4, #4]
 800b814:	60a5      	str	r5, [r4, #8]
 800b816:	2d00      	cmp	r5, #0
 800b818:	bfa2      	ittt	ge
 800b81a:	6821      	ldrge	r1, [r4, #0]
 800b81c:	f021 0104 	bicge.w	r1, r1, #4
 800b820:	6021      	strge	r1, [r4, #0]
 800b822:	b90e      	cbnz	r6, 800b828 <_printf_i+0x118>
 800b824:	2d00      	cmp	r5, #0
 800b826:	d04d      	beq.n	800b8c4 <_printf_i+0x1b4>
 800b828:	4615      	mov	r5, r2
 800b82a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b82e:	fb03 6711 	mls	r7, r3, r1, r6
 800b832:	5dc7      	ldrb	r7, [r0, r7]
 800b834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b838:	4637      	mov	r7, r6
 800b83a:	42bb      	cmp	r3, r7
 800b83c:	460e      	mov	r6, r1
 800b83e:	d9f4      	bls.n	800b82a <_printf_i+0x11a>
 800b840:	2b08      	cmp	r3, #8
 800b842:	d10b      	bne.n	800b85c <_printf_i+0x14c>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07de      	lsls	r6, r3, #31
 800b848:	d508      	bpl.n	800b85c <_printf_i+0x14c>
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	6861      	ldr	r1, [r4, #4]
 800b84e:	4299      	cmp	r1, r3
 800b850:	bfde      	ittt	le
 800b852:	2330      	movle	r3, #48	; 0x30
 800b854:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b858:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b85c:	1b52      	subs	r2, r2, r5
 800b85e:	6122      	str	r2, [r4, #16]
 800b860:	f8cd a000 	str.w	sl, [sp]
 800b864:	464b      	mov	r3, r9
 800b866:	aa03      	add	r2, sp, #12
 800b868:	4621      	mov	r1, r4
 800b86a:	4640      	mov	r0, r8
 800b86c:	f7ff fee2 	bl	800b634 <_printf_common>
 800b870:	3001      	adds	r0, #1
 800b872:	d14c      	bne.n	800b90e <_printf_i+0x1fe>
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	b004      	add	sp, #16
 800b87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b87e:	4835      	ldr	r0, [pc, #212]	; (800b954 <_printf_i+0x244>)
 800b880:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b884:	6829      	ldr	r1, [r5, #0]
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	f851 6b04 	ldr.w	r6, [r1], #4
 800b88c:	6029      	str	r1, [r5, #0]
 800b88e:	061d      	lsls	r5, r3, #24
 800b890:	d514      	bpl.n	800b8bc <_printf_i+0x1ac>
 800b892:	07df      	lsls	r7, r3, #31
 800b894:	bf44      	itt	mi
 800b896:	f043 0320 	orrmi.w	r3, r3, #32
 800b89a:	6023      	strmi	r3, [r4, #0]
 800b89c:	b91e      	cbnz	r6, 800b8a6 <_printf_i+0x196>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	f023 0320 	bic.w	r3, r3, #32
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	2310      	movs	r3, #16
 800b8a8:	e7b0      	b.n	800b80c <_printf_i+0xfc>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f043 0320 	orr.w	r3, r3, #32
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	2378      	movs	r3, #120	; 0x78
 800b8b4:	4828      	ldr	r0, [pc, #160]	; (800b958 <_printf_i+0x248>)
 800b8b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ba:	e7e3      	b.n	800b884 <_printf_i+0x174>
 800b8bc:	0659      	lsls	r1, r3, #25
 800b8be:	bf48      	it	mi
 800b8c0:	b2b6      	uxthmi	r6, r6
 800b8c2:	e7e6      	b.n	800b892 <_printf_i+0x182>
 800b8c4:	4615      	mov	r5, r2
 800b8c6:	e7bb      	b.n	800b840 <_printf_i+0x130>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	6826      	ldr	r6, [r4, #0]
 800b8cc:	6961      	ldr	r1, [r4, #20]
 800b8ce:	1d18      	adds	r0, r3, #4
 800b8d0:	6028      	str	r0, [r5, #0]
 800b8d2:	0635      	lsls	r5, r6, #24
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	d501      	bpl.n	800b8dc <_printf_i+0x1cc>
 800b8d8:	6019      	str	r1, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <_printf_i+0x1d2>
 800b8dc:	0670      	lsls	r0, r6, #25
 800b8de:	d5fb      	bpl.n	800b8d8 <_printf_i+0x1c8>
 800b8e0:	8019      	strh	r1, [r3, #0]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	4615      	mov	r5, r2
 800b8e8:	e7ba      	b.n	800b860 <_printf_i+0x150>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	1d1a      	adds	r2, r3, #4
 800b8ee:	602a      	str	r2, [r5, #0]
 800b8f0:	681d      	ldr	r5, [r3, #0]
 800b8f2:	6862      	ldr	r2, [r4, #4]
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f7f4 fc6a 	bl	80001d0 <memchr>
 800b8fc:	b108      	cbz	r0, 800b902 <_printf_i+0x1f2>
 800b8fe:	1b40      	subs	r0, r0, r5
 800b900:	6060      	str	r0, [r4, #4]
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	2300      	movs	r3, #0
 800b908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b90c:	e7a8      	b.n	800b860 <_printf_i+0x150>
 800b90e:	6923      	ldr	r3, [r4, #16]
 800b910:	462a      	mov	r2, r5
 800b912:	4649      	mov	r1, r9
 800b914:	4640      	mov	r0, r8
 800b916:	47d0      	blx	sl
 800b918:	3001      	adds	r0, #1
 800b91a:	d0ab      	beq.n	800b874 <_printf_i+0x164>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	079b      	lsls	r3, r3, #30
 800b920:	d413      	bmi.n	800b94a <_printf_i+0x23a>
 800b922:	68e0      	ldr	r0, [r4, #12]
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	4298      	cmp	r0, r3
 800b928:	bfb8      	it	lt
 800b92a:	4618      	movlt	r0, r3
 800b92c:	e7a4      	b.n	800b878 <_printf_i+0x168>
 800b92e:	2301      	movs	r3, #1
 800b930:	4632      	mov	r2, r6
 800b932:	4649      	mov	r1, r9
 800b934:	4640      	mov	r0, r8
 800b936:	47d0      	blx	sl
 800b938:	3001      	adds	r0, #1
 800b93a:	d09b      	beq.n	800b874 <_printf_i+0x164>
 800b93c:	3501      	adds	r5, #1
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	9903      	ldr	r1, [sp, #12]
 800b942:	1a5b      	subs	r3, r3, r1
 800b944:	42ab      	cmp	r3, r5
 800b946:	dcf2      	bgt.n	800b92e <_printf_i+0x21e>
 800b948:	e7eb      	b.n	800b922 <_printf_i+0x212>
 800b94a:	2500      	movs	r5, #0
 800b94c:	f104 0619 	add.w	r6, r4, #25
 800b950:	e7f5      	b.n	800b93e <_printf_i+0x22e>
 800b952:	bf00      	nop
 800b954:	0800bd79 	.word	0x0800bd79
 800b958:	0800bd8a 	.word	0x0800bd8a

0800b95c <__sread>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	460c      	mov	r4, r1
 800b960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b964:	f000 f894 	bl	800ba90 <_read_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	bfab      	itete	ge
 800b96c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b96e:	89a3      	ldrhlt	r3, [r4, #12]
 800b970:	181b      	addge	r3, r3, r0
 800b972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b976:	bfac      	ite	ge
 800b978:	6563      	strge	r3, [r4, #84]	; 0x54
 800b97a:	81a3      	strhlt	r3, [r4, #12]
 800b97c:	bd10      	pop	{r4, pc}

0800b97e <__swrite>:
 800b97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	461f      	mov	r7, r3
 800b984:	898b      	ldrh	r3, [r1, #12]
 800b986:	05db      	lsls	r3, r3, #23
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	4616      	mov	r6, r2
 800b98e:	d505      	bpl.n	800b99c <__swrite+0x1e>
 800b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b994:	2302      	movs	r3, #2
 800b996:	2200      	movs	r2, #0
 800b998:	f000 f868 	bl	800ba6c <_lseek_r>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9a6:	81a3      	strh	r3, [r4, #12]
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b2:	f000 b817 	b.w	800b9e4 <_write_r>

0800b9b6 <__sseek>:
 800b9b6:	b510      	push	{r4, lr}
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9be:	f000 f855 	bl	800ba6c <_lseek_r>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	bf15      	itete	ne
 800b9c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9d2:	81a3      	strheq	r3, [r4, #12]
 800b9d4:	bf18      	it	ne
 800b9d6:	81a3      	strhne	r3, [r4, #12]
 800b9d8:	bd10      	pop	{r4, pc}

0800b9da <__sclose>:
 800b9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9de:	f000 b813 	b.w	800ba08 <_close_r>
	...

0800b9e4 <_write_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4d07      	ldr	r5, [pc, #28]	; (800ba04 <_write_r+0x20>)
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	4608      	mov	r0, r1
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	602a      	str	r2, [r5, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f7f6 fe5b 	bl	80026ae <_write>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_write_r+0x1e>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_write_r+0x1e>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	20001100 	.word	0x20001100

0800ba08 <_close_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d06      	ldr	r5, [pc, #24]	; (800ba24 <_close_r+0x1c>)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	602b      	str	r3, [r5, #0]
 800ba14:	f7f6 fe67 	bl	80026e6 <_close>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_close_r+0x1a>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_close_r+0x1a>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	20001100 	.word	0x20001100

0800ba28 <_fstat_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d07      	ldr	r5, [pc, #28]	; (800ba48 <_fstat_r+0x20>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	4611      	mov	r1, r2
 800ba34:	602b      	str	r3, [r5, #0]
 800ba36:	f7f6 fe62 	bl	80026fe <_fstat>
 800ba3a:	1c43      	adds	r3, r0, #1
 800ba3c:	d102      	bne.n	800ba44 <_fstat_r+0x1c>
 800ba3e:	682b      	ldr	r3, [r5, #0]
 800ba40:	b103      	cbz	r3, 800ba44 <_fstat_r+0x1c>
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	bd38      	pop	{r3, r4, r5, pc}
 800ba46:	bf00      	nop
 800ba48:	20001100 	.word	0x20001100

0800ba4c <_isatty_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d06      	ldr	r5, [pc, #24]	; (800ba68 <_isatty_r+0x1c>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	f7f6 fe61 	bl	800271e <_isatty>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_isatty_r+0x1a>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_isatty_r+0x1a>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20001100 	.word	0x20001100

0800ba6c <_lseek_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	; (800ba8c <_lseek_r+0x20>)
 800ba70:	4604      	mov	r4, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	602a      	str	r2, [r5, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7f6 fe5a 	bl	8002734 <_lseek>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_lseek_r+0x1e>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_lseek_r+0x1e>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20001100 	.word	0x20001100

0800ba90 <_read_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d07      	ldr	r5, [pc, #28]	; (800bab0 <_read_r+0x20>)
 800ba94:	4604      	mov	r4, r0
 800ba96:	4608      	mov	r0, r1
 800ba98:	4611      	mov	r1, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f7f6 fde8 	bl	8002674 <_read>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_read_r+0x1e>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_read_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	20001100 	.word	0x20001100

0800bab4 <_init>:
 800bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab6:	bf00      	nop
 800bab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baba:	bc08      	pop	{r3}
 800babc:	469e      	mov	lr, r3
 800babe:	4770      	bx	lr

0800bac0 <_fini>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	bf00      	nop
 800bac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac6:	bc08      	pop	{r3}
 800bac8:	469e      	mov	lr, r3
 800baca:	4770      	bx	lr
